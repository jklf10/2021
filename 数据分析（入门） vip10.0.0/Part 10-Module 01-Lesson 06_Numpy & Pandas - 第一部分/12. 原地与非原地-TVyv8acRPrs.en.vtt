WEBVTT
Kind: captions
Language: en

00:00:00.310 --> 00:00:03.350
The answer to this question is
a bit surprising or at least,

00:00:03.350 --> 00:00:05.160
it surprised me when I first learned it.

00:00:05.160 --> 00:00:07.750
Because Numpy arrays have different
behavior than Python lists.

00:00:08.750 --> 00:00:13.680
You start off with the variable
a referring to the array 1, 2, 3, 4, 5.

00:00:13.680 --> 00:00:17.630
However, when you take a slice of
the first three elements of the array a,

00:00:17.630 --> 00:00:19.630
Numpy doesn't actually
create a new array.

00:00:20.770 --> 00:00:25.310
Instead, slice refers to what's
called a view of the original array.

00:00:25.310 --> 00:00:27.240
It will look like a new array, but

00:00:27.240 --> 00:00:30.990
if you modify it,
the original array is modified as well.

00:00:32.180 --> 00:00:34.510
This makes slicing a Numpy very fast,

00:00:34.510 --> 00:00:38.090
since you don't have to create
a new array or copy any new values.

00:00:38.090 --> 00:00:41.400
But it means you should be very
careful any time you want to modify

00:00:41.400 --> 00:00:42.300
a slice of an array.

00:00:43.360 --> 00:00:46.970
So the correct answer here is that
the output is this second choice.

00:00:46.970 --> 00:00:50.634
An array containing 100, 2, 3, 4, and 5.

