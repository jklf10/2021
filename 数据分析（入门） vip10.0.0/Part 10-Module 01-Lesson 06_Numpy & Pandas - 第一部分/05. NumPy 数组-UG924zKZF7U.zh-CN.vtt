WEBVTT
Kind: captions
Language: zh-CN

00:00:00.230 --> 00:00:03.110
我先教你如何编写 max_employment 函数

00:00:03.110 --> 00:00:06.780
然后 我再告诉你测试代码的正确输出是什么

00:00:06.780 --> 00:00:09.890
我将讲解如何在 iPython notebook 中运行所有的代码

00:00:09.890 --> 00:00:13.290
为编写这个代码 我先将就业最大值设为 0

00:00:13.290 --> 00:00:14.770
并把相应的国家设为 None

00:00:15.910 --> 00:00:19.300
接下来 我遍历两个 NumPy 数组的每一个元素

00:00:19.300 --> 00:00:22.680
由于两个数组的长度相同 我在这里

00:00:22.680 --> 00:00:25.880
既可以使用 len(countries) 也可以使用 len(employment)

00:00:25.880 --> 00:00:29.010
接下来 我检查该国家的就业数据是否

00:00:29.010 --> 00:00:31.660
大于我目前找出的最大就业率

00:00:31.660 --> 00:00:35.055
如果是 我就更新

00:00:35.055 --> 00:00:37.305
最大国家和最大就业值

00:00:37.305 --> 00:00:39.375
最后 我返回这两个值

00:00:39.375 --> 00:00:42.345
我在使用 NumPy 数组时编写的这段代码

00:00:42.345 --> 00:00:45.130
与我使用列表时的代码相同

00:00:45.130 --> 00:00:46.960
这是一个很有用的技巧

00:00:46.960 --> 00:00:50.040
如果没有能满足你需求的 NumPy 函数

00:00:50.040 --> 00:00:52.330
你也可以把它们当作列表来编写代码

00:00:53.430 --> 00:00:57.800
但这里 我们也可以利用 NumPy 更简便的方法解决问题

00:00:57.800 --> 00:01:01.470
这个你不一定知道 我来讲一下

00:01:01.470 --> 00:01:05.050
你可能知道 可以利用 NumPy 的 max 函数

00:01:05.050 --> 00:01:06.220
找出就业数据的最大值

00:01:06.220 --> 00:01:08.940
但这样 你就无法得到相应的国家名

00:01:08.940 --> 00:01:13.900
NumPy 还有一个名为 argmax 的函数

00:01:13.900 --> 00:01:17.240
它可以返回最大值的位置

00:01:17.240 --> 00:01:20.620
我把这个位置命名为 i

00:01:20.620 --> 00:01:23.400
这样 我就可以利用这个位置 获得国家名和就业率值了

00:01:23.400 --> 00:01:24.950
现在 我们来看一下测试代码

00:01:24.950 --> 00:01:27.590
第一行是导入 NumPy 库

00:01:27.590 --> 00:01:30.770
下一行针对有就业数据的前 20 个国家

00:01:30.770 --> 00:01:32.290
创建了一个 NumPy 数组

00:01:32.290 --> 00:01:36.180
我刚才使用的方法是创建 NumPy 数组最简单的方法之一

00:01:36.180 --> 00:01:39.870
首先 你创建一个 python 列表 然后调用 np.array

00:01:39.870 --> 00:01:43.300
它将该列表作为参数 将其转换成 NumPy 数组

00:01:43.300 --> 00:01:47.659
下一行利用同样的技巧

00:01:47.659 --> 00:01:48.608
创建 2007 年就业率的 NumPy 数组

00:01:48.608 --> 00:01:52.640
你可以看到 这一行打出了位置 0 的国家

00:01:52.640 --> 00:01:55.930
将 0 改为 3 就可以打出位置 3 的国家了

00:01:55.930 --> 00:01:59.270
接下来几行分别打出数组的一段数据

00:01:59.270 --> 00:02:03.880
这一行打出了位置 0 至 3 的所有数据 但不包括位置 3

00:02:03.880 --> 00:02:06.180
在这一行中 我把第一个数字空出来

00:02:06.180 --> 00:02:10.020
使这片数据从数组的最顶端开始 我得到的结果是一样的

00:02:10.020 --> 00:02:12.360
在这里 我把第二个数字空出来

00:02:12.360 --> 00:02:16.290
这样 这片数据就从位置 17 直到数组结尾

00:02:16.290 --> 00:02:19.340
最后 我可以把两个数字都空出来

00:02:19.340 --> 00:02:22.770
这样就可以从头至尾得到整个数组

00:02:22.770 --> 00:02:25.670
其实并不需要这样 因为你可以直接使用原数组

00:02:25.670 --> 00:02:28.980
但这样可以使符号保持一致

00:02:28.980 --> 00:02:31.280
现在 我们看一下部分数组的元素类型

00:02:31.280 --> 00:02:33.490
在 NumPy 中 它叫做 dtype

00:02:33.490 --> 00:02:36.260
可以看到 国家数组的类型是 S22

00:02:36.260 --> 00:02:39.010
S 代表字符串

00:02:39.010 --> 00:02:42.360
22 表示数组中最长的字符串有 22 个字母

00:02:42.360 --> 00:02:46.310
就业数组的类型是 float64

00:02:46.310 --> 00:02:49.040
这意味着就业率值是浮点值

00:02:49.040 --> 00:02:50.900
也就是它们有一个小数点

00:02:50.900 --> 00:02:52.220
并且 它们是以 64 位的格式储存的

00:02:52.220 --> 00:02:56.030
接下来的四个数组含有

00:02:56.030 --> 00:03:00.750
整数、浮点值、布尔值和长度为 2 的字符串

00:03:00.750 --> 00:03:02.450
当我遍历国家数组时

00:03:02.450 --> 00:03:05.340
我看到 它每次只打出一个国家

00:03:05.340 --> 00:03:08.430
我可以用这类遍历来查看

00:03:08.430 --> 00:03:09.880
两个不同数组中的值对

00:03:09.880 --> 00:03:14.190
在这里 i 是各数组中的位置

00:03:14.190 --> 00:03:16.700
然后 我就能得到这个位置的国家名和就业值

00:03:16.700 --> 00:03:18.380
最后 把两个值都打出来

00:03:19.490 --> 00:03:22.900
如果你没有见过 Python 的字符串格式函数

00:03:22.900 --> 00:03:26.250
它的作用是查找这些 {} 符号

00:03:26.250 --> 00:03:29.760
然后将它们替换为格式函数 (format) 的参数

00:03:29.760 --> 00:03:33.040
当我运行代码时 我发现它打出了

00:03:33.040 --> 00:03:33.880
每个国家及其相应的就业值

00:03:34.920 --> 00:03:39.800
最后 这些函数可以计算

00:03:39.800 --> 00:03:41.050
就业数据的平均值、标准偏差和总数

