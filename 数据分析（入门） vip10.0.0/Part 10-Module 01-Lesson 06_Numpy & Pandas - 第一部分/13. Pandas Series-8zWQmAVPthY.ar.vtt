WEBVTT
Kind: captions
Language: ar

00:00:00.380 --> 00:00:04.680
والآن بعد أن أصبحت على دراية بصفائف NumPy
.فلننتقل إلى متسلسلات Panda

00:00:04.680 --> 00:00:07.100
،تشبه المتسلسلة صفيف NumPy
ولكنها تتميز

00:00:07.100 --> 00:00:09.710
بوظيفة إضافية
.صغيرة

00:00:09.710 --> 00:00:13.730
على سبيل المثال، إذا كانت لديك متسلسلة تُسمى s
فإن الدالة s.describe ،

00:00:13.730 --> 00:00:17.910
ستُخرج في الطباعة الانحراف المعياري المتوسط والوسيط
وبعض الإحصائيات الأخرى عن

00:00:17.910 --> 00:00:21.970
المتسلسلات لأن هذه الدالة
.غير متوفرة لصفائف NumPy

00:00:21.970 --> 00:00:25.120
كما أن هناك بعض المزايا الأخرى أيضًا للمتسلسلات
مقارنة بالصفائف سنتناولها

00:00:25.120 --> 00:00:25.760
.في وقت وجيز

00:00:26.910 --> 00:00:30.310
وعلى الرغم من ذلك، أرغب الآن في التركيز على
.أوجه التشابه بين المتسلسلات والصفائف

00:00:31.340 --> 00:00:33.930
كل ما تعلمتَه لتوك بشأن كيفية التعامل مع صفائف
NumPy

00:00:33.930 --> 00:00:36.420
.سينطبق أيضًا على متسلسلة Pandas

00:00:36.420 --> 00:00:40.030
يمكنك الوصول إلى العناصر باستخدام علامة القوس
المربع للحصول إما على عنصر

00:00:40.030 --> 00:00:42.460
.فردي أو جزء من العناصر

00:00:42.460 --> 00:00:44.950
.ولا يزال بإمكانك تكرار جميع المتسلسلات

00:00:44.950 --> 00:00:48.610
يمكنك استدعاء نفس الدوال
الملائمة التي شاهدتها للتو مثل المتوسط والحد الأقصى

00:00:48.610 --> 00:00:52.220
ولا يزال بإمكانك استخدام
.عمليات التحويل إلى رسومات المتجهات

00:00:52.220 --> 00:00:55.590
،وعلى غرار صفائف NumPy
يتم تنفيذ متسلسلات Panda في C وتكون أسرع بكثير

00:00:55.590 --> 00:00:57.700
مقارنة باستخدام
.قوائم Python

00:00:58.990 --> 00:01:00.130
،في الشاشة التالية

00:01:00.130 --> 00:01:03.000
سترى بعض تعليمات برمجية اختبارية
.يمكنك تجربتها باستخدام متسلسلة Pandas

00:01:04.180 --> 00:01:07.770
كما أرغب في كتابة دالة
،تستخدم متسلسلتين كوسائط

00:01:07.770 --> 00:01:11.190
على سبيل المثال، متوسط العمر في
.عام 2007 وإجمالي الناتج المحلي في عام 2007

00:01:11.190 --> 00:01:15.480
وستستخدم الدول بنفس الترتيب
.لكل منهما

00:01:15.480 --> 00:01:18.070
وينبغي أن تجري الدالة
مساعدة استكشافية بسيطة

00:01:18.070 --> 00:01:21.430
للتحقق مما إذا كانت هذه المتغيرات
.تبدو مترابطة

00:01:21.430 --> 00:01:24.120
وستنظر الدالة إلى السؤال
عندما يكون معدل العمر في الدولة فوق

00:01:24.120 --> 00:01:28.730
،المتوسط
فهل إجمالي الناتج المحلي فوق المتوسط أيضًا؟

00:01:28.730 --> 00:01:29.780
.أو العكس بالعكس

00:01:29.780 --> 00:01:33.090
،إذا كان معدل العمر أدنى من المتوسط
فهل إجمالي الناتج المحلي أدنى من المتوسط؟

00:01:34.480 --> 00:01:36.390
.ينبغي أن تُرجع الدالة رقمين

00:01:36.390 --> 00:01:38.920
يمثل الرقم الأول عدد الدول التي تكون كلتا القيمتين فيها
فوق المتوسط

00:01:38.920 --> 00:01:43.330
أو دونه
.

00:01:43.330 --> 00:01:46.560
يمثل الرقم الثاني عدد الدول التي تكون إحدى القيمتين بها
فوق المتوسط

00:01:46.560 --> 00:01:48.970
والأخرى دونه
.

00:01:48.970 --> 00:01:52.560
ولهذا يجب أن يضيف هذين الرقمين
.إلى إجمالي عدد الدول

00:01:52.560 --> 00:01:55.840
وكما ذكرت، سيتم فرز الإدخالات
كمتسلسلات، ولكن ينبغي أن تتمكن من

00:01:55.840 --> 00:02:00.270
كتابة نفس التعليمة البرمجية المطلوبة لحل هذا
.كما قد تفعل مع صفائف NumPy

00:02:00.270 --> 00:02:02.780
إليك نصيحة يمكنك استخدامها
.لجعل التعليمة البرمجية أقصر قليلاً

00:02:02.780 --> 00:02:05.700
،في Python
.يمكنك إضافة العوامل المنطقية فعليًا

00:02:05.700 --> 00:02:09.340
سيتم التعبير عن العامل المنطقي true بالرقم واحد
.وسيتم التعبير عن العامل المنطقي false بالرقم صفر

00:02:09.340 --> 00:02:12.440
.ولهذا فإن true + true = 2 في Python

00:02:12.440 --> 00:02:16.970
ولهذا فإن طريقة تعاملي مع هذه المشكلة هي
.إنشاء صفيف من العوامل المنطقية أولاً

00:02:16.970 --> 00:02:19.760
يكون العامل المنطقي true إذا كان كلا الرقمين فوق المتوسط أو
دونه

00:02:19.760 --> 00:02:22.520
.ويكون العامل المنطقي false عكس ذلك

00:02:22.520 --> 00:02:25.840
ثم أستخرج مجموع هذا الصفيف
للتعرف على عدد الدول

00:02:25.840 --> 00:02:26.430
.التي توافق هذا الشرط

