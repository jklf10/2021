WEBVTT
Kind: captions
Language: zh-CN

00:00:00.170 --> 00:00:02.960
Pandas 和 NumPy 都有

00:00:02.960 --> 00:00:05.180
表示一维数据的特殊数据结构

00:00:05.180 --> 00:00:08.269
顺便说一下 NumPy 是 Numerical Python 的缩写

00:00:08.269 --> 00:00:10.914
在 Pandas 中 这个数据结构叫做 Series

00:00:10.914 --> 00:00:13.050
在 NumPy 中 它叫做数组

00:00:13.050 --> 00:00:15.355
Pandas 和 NumPy 也有二维的数据结构

00:00:15.355 --> 00:00:18.730
你会在下节课中学到这个

00:00:18.730 --> 00:00:20.730
我一般喜欢用 Pandas Series

00:00:20.730 --> 00:00:23.200
因为它比 NumPy 数组的功能多

00:00:23.200 --> 00:00:26.360
但 NumPy 数组更简单 所以我先讲这个

00:00:26.360 --> 00:00:29.110
Panda Series 是建立在 NumPy 数组基础之上的

00:00:29.110 --> 00:00:33.390
所以 在使用 Series 之前 应该先掌握 NumPy 数组

00:00:33.390 --> 00:00:36.720
从很多方面来说 NumPy 数组与 Python 列表类似

00:00:36.720 --> 00:00:39.660
它包括一个序列的元素 这些元素可以是任何数据

00:00:39.660 --> 00:00:42.192
假如你的 Numpy 数组是美国的州代码

00:00:42.192 --> 00:00:47.800
那么这就是阿拉巴马、阿拉斯加、亚利桑那、阿肯色和加利福尼亚等等

00:00:47.800 --> 00:00:51.460
我在这些州上加了引号 因为它们是字符串

00:00:51.460 --> 00:00:54.290
与列表一样 NumPy 数组的元素是按顺序排列的

00:00:54.290 --> 00:00:56.910
你可以通过位置来获取元素

00:00:56.910 --> 00:00:59.660
在这个 NumPy 数组中 阿拉斯加的位置是 0

00:00:59.660 --> 00:01:01.470
阿肯色的位置是 1 等等

00:01:03.280 --> 00:01:05.530
所以 如果你的 NumPy 数组为 a[0]

00:01:05.530 --> 00:01:11.210
它将会返回字符串 AL 也就是阿拉斯加

00:01:11.210 --> 00:01:15.160
此外 你也可以利用数据切片

00:01:15.160 --> 00:01:17.040
在 NumPy 数组中获取某一范围的元素

00:01:17.040 --> 00:01:18.951
这里的语法和列表的一样

00:01:18.951 --> 00:01:26.610
那么 a[1:3] 就会返回含有阿拉斯加和亚利桑那的 NumPy 数组

00:01:26.610 --> 00:01:29.740
注意 这和列表一样 上限是不包含在内的

00:01:29.740 --> 00:01:34.820
所以我获得了位置 1 和位置 2 的元素 而没有位置 3 的元素

00:01:34.820 --> 00:01:36.450
最后 你可以在 NumPy 数组中

00:01:36.450 --> 00:01:40.330
用代码 for x in a: 使用 for 循环

00:01:40.330 --> 00:01:44.190
那么 NumPy 数组和 Python 列表的差异在哪里？

00:01:44.190 --> 00:01:47.630
首先 NumPy 数组中的各个元素都需属于同一类别

00:01:48.710 --> 00:01:52.340
所以 各元素应该都是字符串类型、

00:01:52.340 --> 00:01:55.280
或者都是 Int 型、或者都是布尔值等等

00:01:55.280 --> 00:01:57.700
你创建的 Python 列表可以同时含有一些字符串、

00:01:57.700 --> 00:02:01.820
一些 Int 型和一些布尔值等多种元素混合

00:02:01.820 --> 00:02:03.710
你也可以在 NumPy 中这样设置

00:02:03.710 --> 00:02:06.400
但它的各数组被设计为仅含一种数据类型

00:02:07.660 --> 00:02:10.508
第二  NumPy 有很多方便使用的函数

00:02:10.508 --> 00:02:14.050
比如 计算平均值和标准偏差的函数

00:02:14.050 --> 00:02:16.910
你在上节课中看到

00:02:16.910 --> 00:02:18.130
在 Python 列表中也可以使用这些函数

00:02:18.130 --> 00:02:22.080
但如果你的数据是 NumPy 数组 则函数的运行会更快

00:02:22.080 --> 00:02:25.214
这是数据类型有所影响的地方之一

00:02:25.214 --> 00:02:29.098
因为只有在所有元素都是值的情况下

00:02:29.098 --> 00:02:29.991
我们才会计算数组的平均值

00:02:29.991 --> 00:02:33.405
另一个不同点是  NumPy 数组可以是多维的

00:02:33.405 --> 00:02:35.255
你会在下节课中学到这些知识

00:02:35.255 --> 00:02:37.795
但它与在 Python 中创建一个由列表组成的列表相同

00:02:38.855 --> 00:02:41.725
在下一个屏幕中 你可以试着使用一些 NumPy 代码

00:02:41.725 --> 00:02:43.455
以了解它们的作用

00:02:43.455 --> 00:02:46.295
我建议你阅读每一段代码并猜测它们的作用

00:02:46.295 --> 00:02:51.670
然后把 false 改为 true 用测试答案按钮 (Test Run ) 检查你的猜测是否正确

00:02:51.670 --> 00:02:54.970
如果你不确定输出是什么 你可以直接用测试答案按钮查看结果

00:02:54.970 --> 00:02:58.720
如果你比较好奇 你还可以输入自己的代码或尝试其它功能

00:02:58.720 --> 00:03:00.480
为了检查你是否完全掌握了这部分知识

00:03:00.480 --> 00:03:03.800
在代码的底部 有一个函数需要你来编写

00:03:03.800 --> 00:03:05.720
它将这些参数设为 NumPy 数组

00:03:05.720 --> 00:03:07.540
第一个包含国家名称

00:03:07.540 --> 00:03:10.490
第二个包含各国的就业数据

00:03:10.490 --> 00:03:13.770
国家名和就业数据的顺序相同

00:03:13.770 --> 00:03:17.180
这个函数应该根据已知数据

00:03:17.180 --> 00:03:21.050
返回具有最高就业率的国家名称及相应的最高就业值

00:03:21.050 --> 00:03:24.900
在点击测试答案后 除了你编写的代码的输出结果

00:03:24.900 --> 00:03:27.630
你还可以看到 你的函数在各年份的

00:03:27.630 --> 00:03:30.000
完整就业数据集上的运行结果

00:03:30.000 --> 00:03:33.320
如果你点击提交 评分程序会检查你的函数是否正确

00:03:33.320 --> 00:03:36.000
如果你想先在较小的数据集上测试你的函数

00:03:36.000 --> 00:03:39.640
我建议你在这部分代码顶端的

00:03:39.640 --> 00:03:40.680
这个数组上进行测试

00:03:40.680 --> 00:03:43.725
它包括数据集里的前 20 个国家

00:03:43.725 --> 00:03:47.591
这个包括这些国家在 2007 年的就业数据

00:03:47.591 --> 00:03:50.222
由于这些数组的名称是 countries 和 employment

00:03:50.222 --> 00:03:53.288
所以你可以利用 print max_employment(countries, employment) 语句

00:03:53.288 --> 00:03:55.617
在这些数组上测试你的函数

