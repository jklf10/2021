WEBVTT
Kind: captions
Language: ar

00:00:00.390 --> 00:00:02.796
لقد رأيتَ للتو انك إذا أضفت
متسلسلتين سويًا

00:00:02.796 --> 00:00:05.960
،ولم تتطابق المؤشرات
.فستتم تعبئة NaN

00:00:05.960 --> 00:00:08.620
،والآن، في كثير من الحالات
قد لا أرغب عرض في NaN أو

00:00:08.620 --> 00:00:11.360
رقم في المتسلسلات
.الناتجة

00:00:11.360 --> 00:00:14.950
ولهذا إذا لم أرغب في إدراج NaN
فكيف أتعامل مع ذلك؟

00:00:14.950 --> 00:00:19.000
للإجابة على أسئلة مثل هذه
هناك طريقة تفعل بها ما تريد بـ Pandas، ولكن

00:00:19.000 --> 00:00:21.740
قد يكون من الصعب قليلاً أن تكتشف 
.هذه الطريقة

00:00:21.740 --> 00:00:26.490
أحد الأشياء التي سأحاول فعلها هو إجراء بحث باستخدام
.Googleلقيم الإزالة المفقودة من pandas

00:00:26.490 --> 00:00:29.690
وتبدو النتيجة الثانية، dropna
.مبشرة

00:00:29.690 --> 00:00:33.050
وأول ما لاحظته بشأن هذه الوثائق
هو إنها تعمل

00:00:33.050 --> 00:00:35.020
.بإطارات البيانات وليس المتسلسلات

00:00:35.020 --> 00:00:37.430
ستتعرف على المزيد عن إطارات البيانات في الدرس
.التالي

00:00:37.430 --> 00:00:40.480
والآن، لا تكون وثائق متسلسلات panda مثالية
.دائمًا

00:00:40.480 --> 00:00:44.640
وعندما رأيت هذه النتيجة، تساءلت ما إذا كانت dropna
.ستعمل كمتسلسلة أيضًا

00:00:44.640 --> 00:00:47.260
ولقد قررتُ أن أجرب ذلك
.وانتهى الأمر إلى أنني جربت ذلك بالفعل

00:00:47.260 --> 00:00:50.400
كما تشير هذه الوثائق أيضًا
.إلى محور

00:00:50.400 --> 00:00:53.710
وأكرر، هذا شيء سوف تعرف بشأنه في الدرس
.التالي

00:00:53.710 --> 00:00:57.500
أما الآن، تبدو حقيقة أن هذه الدالة تنتج
عناوين تُفقد بها

00:00:57.500 --> 00:01:00.400
بعض البيانات أو كلها
.حقيقة مبشرة

00:01:00.400 --> 00:01:03.998
ولهذا سأحاول حفظ نتيجة
هذه الإضافة لنتيجة جمع المتغيرات ثم

00:01:03.998 --> 00:01:07.830
.سأقوم بتشغيل sum_result.dropna

00:01:07.830 --> 00:01:11.680
وبالتأكيد، سأحصل على متسلسلات جديدة
.تتم فيها إزالة جميع القيم المفقودة

00:01:11.680 --> 00:01:15.600
وهناك عدة طرق مختلفة بالفعل
.يمكنك من خلالها حل المشكلة في متسلسلات panda

00:01:15.600 --> 00:01:16.160
،على سبيل المثال

00:01:16.160 --> 00:01:19.940
هناك طريقة لمعالجة القيم
.المفقودة كقيمة صفر قبل الإضافة

00:01:19.940 --> 00:01:23.160
ولهذا ستكون نتيجة إضافة هاتين
المتسلسلتين هي الحصول على القيمة 1

00:01:23.160 --> 00:01:26.320
للمؤشر، نظرًا لوجود قيمة
.صفر مفترضة في المتسلسلة 2

00:01:26.320 --> 00:01:29.370
انظر هل يمكنك اكتشاف
.كيفية القيام بهذا

00:01:29.370 --> 00:01:33.480
إذا وجدت حلاً ثالثًا لمشكلة
.NaN، فسيكون الأمر رائعًا

00:01:33.480 --> 00:01:37.280
والآن قد يكون من الصعب جدًا التعرف على شيء مثل هذا
باستخدام بحث Google، ولكنه

00:01:37.280 --> 00:01:38.930
.مهم أيضًا

00:01:38.930 --> 00:01:40.810
تتميز متسلسلات Pandas بالعديد من الوظائف، والتي يتعذر توضيحها كلها في هذه

00:01:40.810 --> 00:01:43.090
الدورة التدريبية
.

00:01:43.090 --> 00:01:44.430
وإذا لم تجد ما تبحث عنه
مباشرة، فحاول استخدام

00:01:44.430 --> 00:01:46.930
.عدة استعلامات مختلفة

00:01:46.930 --> 00:01:49.060
،وإذا واجهتك مشاكل
.فيمكنك مشاهدة الفيديو الذي يتضمن الحلول دائمًا

00:01:49.060 --> 00:01:51.820
ويمكنك استخدام اختبار
البرمجة بالشاشة التالية

00:01:51.820 --> 00:01:53.700
لاختبار فعالية
.الحل

