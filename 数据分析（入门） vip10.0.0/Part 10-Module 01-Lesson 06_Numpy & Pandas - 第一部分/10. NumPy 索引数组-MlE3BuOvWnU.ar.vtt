WEBVTT
Kind: captions
Language: ar

00:00:00.270 --> 00:00:03.700
هناك عملية أخرى يمكنك
القيام بها عندما يتوفر لديك صفيفا NumPy لهما نفس

00:00:03.700 --> 00:00:05.120
.الطول

00:00:05.120 --> 00:00:08.710
وهذه المرة، يحتاج صفيف NumPy الثاني
إلى أن يحتوي على عوامل منطقية

00:00:08.710 --> 00:00:11.190
وقد يحتوي الصفيف الأول على أي نوع
.وليس الأرقام فقط

00:00:12.270 --> 00:00:16.630
على سبيل المثال، افترض أن الصفيف الأول
a، يحتوي على الأرقام 1 و2 و3 و4

00:00:16.630 --> 00:00:19.280
.و5

00:00:19.280 --> 00:00:23.500
ويحتوي الصفيف الثاني b على
،"العوامل المنطقية "خطأ"، و"خطأ"، و"صحيح"، و"صحيح

00:00:23.500 --> 00:00:25.050
."و"صحيح

00:00:25.050 --> 00:00:29.550
[ثم قد تُرجع التعليمة البرمجية a[b
صفيفًا أقصر يحتوي على العناصر

00:00:29.550 --> 00:00:33.610
3 و4
.و5

00:00:33.610 --> 00:00:36.630
ويُسمى الصفيف الثاني
صفيف المؤشر وهو

00:00:36.630 --> 00:00:39.550
يوجهك للعناصر التي ينبغي حفظها
.في الصفيف الأول

00:00:39.550 --> 00:00:43.400
ولهذا لم نحتفظ هنا بالعنصر 1
.لأنه كان خاطئًا

00:00:43.400 --> 00:00:45.530
.ولم نحتفظ هنا بالعنصر 2 لأنه كان خاطئًا

00:00:45.530 --> 00:00:49.480
ولكننا احتفظنا بالعناصر 3 و4 و5 لأنها
.كانت عناصر صحيحة

00:00:49.480 --> 00:00:52.440
عندما تدمج هذا مع
عمليات التحويل إلى رسومات المتجهات التي تعرفت عليها

00:00:52.440 --> 00:00:54.410
.سابقًا، فقد يكون لهذا تأثير قوي جدًا

00:00:55.450 --> 00:00:58.425
،في هذا المثال
.احتفظت بجميع العناصر الأكبر من 2

00:00:58.425 --> 00:01:06.395
ولهذا كنت سأنشئ صفيف العامل المنطقي
.bمع التعليمة البرمجية b = a &gt; 2

00:01:06.395 --> 00:01:09.770
ولهذا كنت سأنشئ هذا الصفيف بدون
.استخدام المتغير b على الإطلاق

00:01:10.940 --> 00:01:18.950
،[وللقيام بهذا، قد أستخدم التعليمة البرمجية a [a&gt;2
.وقد يؤدي هذا إلى نفس النتيجة

00:01:18.950 --> 00:01:21.600
وأعتقد أن هذا
الجزء من التعليمة البرمجية دقيق

00:01:21.600 --> 00:01:25.830
للغاية ويقدم توجيها واضحًا للاحتفاظ
.بجميع عناصر a الأكبر من اثنين

00:01:25.830 --> 00:01:29.170
وحاليًا قد يحتاج الأمر لبذل المزيد من الجهد
لاستيعاب هذا الجزء من التعليمة

00:01:29.170 --> 00:01:31.590
البرمجية مقارنة بالجهد المطلوب
.لاستيعاب التكرار الحلقي

00:01:31.590 --> 00:01:33.840
أولاً، عليك أن تتذكر
.أن a عبارة عن صفيف

00:01:33.840 --> 00:01:37.040
ثم عليك أن تتذكر أن مقارنة صفيف
برقم فردي

00:01:37.040 --> 00:01:40.280
هي عملية تحويل إلى رسومات متجهات
تُرجع صفيفًا من العوامل المنطقية

00:01:40.280 --> 00:01:42.740
ثم عليك مراعاة
.صفائف المؤشرات

00:01:42.740 --> 00:01:45.610
ومع ذلك، بمجرد أن تتعود على هذا
فقد يزيد ذلك من سرعة عملية

00:01:45.610 --> 00:01:46.850
.كتابة التعليمات البرمجية

00:01:46.850 --> 00:01:50.664
وكالمعتاد، ستعمل هذه التعليمة البرمجية بطريقة أسرع
مقارنة بالتكرار الحلقي لأن جميع

00:01:50.664 --> 00:01:51.787
.العمليات يتم تطبيقها في C

00:01:51.787 --> 00:01:55.137
ولإتاحة ممارسة بعض التمارين باستخدام صفائف المؤشرات
سأستخدم نموذجًا من

00:01:55.137 --> 00:01:56.645
.الدرس السابق

00:01:56.645 --> 00:01:59.785
أرغبُ في كتابة دالة
.تستخدم صفيفي NumPy

00:01:59.785 --> 00:02:02.575
تحتوي الدالة الأولى، time_spent، على
إجمالي الوقت الذي يقضيه كل طالب

00:02:02.575 --> 00:02:04.763
في حجرة الدراسة
.في الأسبوع الأول

00:02:04.763 --> 00:02:07.795
وتحتوي الدالة الثانية days_to_cancel

00:02:07.795 --> 00:02:11.065
على عدد الأيام التي مرت قبل
.أن يقوم الطالب بالإلغاء

00:02:11.065 --> 00:02:14.105
أرغبُ في حساب متوسط
الوقت المستغرق في الأسبوع الأول

00:02:14.105 --> 00:02:18.190
فقط بين الطلاب الذين لم يقوموا بالإلغاء
.في آخر 7 أيام

00:02:18.190 --> 00:02:21.990
وكنصيحة، سترغب في تحويل
الدالة days_to_cancel إلى صفيف من العوامل

00:02:21.990 --> 00:02:24.050
الافتراضية التي يمكنك
.استخدامها كصفيف مؤشر

