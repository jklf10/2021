WEBVTT
Kind: captions
Language: pt-BR

00:00:00.380 --> 00:00:04.680
Agora que você está familiarizado com os arrays NumPy,
passaremos para a série Pandas.

00:00:04.680 --> 00:00:07.100
Uma série é semelhante a um array NumPy,
mas

00:00:07.100 --> 00:00:09.710
com algumas
outras funcionalidades.

00:00:09.710 --> 00:00:13.730
Por exemplo, se você tiver uma série denominada
s, a função s.describe

00:00:13.730 --> 00:00:17.910
imprimirá o desvio padrão médio,
a mediana e outras estatísticas sobre

00:00:17.910 --> 00:00:21.970
sua série, pois essa função
não está disponível para arrays NumPy.

00:00:21.970 --> 00:00:25.120
As séries também têm outros benefícios
quando comparadas a arrays, que

00:00:25.120 --> 00:00:25.760
veremos em breve.

00:00:26.910 --> 00:00:30.310
Por ora, quero focar nas semelhanças
entre séries e arrays.

00:00:31.340 --> 00:00:33.930
Tudo o que você aprendeu
a fazer em arrays Numpy

00:00:33.930 --> 00:00:36.420
também funcionará na série Pandas.

00:00:36.420 --> 00:00:40.030
Você pode acessar elementos usando a notação
de colchete para obter um único

00:00:40.030 --> 00:00:42.460
elemento ou um trecho dele.

00:00:42.460 --> 00:00:44.950
Você ainda pode executar loop da série.

00:00:44.950 --> 00:00:48.610
Você pode chamar as mesmas funções
convenientes, como mean e

00:00:48.610 --> 00:00:52.220
max, e usar
operações de vetores.

00:00:52.220 --> 00:00:55.590
Assim como o NumPy,
as séries Pandas são implementadas em C e,

00:00:55.590 --> 00:00:57.700
por isso, são mais rápidas
que as listas Python.

00:00:58.990 --> 00:01:00.130
Na tela a seguir,

00:01:00.130 --> 00:01:03.000
você verá um código de teste que pode
testar usando as séries Pandas.

00:01:04.180 --> 00:01:07.770
Também quero escrever uma função
que aceite duas séries como argumento,

00:01:07.770 --> 00:01:11.190
por exemplo, expectativa de vida e
PIB em 2007.

00:01:11.190 --> 00:01:15.480
Os países estarão na
mesma ordem para cada uma delas.

00:01:15.480 --> 00:01:18.070
A função deve executar a
heurística simples a seguir para

00:01:18.070 --> 00:01:21.430
verificar se essas
variáveis parecem ser relacionadas.

00:01:21.430 --> 00:01:24.120
A função analisará a pergunta:
"Quando um país tem uma expectativa

00:01:24.120 --> 00:01:28.730
de vida acima da média,
o PIB também está acima da média?"

00:01:28.730 --> 00:01:29.780
Ou vice-versa.

00:01:29.780 --> 00:01:33.090
Se a expectativa de vida estiver
abaixo da média, o PIB está abaixo da média?

00:01:34.480 --> 00:01:36.390
Sua função deverá retornar dois números.

00:01:36.390 --> 00:01:38.920
O primeiro número é
o de países nos quais os dois

00:01:38.920 --> 00:01:43.330
valores estão acima ou abaixo
da média.

00:01:43.330 --> 00:01:46.560
O segundo número deve ser o
de países nos quais um valor está acima e

00:01:46.560 --> 00:01:48.970
o outro, abaixo
da média.

00:01:48.970 --> 00:01:52.560
A soma desses números deve totalizar
o número de países.

00:01:52.560 --> 00:01:55.840
Como disse anteriormente, as entradas
serão deslocadas como série, mas você

00:01:55.840 --> 00:02:00.270
deve saber escrever o mesmo código
para resolver como faria com arrays NumPy.

00:02:00.270 --> 00:02:02.780
Aqui está uma dica que você
pode usar para diminuir seu código.

00:02:02.780 --> 00:02:05.700
Em Python,
você pode adicionar boolianos em cima.

00:02:05.700 --> 00:02:09.340
True será tratado como 1 e
false, como 0.

00:02:09.340 --> 00:02:12.440
Então, em Python, true + true = 2.

00:02:12.440 --> 00:02:16.970
Para abordar esse problema,
primeiro, eu criaria um array de boolianos.

00:02:16.970 --> 00:02:19.760
O booliano é true se os dois
números estiverem abaixo ou

00:02:19.760 --> 00:02:22.520
acima da média, e false nos outros casos.

00:02:22.520 --> 00:02:25.840
Depois, eu pegaria a soma desse array
para descobrir quantos países correspondem

00:02:25.840 --> 00:02:26.430
a essa condição.

