WEBVTT
Kind: captions
Language: zh-CN

00:00:00.180 --> 00:00:04.750
那么 相对于 NumPy 数组 使用 Panda Series 的好处是什么呢？

00:00:04.750 --> 00:00:07.590
我之前提到过 Panda Series 

00:00:07.590 --> 00:00:09.270
有一些 NumPy 数组没有的功能

00:00:09.270 --> 00:00:11.230
比如 describe 函数

00:00:12.340 --> 00:00:15.410
但 Panda Series 和 NumPy 数组

00:00:15.410 --> 00:00:19.920
的主要区别是 Panda Series 有索引

00:00:19.920 --> 00:00:21.800
让我们来看一个例子

00:00:21.800 --> 00:00:23.970
在这节课中 我们观察了不同国家的数据

00:00:23.970 --> 00:00:26.880
我创建了一个含有实际数据点的数组

00:00:26.880 --> 00:00:30.210
以及另一个含有国家名的数组

00:00:30.210 --> 00:00:33.210
在 Pandas 中 我只需要一个 Series

00:00:33.210 --> 00:00:36.430
然后 我可以用数据点作为 Series 的值

00:00:36.430 --> 00:00:39.960
用国家名作为 Series 的索引

00:00:39.960 --> 00:00:43.510
现在 我删除 NumPy 数组的代码并打出 Series

00:00:43.510 --> 00:00:46.850
可以看到 Pandas 将每个索引值

00:00:46.850 --> 00:00:48.980
与相应的数据点进行了匹配

00:00:48.980 --> 00:00:52.910
我之前说过 NumPy 数组就是增强版的 Python 列表

00:00:54.100 --> 00:00:59.640
同样地 Pandas Series 就像列表和字典的合集

00:00:59.640 --> 00:01:04.250
在列表中 元素是按顺序排列的 需要通过位置获取

00:01:04.250 --> 00:01:07.350
你刚才看到 在 Series 中也是这样

00:01:07.350 --> 00:01:10.940
这些值都是按顺序排列的 你也可以通过位置来获取

00:01:12.060 --> 00:01:13.520
但在字典中

00:01:13.520 --> 00:01:15.930
你需要使用关键字 比如国家名和预期寿命这样的值

00:01:15.930 --> 00:01:19.990
你可以通过关键字来查找值

00:01:19.990 --> 00:01:23.620
你之前看到 预期寿命的代码为 0 时

00:01:23.620 --> 00:01:28.070
我们会得到 Series 中位置为 0 的预期寿命

00:01:28.070 --> 00:01:31.300
Pandas 也有一个名为 loc 的属性

00:01:31.300 --> 00:01:33.240
使你可以通过索引来查看值

00:01:33.240 --> 00:01:38.550
如果我运行安哥拉的 life_expectancy.loc 我就会看到安哥拉的预期寿命

00:01:38.550 --> 00:01:43.015
而不需要知道安哥拉在列表中的位置

00:01:43.015 --> 00:01:46.165
如果 像此前一样 在不指定索引的情况下

00:01:46.165 --> 00:01:46.935
创建 Series 会怎样？

00:01:48.065 --> 00:01:51.995
那么 数字 0、1、2、3

00:01:51.995 --> 00:01:53.375
就会被默认作为索引值

00:01:53.375 --> 00:01:57.005
之前当我用中括号获取元素时

00:01:57.005 --> 00:02:00.870
我是用索引还是位置来获取元素并不明确

00:02:00.870 --> 00:02:04.060
现在 你应该知道

00:02:04.060 --> 00:02:05.250
中括号是根据位置获取元素的

00:02:05.250 --> 00:02:09.500
因为 在预期寿命 Series 中没有索引值为0的值

00:02:09.500 --> 00:02:12.975
在使用 Series 时 我一般会表达的更为明确

00:02:12.975 --> 00:02:15.850
Pandas 有一个与 loc 属性类似的属性

00:02:15.850 --> 00:02:19.480
叫做 iloc 它也是通过位置来获取元素

00:02:19.480 --> 00:02:21.820
这两行代码的作用相同

00:02:21.820 --> 00:02:24.960
但我认为使用 iloc 的代码更为清晰

00:02:26.300 --> 00:02:27.996
在这里 我顺便讲一个术语

00:02:27.996 --> 00:02:30.060
在这个 NumPy 数组中

00:02:30.060 --> 00:02:34.220
很多人会说 阿尔巴尼亚这个国家位于索引 0

00:02:34.220 --> 00:02:39.210
他们会利用中括号调用并获取

00:02:39.210 --> 00:02:41.140
索引至数组中的数组元素

00:02:41.140 --> 00:02:43.880
我一直在避免使用这个术语

00:02:43.880 --> 00:02:48.530
把它称作位置 0 而不是索引 0

00:02:48.530 --> 00:02:51.200
因为 在 Panda Series 中 索引和位置有所不同

00:02:51.200 --> 00:02:54.410
但注意 你可能会在其它地方听到

00:02:54.410 --> 00:02:55.520
索引这个数据的错误使用

00:02:55.520 --> 00:02:58.140
在下一个屏幕中 我需要你重新编写 

00:02:58.140 --> 00:03:00.710
你在这节课开始时写的 max_employment 函数

00:03:00.710 --> 00:03:03.710
它能在已知数据中找出最高就业率

00:03:03.710 --> 00:03:05.970
以及该就业率对应的国家名

00:03:05.970 --> 00:03:10.250
这次 输入是一个 Series 而不是两个数组

00:03:10.250 --> 00:03:13.400
这个 Series 的索引值就是国家名

00:03:13.400 --> 00:03:16.230
你可以尝试使用 Pandas 的 argmax 函数

00:03:16.230 --> 00:03:18.820
讲师注释中有相关文件的链接

