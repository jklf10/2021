WEBVTT
Kind: captions
Language: pt-BR

00:00:00.230 --> 00:00:03.110
Mostrarei como escrever
a função max_employment primeiro e,

00:00:03.110 --> 00:00:06.780
depois, analisarei a saída que você deve
ter visto no código de teste fornecido.

00:00:06.780 --> 00:00:09.890
Mostrarei executando todo o
código em um bloco de anotações iPython.

00:00:09.890 --> 00:00:13.290
Para escrever o código, comecei com
o valor máximo de taxa de emprego igual a 0 e

00:00:13.290 --> 00:00:14.770
o país correspondente como nenhum.

00:00:15.910 --> 00:00:19.300
Em seguida, passei por cada
elemento dos dois arrays NumPy.

00:00:19.300 --> 00:00:22.680
Como os dois arrays devem ter o
mesmo comprimento, posso usar a linha de

00:00:22.680 --> 00:00:25.880
países ou a linha de empregos aqui;
isso não faria diferença.

00:00:25.880 --> 00:00:29.010
Depois, verifiquei se os dados de taxa de
emprego desse país eram maiores do que

00:00:29.010 --> 00:00:31.660
o valor máximo de taxa de emprego que
vi até agora.

00:00:31.660 --> 00:00:35.055
Se sim,
atualizo os valores máximos de país e

00:00:35.055 --> 00:00:37.305
de taxa de emprego.

00:00:37.305 --> 00:00:39.375
Por fim, retorno os dois valores.

00:00:39.375 --> 00:00:42.345
Agora, esta parte do código não parece
diferente do que eu teria escrito

00:00:42.345 --> 00:00:45.130
se estivesse usando listas,
em vez de arrays NumPy.

00:00:45.130 --> 00:00:46.960
Essa é uma ótima técnica
to para fazer fallback.

00:00:46.960 --> 00:00:50.040
Se não conseguir encontrar uma
função NumPy específica para fazer o que deseja,

00:00:50.040 --> 00:00:52.330
você sempre poderá escrever um código
tratando-os como listas.

00:00:53.430 --> 00:00:57.800
Entretanto, neste caso, também há
uma maneira mais fácil de resolver isso usando NumPy.

00:00:57.800 --> 00:01:01.470
Não esperava que você soubesse isso, mas
vou lhe mostrar como funciona.

00:01:01.470 --> 00:01:05.050
Você deve ter percebido que pode usar
a função max do NumPy para localizar o valor máximo de

00:01:05.050 --> 00:01:06.220
taxa de emprego.

00:01:06.220 --> 00:01:08.940
Mas isso não forneceria
o nome do país correspondente.

00:01:08.940 --> 00:01:13.900
NumPy também é uma função chamada argmax
e, em vez do valor máximo,

00:01:13.900 --> 00:01:17.240
ela retorna a posição em que
ocorre o valor máximo.

00:01:17.240 --> 00:01:20.620
Chamarei essa posição de i;
assim, posso obter os valores de

00:01:20.620 --> 00:01:23.400
país e taxa de emprego
usando essa posição.

00:01:23.400 --> 00:01:24.950
Agora, analisarei o código de teste.

00:01:24.950 --> 00:01:27.590
A primeira linha importa
a biblioteca NumPy.

00:01:27.590 --> 00:01:30.770
A linha seguinte cria um array
NumPy dos primeiros 20 países para os

00:01:30.770 --> 00:01:32.290
quais temos dados de taxa de emprego.

00:01:32.290 --> 00:01:36.180
Uma das maneiras mais fáceis de criar
um array NumPy é como fizemos aqui.

00:01:36.180 --> 00:01:39.870
Primeiro, você cria uma lista Python e,
depois, chama np.array

00:01:39.870 --> 00:01:43.300
com essa lista como um argumento, que
a converte em um array NumPy.

00:01:43.300 --> 00:01:47.659
A linha seguinte usa a mesma técnica
para criar um array NumPy das taxas de

00:01:47.659 --> 00:01:48.608
emprego em 2007.

00:01:48.608 --> 00:01:52.640
Em seguida, você deve ter visto que esta linha
imprimiu o país na posição 0,

00:01:52.640 --> 00:01:55.930
mudando de 0 para 3, a impressão
do país muda para a posição 3.

00:01:55.930 --> 00:01:59.270
As próximas linhas
imprimem uma parte do array.

00:01:59.270 --> 00:02:03.880
Esta primeira, imprime tudo da posição
0 até a posição 3, mas sem incluí-la.

00:02:03.880 --> 00:02:06.180
Nesta linha,
deixei o primeiro número de fora e, assim,

00:02:06.180 --> 00:02:10.020
a porção começará no início do
array, fornecendo os mesmos resultados.

00:02:10.020 --> 00:02:12.360
Aqui, deixei o segundo número de fora e, assim,

00:02:12.360 --> 00:02:16.290
a porção abrange da
posição 17 até o final do array.

00:02:16.290 --> 00:02:19.340
Por fim, também posso deixar
ambos os números em branco,

00:02:19.340 --> 00:02:22.770
recebendo, neste caso, todo o array,
desde o início até o fim.

00:02:22.770 --> 00:02:25.670
Não há um bom motivo para fazer
isso, pois você poderia apenas usar

00:02:25.670 --> 00:02:28.980
o array original, mas
isso torna a notação consistente.

00:02:28.980 --> 00:02:31.280
Agora, analisarei o tipo de
elemento de alguns arrays.

00:02:31.280 --> 00:02:33.490
O NumPy os chama de dtype.

00:02:33.490 --> 00:02:36.260
Podemos ver que o array
de país tem o tipo S22.

00:02:36.260 --> 00:02:39.010
S significa string e

00:02:39.010 --> 00:02:42.360
22 significa que o comprimento da string
mais longa no array é de 22 caracteres.

00:02:42.360 --> 00:02:46.310
O array de taxa de empregos tem o tipo float64.

00:02:46.310 --> 00:02:49.040
Isso significa que os valores de taxa de emprego
são valores de ponto flutuante.

00:02:49.040 --> 00:02:50.900
Ou seja, eles têm um ponto decimal.

00:02:50.900 --> 00:02:52.220
E estão sendo armazenados usando 64 bits.

00:02:52.220 --> 00:02:56.030
Os próximos quatro arrays contêm inteiros,

00:02:56.030 --> 00:03:00.750
valores de ponto flutuante, boolianos e
strings de comprimento igual a dois.

00:03:00.750 --> 00:03:02.450
Quando executo loop no array de países,

00:03:02.450 --> 00:03:05.340
podemos ver que os países são
impressos um de cada vez.

00:03:05.340 --> 00:03:08.430
Eu posso usar esse tipo de loop para
analisar pares de valores de dois

00:03:08.430 --> 00:03:09.880
arrays diferentes.

00:03:09.880 --> 00:03:14.190
Aqui, i é a posição em cada array;
assim, posso obter o país nessa posição e

00:03:14.190 --> 00:03:16.700
o valor da taxa de emprego
nessa posição.

00:03:16.700 --> 00:03:18.380
Por fim, apenas imprimo os dois valores.

00:03:19.490 --> 00:03:22.900
Se não tiver visto a função
string format do Python antes,

00:03:22.900 --> 00:03:26.250
ela encontra todas as ocorrências
desses

00:03:26.250 --> 00:03:29.760
em seguida, as substitui pelos argumentos
da função format.

00:03:29.760 --> 00:03:33.040
Quando executo isso, podemos ver cada país
impresso com seu valor de

00:03:33.040 --> 00:03:33.880
taxa de emprego correspondente.

00:03:34.920 --> 00:03:39.800
Finalmente, essas funções fornecem
a média, o desvio padrão, o máximo e

00:03:39.800 --> 00:03:41.050
a soma dos dados de taxa de emprego.

