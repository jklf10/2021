WEBVTT
Kind: captions
Language: zh-CN

00:00:00.190 --> 00:00:03.520
你可能会想 如果可以将两个向量相加

00:00:03.520 --> 00:00:05.700
那么 可以将两个向量相减、相乘或相除吗？

00:00:05.700 --> 00:00:07.190
在 NumPy 中是可以的

00:00:07.190 --> 00:00:09.060
你可以将任何运算向量化

00:00:10.160 --> 00:00:14.120
你可以将两个 NumPy 数组用 + 相加 用 - 相减

00:00:14.120 --> 00:00:17.320
用 * 相乘 用 / 号相除

00:00:17.320 --> 00:00:19.690
用 ** 进行指数运算

00:00:19.690 --> 00:00:22.200
这些运算都可以用于两个 NumPy 数组

00:00:22.200 --> 00:00:24.220
或一个 NumPy 数组和一个数字之间

00:00:25.220 --> 00:00:27.340
你还可以进行逻辑运算

00:00:27.340 --> 00:00:30.310
如果有两个布尔数组

00:00:30.310 --> 00:00:32.110
你可以用 &amp; 进行 AND 逻辑运算

00:00:32.110 --> 00:00:35.820
你可以用 | 进行 OR 逻辑运算

00:00:35.820 --> 00:00:39.650
在大多数键盘上 它位于删除键或退格键的下方

00:00:39.650 --> 00:00:43.160
最后 你可以用 ~ 进行 NOT 逻辑运算

00:00:43.160 --> 00:00:46.270
它位于大多数键盘的左上方

00:00:46.270 --> 00:00:48.960
如果要进行这些运算

00:00:48.960 --> 00:00:50.380
你需要确保你的数组含有布尔值

00:00:50.380 --> 00:00:54.100
如果你的数组是整数 这些符号的运算就会变成

00:00:54.100 --> 00:00:59.540
按位与、按位或和按位取反运算

00:00:59.540 --> 00:01:02.890
如果感兴趣 你可以在讲师备注中了解这些运算

00:01:02.890 --> 00:01:05.349
但在这节课中 它们并不重要

00:01:05.349 --> 00:01:08.640
你还可以使用标准比较运算

00:01:08.640 --> 00:01:12.770
这些向量运算可以简化许多数据分析代码

00:01:12.770 --> 00:01:15.930
它们的运算速度也通常比

00:01:15.930 --> 00:01:17.300
手动操作的遍历更快

00:01:17.300 --> 00:01:20.470
下载区中附有相关备忘录

00:01:20.470 --> 00:01:22.670
可以帮你记住这些运算

00:01:22.670 --> 00:01:26.360
以及 Pandas 代码中 NumPy 的其它常见内容

00:01:26.360 --> 00:01:29.450
在下一幕中 你可以尝试进行一些向量运算

00:01:29.450 --> 00:01:30.660
并了解它们的作用

00:01:30.660 --> 00:01:33.810
你还要用向量运算写一个函数

00:01:33.810 --> 00:01:36.520
以计算各国的整体教育普及率

00:01:36.520 --> 00:01:40.290
这里要同时用到女性和男性的教育普及率

00:01:40.290 --> 00:01:44.230
为此 假设该国家的民众

00:01:44.230 --> 00:01:45.010
正好一半是男性 一半是女性

