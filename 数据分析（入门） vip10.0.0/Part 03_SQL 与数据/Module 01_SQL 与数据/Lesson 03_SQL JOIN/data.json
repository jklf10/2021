{
  "data": {
    "lesson": {
      "id": 403740,
      "key": "8f23fc69-7c88-4a94-97a4-d5f6ef51cf7b",
      "title": "SQL JOIN",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "zh-cn",
      "summary": "在这节课，你将学习如何将多个表格中的数据组合到一起。",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/8f23fc69-7c88-4a94-97a4-d5f6ef51cf7b/403740/1544465712206/SQL+JOIN+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/8f23fc69-7c88-4a94-97a4-d5f6ef51cf7b/403740/1544465707732/SQL+JOIN+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 403702,
          "key": "192237ba-14c1-460c-ac69-ab455741cdc2",
          "title": "视频：JOIN 简介",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "192237ba-14c1-460c-ac69-ab455741cdc2",
            "completed_at": "2019-02-05T14:27:21.151Z",
            "last_viewed_at": "2019-10-09T19:16:31.152Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403591,
              "key": "55fbcda3-1c30-4805-a084-1083901a70f4",
              "title": "JOIN 简介",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "YvZ010GU-Ck",
                "china_cdn_id": "YvZ010GU-Ck.mp4"
              }
            }
          ]
        },
        {
          "id": 403703,
          "key": "824ea43f-a26d-49d9-ad94-bc10ed3d758b",
          "title": "视频：为何要将数据拆分为不同的表格？",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "824ea43f-a26d-49d9-ad94-bc10ed3d758b",
            "completed_at": "2019-02-05T14:29:46.985Z",
            "last_viewed_at": "2019-10-09T19:47:56.996Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403592,
              "key": "30b2df4b-c115-47d6-bb9d-7d2fb2129b02",
              "title": "为何不将所有内容存储到一个表格中？",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rvY4A6FpS40",
                "china_cdn_id": "rvY4A6FpS40.mp4"
              }
            },
            {
              "id": 403593,
              "key": "1d8fbd32-263f-4ba9-87d9-807697ef168d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "从上述视频中，我们知道与一个客户相关的所有信息没有位于 **orders** 表格中，但是为何不呢？请观看下面的视频了解原因！",
              "instructor_notes": ""
            },
            {
              "id": 403594,
              "key": "74cbb003-e3c6-4b0e-8c1c-14ffcb79b3b9",
              "title": "为何使用不同的表格？",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "UIQBtpmqYOs",
                "china_cdn_id": "UIQBtpmqYOs.mp4"
              }
            },
            {
              "id": 403595,
              "key": "ed3624ee-b637-4b8d-b19e-cb7aa0756e37",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 数据库规范化\n\n在创建数据库时，一定要思考下将如何存储数据。这称为**规范化**，是大多数 SQL 课程的一个重要组成部分。如果你负责设置新的数据库，则需要详细了解数据库**规范化**。\n\n数据库规范化需要考虑以下三个要点：\n\n1. 表格存储了逻辑分组的数据吗？\n2. 我能在一个位置进行更改，而不是在多个表格中对同一信息作出更改吗？\n3. 我能快速高效地访问和操纵数据吗？\n\n[这篇文章](http://agiledata.org/essays/dataNormalization.html)详细讲解了上述内容。\n\n但是，大多数分析师处理的数据库已经设置了必要的属性。作为数据分析师，你不需要太思考数据**规范化**。你只需能够从数据库中获取数据，从而能够绘制图表。这将是这节课的侧重点。",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 403704,
          "key": "6edb9f4a-cacf-40d0-924c-cb5d826fd9a6",
          "title": "视频：你的第一个 JOIN",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6edb9f4a-cacf-40d0-924c-cb5d826fd9a6",
            "completed_at": "2019-02-05T14:35:07.775Z",
            "last_viewed_at": "2019-10-09T19:54:01.912Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403596,
              "key": "dfa89213-fa57-4b51-ab3e-020e2d96c84c",
              "title": "你的第一个 JOIN",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "HkX9fkNRbU8",
                "china_cdn_id": "HkX9fkNRbU8.mp4"
              }
            },
            {
              "id": 403597,
              "key": "fc9db01b-ea89-4558-bd8c-ad4d2cc902a8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n整个这节课将讲解 **JOIN**。**JOIN** 语句的整个目标是一次能够从多个表格中获取数据。\n\n**JOIN** 使我们能够从多个表格中获取数据。是既简单，又很强大的功能。\n\n在掌握了 **JOIN** 语句后，我们还将学习 **ON** 语句。",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 403705,
          "key": "3f221ddd-423a-41c9-914a-2104d0994618",
          "title": "文本 + 练习：你的首个 JOIN",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3f221ddd-423a-41c9-914a-2104d0994618",
            "completed_at": "2019-02-05T14:37:52.533Z",
            "last_viewed_at": "2019-10-09T20:04:24.936Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403598,
              "key": "13399927-a1a4-45dd-9fff-57ec9c81b814",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 编写你的首个 JOIN\n\n以下是一个 **JOIN** 语句，你将有很多实践机会，没有什么学习方法比实践更强了。你将发现，我们在普通查询中引入了两个新的部分：**JOIN** 和 **ON**。**JOIN** 指定了你要从中获取数据的第二个表格。**ON** 表示你想如何合并 **FROM** 和 **JOIN** 语句中的表格。\n\n```\nSELECT orders.*\nFROM orders\nJOIN accounts\nON orders.account_id = accounts.id;\n```\n\n尝试自己运行下面的查询。\n",
              "instructor_notes": ""
            },
            {
              "id": 403599,
              "key": "7e960e2b-8c8f-45e9-995b-0199ffdba2d5",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewa24f4820",
              "pool_id": "sqlwidget",
              "view_id": "a559e7c7-eed3-4eb4-877a-a94d27660c10",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "frameBorder": "0"
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 403600,
              "key": "3107f43d-3bf2-4b1c-810c-a6a27efdd476",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 要注意什么\n\n我们能够从两个表格中获取数据：\n\n1. **orders**\n2. **accounts**\n\n我们仅从 **orders** 表格中获取数据。\n\n**ON** 语句存储的是两个表格中相连的两列。下个部分将重点讲解这一概念。\n\n### 练习问题\n\n1. 尝试获取 **accounts** 表格中的所有数据，以及 **orders** 表格中的所有数据。<br><br>\n2. 尝试从 **orders** 表格中获取 **standard_qty**、**gloss_qty** 和 **poster_qty**，并从 **accounts** 表格中获取 **website** 和 **primary_poc**。\n\n以下是练习这两个问题的另一个数据集，你可以在下个部分检查你的答案。",
              "instructor_notes": ""
            },
            {
              "id": 403601,
              "key": "f5134d16-9af9-46f3-b3a3-147b7a2e1347",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewa24f4820",
              "pool_id": "sqlwidget",
              "view_id": "c54afe8b-d216-4179-8124-f952b92825ae",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "frameBorder": "0"
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 403706,
          "key": "cd17232f-e208-4f0a-80ab-567d932917c6",
          "title": "解决方案：你的首个 JOIN",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cd17232f-e208-4f0a-80ab-567d932917c6",
            "completed_at": "2019-02-05T14:42:43.190Z",
            "last_viewed_at": "2019-10-09T20:06:15.797Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403602,
              "key": "711f8aae-f748-40a2-b049-ef7d4cb9059c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 解决方案\n\n1.\n\n```\nSELECT orders.*, accounts.*\nFROM accounts\nJOIN orders\nON accounts.id = orders.account_id;\n```\n注意，上述结果与你切换 **FROM** 和 **JOIN** 中的表格得到的结果一样。此外，`=` 两边的列顺序并不重要。\n\n2.\n```\nSELECT orders.standard_qty, orders.gloss_qty,\norders.poster_qty,  accounts.website,\naccounts.primary_poc\nFROM orders\nJOIN accounts\nON orders.account_id = accounts.id\n```\n注意，我们需要在 **SELECT** 语句中指定某列所来自的每个表格。\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 403708,
          "key": "57f82755-506c-4fb5-af0f-312b52ed340e",
          "title": "Text: ERD 提醒",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "57f82755-506c-4fb5-af0f-312b52ed340e",
            "completed_at": "2019-02-05T14:44:43.544Z",
            "last_viewed_at": "2019-10-09T20:06:33.829Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403603,
              "key": "6e5edda3-9ccf-46fa-8d38-32737ac4f976",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 实体关系图\n\n你可能还记得，在上节课，我们提到**实体关系图** (ERD) 是查看数据库中数据的常见方式。它也是了解如何从多个表格中获取数据的关键要素。\n\n如果能知道 Parch & Posey handy 的 ERD 看起来怎样，会比较有帮助，因此我在下面再次提供了该图。**你甚至可以打印一份，这样在完成剩下的练习时可以参考。**\n",
              "instructor_notes": ""
            },
            {
              "id": 403604,
              "key": "dac4dd37-f8c7-4249-9c64-cb9716022ed3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/598d102d_screen-shot-2017-08-02-at-11.14.25-am/screen-shot-2017-08-02-at-11.14.25-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/dac4dd37-f8c7-4249-9c64-cb9716022ed3",
              "caption": "",
              "alt": null,
              "width": 809,
              "height": 494,
              "instructor_notes": null
            },
            {
              "id": 403605,
              "key": "76ae0504-f951-4202-814b-d6d539707f8a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 表格与列\n\n在 Parch & Posey 数据库中，有 5 个表格\n1. **web_events**\n2. **accounts**\n3. **orders**\n4. **sales_reps**\n5. **region**\n\n你将发现，表格中某些列的列名称旁边具有 **PK** 或 **FK**，而其他列根本没有标签。\n\n如果你再仔细观察，可能会发现，**PK** 在每个表格中与第一列相关。**PK** 表示**主键**。**每个表格都存在主键，它是每行的值都唯一的列。**\n\n如果你查看我们的数据库中每个表格的前几行，你会发现这个首个 **PK** 列始终是唯一的。对于此数据库，它始终称为 `id`，但并非所有数据库都这样。\n",
              "instructor_notes": ""
            },
            {
              "id": 403606,
              "key": "b22d8d2b-24a0-493d-8fd9-8da9780422c1",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewa24f4820",
              "pool_id": "sqlwidget",
              "view_id": "a24f4820-b532-410d-b463-922615103b57",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "frameBorder": "0"
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 403709,
          "key": "049377d5-471c-4695-9233-e44c956cef9c",
          "title": "文本: 主键和外键",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "049377d5-471c-4695-9233-e44c956cef9c",
            "completed_at": "2019-02-05T14:47:44.186Z",
            "last_viewed_at": "2019-10-09T20:07:20.431Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403608,
              "key": "8bec90fc-c299-488a-8a4b-e4bf1ddf99c5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 键\n### 主键 (PK)\n\n**主键**是特定表格的唯一列。在我们的每个表格中是第一列，并且这些列都叫做 **id**，但是并非必须都要这样。**通常，在大多数数据库中，主键是表格的第一列。**\n\n### 外键 (FK)\n\n**外键**是另一个表格中的主键。我们可以在上一个 ERD 中看到，外键如下所示：\n\n1. **region_id**\n2. **account_id**\n3. **sales_rep_id**\n\n每个都与另一个表格的**主键**相关。下图是一个示例：\n",
              "instructor_notes": ""
            },
            {
              "id": 403609,
              "key": "e43bd273-c89f-44b0-8294-082ce081a436",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/598d2378_screen-shot-2017-08-10-at-8.23.48-pm/screen-shot-2017-08-10-at-8.23.48-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e43bd273-c89f-44b0-8294-082ce081a436",
              "caption": "",
              "alt": null,
              "width": 1200,
              "height": 512,
              "instructor_notes": null
            },
            {
              "id": 403610,
              "key": "190ec4a7-ba45-4356-a567-d7424015915e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 主键 - 外键关联性\n\n在上图中，可以看出：\n1. **region_id** 是外键。\n2. region_id 与 id **相连** - 它是将这两个表格相连的主外键关系。\n3. [Crow's foot（鱼尾纹）](https://support.office.com/zh-cn/article/%E6%98%BE%E7%A4%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%A1%E5%9E%8B%E5%9B%BE%E4%B8%AD%E7%9A%84-Crow-s-Foot-%E8%A1%A8%E7%A4%BA%E6%B3%95-2b199d79-c75f-4936-9bbe-808713f6bda3) 表示 **FK** 实际上可以出现在 **sales_reps** 表格中的很多行中。\n4. 虽然这一行告诉我们 **PK** 显示在此表格中 id 每行仅出现一次。\n\n如果你查看该数据库的其他部分，你会发现，主外键关系始终是这种情况。在下个页面中，你可以完全掌握这一知识点！\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 403712,
          "key": "76fb20b3-8863-4bcf-bd5a-e54b01850717",
          "title": "练习：主外键关系",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "76fb20b3-8863-4bcf-bd5a-e54b01850717",
            "completed_at": "2019-02-05T14:49:53.578Z",
            "last_viewed_at": "2019-10-09T20:09:39.841Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403611,
              "key": "3e4b1425-fbe8-47c8-8fa8-85637af61ad8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " # 有助于回答以下问题的实用 ERD",
              "instructor_notes": ""
            },
            {
              "id": 403612,
              "key": "1b65ac55-1162-4b66-bbc9-65201b975b7b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/598d24e9_screen-shot-2017-08-02-at-11.14.25-am/screen-shot-2017-08-02-at-11.14.25-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1b65ac55-1162-4b66-bbc9-65201b975b7b",
              "caption": "",
              "alt": null,
              "width": 809,
              "height": 494,
              "instructor_notes": null
            },
            {
              "id": 403613,
              "key": "ab1520e2-936b-4972-907c-ab200255e0b7",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ab1520e2-936b-4972-907c-ab200255e0b7",
                "completed_at": "2019-02-09T07:39:16.736Z",
                "last_viewed_at": "2019-02-09T07:39:16.736Z",
                "unstructured": "{\"answer_ids\":[\"a1502422317500\",\"a1502422355905\",\"a1502422405886\",\"a1502422507213\",\"a1505765942629\"],\"is_correct\":true}"
              },
              "question": {
                "complex_prompt": {
                  "text": "将每个术语或列匹配到相应的定义或说明。"
                },
                "concepts_label": "定义或列描述",
                "answers_label": "术语或列",
                "concepts": [
                  {
                    "text": "让该列中的每行都具有唯一值。每个表格中都有一个。",
                    "correct_answer": {
                      "id": "a1502422317500",
                      "text": "主键"
                    }
                  },
                  {
                    "text": "存在于另一个表格中的主键**关联性**。",
                    "correct_answer": {
                      "id": "a1502422355905",
                      "text": "外键"
                    }
                  },
                  {
                    "text": "每个表格中的主键",
                    "correct_answer": {
                      "id": "a1502422405886",
                      "text": "id"
                    }
                  },
                  {
                    "text": "同时存在于 **web_events** 和 **orders** 表格中的外键。",
                    "correct_answer": {
                      "id": "a1502422507213",
                      "text": "account_id"
                    }
                  },
                  {
                    "text": "**ON** 语句使** join** 的表 **web_events** 和 **accounts** 产生关联。",
                    "correct_answer": {
                      "id": "a1505765942629",
                      "text": "ON web_events.account_id = accounts.id"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1505765942629",
                    "text": "ON web_events.account_id = accounts.id"
                  },
                  {
                    "id": "a1505766069597",
                    "text": "ON accounts.id = web_events.id"
                  },
                  {
                    "id": "a1502422405886",
                    "text": "id"
                  },
                  {
                    "id": "a1502422317500",
                    "text": "主键"
                  },
                  {
                    "id": "a1502422355905",
                    "text": "外键"
                  },
                  {
                    "id": "a1505766081939",
                    "text": "ON accounts.account_id = web_events.id"
                  },
                  {
                    "id": "a1505766058657",
                    "text": "ON web_events.id = accounts.id"
                  },
                  {
                    "id": "a1502422507213",
                    "text": "account_id"
                  }
                ]
              }
            },
            {
              "id": 403614,
              "key": "e5e880cd-f7b5-4159-9833-30321ba0768a",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e5e880cd-f7b5-4159-9833-30321ba0768a",
                "completed_at": "2019-02-05T14:50:09.241Z",
                "last_viewed_at": "2019-02-09T07:39:50.506Z",
                "unstructured": "{\"selected_ids\":[\"a1502422734656\",\"a1502422713216\"],\"is_correct\":true}"
              },
              "question": {
                "prompt": "选择所有关于主键的正确描述。",
                "answers": [
                  {
                    "id": "a1502422713216",
                    "text": "每个表格中都必须有一个（且只有一个）这种列。",
                    "is_correct": true
                  },
                  {
                    "id": "a1502422734656",
                    "text": "它们是表格中的一列。",
                    "is_correct": true
                  },
                  {
                    "id": "a1502422756843",
                    "text": "表格中可能有多个主键。",
                    "is_correct": false
                  },
                  {
                    "id": "a1502422838459",
                    "text": "它们是表格中的一行。",
                    "is_correct": false
                  },
                  {
                    "id": "a1502422844165",
                    "text": " 在整个数据库中，每个数据库只有一个主键。",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 403615,
              "key": "66d65722-51a9-4b26-8a62-5d1d3c6f982d",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "66d65722-51a9-4b26-8a62-5d1d3c6f982d",
                "completed_at": "2019-02-09T07:40:18.378Z",
                "last_viewed_at": "2019-02-09T07:40:18.378Z",
                "unstructured": "{\"selected_ids\":[\"a1502423010399\",\"a1502423077956\"],\"is_correct\":true}"
              },
              "question": {
                "prompt": "选择所有关于外键的正确描述。",
                "answers": [
                  {
                    "id": "a1502423010399",
                    "text": "它们始终与主键相关联。",
                    "is_correct": true
                  },
                  {
                    "id": "a1502423030835",
                    "text": "对于表格中的每行，它们是唯一的。",
                    "is_correct": false
                  },
                  {
                    "id": "a1502423041448",
                    "text": "每个表格都必须具有一个外键。",
                    "is_correct": false
                  },
                  {
                    "id": "a1502423066016",
                    "text": "表格只能有一个外键。",
                    "is_correct": false
                  },
                  {
                    "id": "a1502423077956",
                    "text": "在上述数据库中，每个外键都与鱼尾纹记法相关，表明它可以在表格中的一列里出现多次。",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 403717,
          "key": "6bcadea2-78dd-4aa5-a9f1-f84be429067b",
          "title": "文本 + 练习：JOIN 回顾",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6bcadea2-78dd-4aa5-a9f1-f84be429067b",
            "completed_at": "2019-02-05T14:52:39.017Z",
            "last_viewed_at": "2019-10-09T20:10:10.947Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403616,
              "key": "c978dbfa-cd6d-47d0-a081-9a2a1ce81d7d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# JOIN 回顾\n\n我们回顾下你编写的第一个 JOIN 语句。\n\n```\nSELECT orders.*\nFROM orders\nJOIN accounts\nON orders.account_id = accounts.id;\n```\n\n以下是这两个表格的 ERD：\n",
              "instructor_notes": ""
            },
            {
              "id": 403617,
              "key": "f25048f0-3208-4eb6-a176-f92a8b177c2d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/598dfda7_screen-shot-2017-08-11-at-11.54.30-am/screen-shot-2017-08-11-at-11.54.30-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f25048f0-3208-4eb6-a176-f92a8b177c2d",
              "caption": "",
              "alt": null,
              "width": 528,
              "height": 373,
              "instructor_notes": null
            },
            {
              "id": 403618,
              "key": "101d312b-7be2-4298-957b-f28a18d549da",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " # 注意\n\n注意，我们的 SQL 查询包含两个想要连接的表格：一个来自 **FROM**，另一个来自 **JOIN**。然后在 **ON** 中，我们**始终**让**主键**等于**外键**：\n\n我们按照以下方式连接任何两个表格。",
              "instructor_notes": ""
            },
            {
              "id": 403619,
              "key": "0376b35a-d33c-44a7-b6a0-436ea7be9509",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/598e0b9e_screen-shot-2017-08-10-at-8.10.13-pm/screen-shot-2017-08-10-at-8.10.13-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0376b35a-d33c-44a7-b6a0-436ea7be9509",
              "caption": "",
              "alt": null,
              "width": 1180,
              "height": 496,
              "instructor_notes": null
            },
            {
              "id": 403620,
              "key": "5b4c7684-8689-4699-a828-cbebb69c2816",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5b4c7684-8689-4699-a828-cbebb69c2816",
                "completed_at": "2019-02-05T14:52:44.998Z",
                "last_viewed_at": "2019-02-09T07:40:56.711Z",
                "unstructured": "{\"selected_id\":\"a1502478275040\",\"is_correct\":true}"
              },
              "question": {
                "prompt": "# 练习\n\n参考以上图片。如果我们想连接 `sales_reps` 和 `region` 表格，如何操作？",
                "answers": [
                  {
                    "id": "a1502478197685",
                    "text": "ON sales_reps.id = region.id",
                    "is_correct": false
                  },
                  {
                    "id": "a1502478260991",
                    "text": "ON sales_reps.id = region.name",
                    "is_correct": false
                  },
                  {
                    "id": "a1502478275040",
                    "text": "ON sales_reps.region_id = region.id",
                    "is_correct": true
                  },
                  {
                    "id": "a1502478293023",
                    "text": "ON region.id = sales_reps.id",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 403621,
              "key": "64e99937-13b9-41a5-b7df-89f071ad67e2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 连接多个表格\n\n可以利用同一逻辑连接多个表格。看看下面的三个表格。",
              "instructor_notes": ""
            },
            {
              "id": 403622,
              "key": "90e0b63f-a6f0-473b-8225-091696c95cf4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/598e2e15_screen-shot-2017-08-11-at-3.21.34-pm/screen-shot-2017-08-11-at-3.21.34-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/90e0b63f-a6f0-473b-8225-091696c95cf4",
              "caption": "",
              "alt": null,
              "width": 709,
              "height": 349,
              "instructor_notes": null
            },
            {
              "id": 403623,
              "key": "0a1c66cc-0855-4ef8-8d84-31b12be0785e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 代码\n\n如果我们想连接所有这三个表格，我们可以采用相同的逻辑。\n\n```\nFROM web_events\nJOIN accounts\nON web_events.account_id = accounts.id\nJOIN orders\nON accounts.id = orders.account_id\n```\n\n现在，我们的 **SELECT** 语句可以从所有三个表格中获取数据。同样，**JOIN** 存储的是表格，**ON** 是让**主键**等于**外键**。\n\n**SELECT** 语句将需要指定你想从中获取列的表格：\n\n```\nSELECT web_events.channel, accounts.name, orders.total\n```\n\n我们可以继续按照这一流程操作，连接所有要连接的表格。为了提高效率，我们可能不希望这么做，除非需要从所有表格中获取信息。\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 403716,
          "key": "55347cdd-f5c4-4741-b054-03a8a4b4eae4",
          "title": "视频：别名",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "55347cdd-f5c4-4741-b054-03a8a4b4eae4",
            "completed_at": "2019-02-05T15:02:06.475Z",
            "last_viewed_at": "2019-10-09T20:12:40.214Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403624,
              "key": "906c5d6e-4f3e-4369-850d-87e49cddd761",
              "title": "别名",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "viWHJaxWTvw",
                "china_cdn_id": "viWHJaxWTvw.mp4"
              }
            },
            {
              "id": 403625,
              "key": "ae973e04-fa18-49fb-8d3a-e4380c96a338",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "当我们**连接**表格时，最好能为每个表格设置一个**别名**。你实际上在**算术运算符**部分见过类似的列名称别名。\n\n示例：\n\n```\nFROM tablename AS t1\nJOIN tablename2 AS t2\n```\n\n之前，你见过如下所示的语句：\n\n```\nSELECT col1 + col2 AS total, col3\n```\n\n经常你可能还会见到没有 **AS** 部分的语句。上述每个语句都可以改写为以下形式，**结果依然相同**：\n\n```\nFROM tablename t1\nJOIN tablename2 t2\n```\n\n以及\n\n```\nSELECT col1 + col2 total, col3\n```\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 403723,
          "key": "83da273e-73e7-48b6-a743-219de50b788f",
          "title": "练习：JOIN 问题（第一部分）",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "83da273e-73e7-48b6-a743-219de50b788f",
            "completed_at": "2019-02-05T15:37:06.204Z",
            "last_viewed_at": "2019-10-09T20:43:41.197Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403626,
              "key": "6869c357-3b07-486e-9cb9-47e868e52c9c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 练习\n\n你已经了解了 JOIN，我们接下来通过练习让你熟练掌握这一新的知识点。我在下面提供了 **ERD** 和好几个问题。如果你遇到问题，或想对比检查答案，可以在下一页面找到这些问题的答案！",
              "instructor_notes": ""
            },
            {
              "id": 403627,
              "key": "ec7a3d7c-8670-4f0d-8aad-9007c3fb2314",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/598e10e7_screen-shot-2017-08-02-at-11.14.25-am/screen-shot-2017-08-02-at-11.14.25-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ec7a3d7c-8670-4f0d-8aad-9007c3fb2314",
              "caption": "",
              "alt": null,
              "width": 809,
              "height": 494,
              "instructor_notes": null
            },
            {
              "id": 403628,
              "key": "c88df4e7-bbdc-4524-9584-6b43e826e9df",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "建议使用以下环境练习你的查询，并将查询保存到文件中。然后将你的文件与下一页面中我的答案进行对比！\n\n# 问题\n\n1. 为与 `name`=`Walmart` 相关的所有 **web_events** 创建一个表格。表格应该包含三列：`primary_poc`、事件时间和每个事件的`channel`（渠道）。此外，你可以选择添加第四列，确保仅选中了 `Walmart` 事件。<br><br>\n2. 为每个 `sales_rep` 对应的`region`以及相关的`accounts` 创建一个表格，最终表格应该包含三列：区域名称、销售代表名称，以及客户名称。根据客户名称按字母顺序 (A-Z) 排序。<br><br>\n3. 提供每个订单的每个`region`，以及 `account`和 `unit price` (total_amt_usd/total)。最终表格应该包含三列：区域名称、客户名称和订单单价。少数几个客户的总订单数为 0，因此我除以的是 (total + 0.01) 以确保不会除以 0。<br><br>",
              "instructor_notes": ""
            },
            {
              "id": 403629,
              "key": "7b540a84-854b-405d-b7c9-267118716481",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewa24f4820",
              "pool_id": "sqlwidget",
              "view_id": "88790466-d7ba-49da-a4ee-fb2d3cd63d35",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "frameBorder": "0"
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 403630,
              "key": "27f35ae5-910b-4576-8244-6051db9c75a3",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "27f35ae5-910b-4576-8244-6051db9c75a3",
                "completed_at": "2019-02-05T15:39:25.116Z",
                "last_viewed_at": "2019-02-09T10:13:28.713Z",
                "unstructured": "{\"selected_ids\":[\"a1502725632679\",\"a1502726132662\",\"a1502725721056\"],\"is_correct\":true}"
              },
              "question": {
                "prompt": "标出以下所有正确的表述。",
                "answers": [
                  {
                    "id": "a1502725632679",
                    "text": "**ON** 语句应该始终让外键等于主键。",
                    "is_correct": true
                  },
                  {
                    "id": "a1502725698374",
                    "text": "**SQL** **要求** **ON** 语句始终让外键等于主键。",
                    "is_correct": false
                  },
                  {
                    "id": "a1502725721056",
                    "text": "**JOIN** 语句使我们能够从 **SQL** 数据库中的多个表格里获取数据。",
                    "is_correct": true
                  },
                  {
                    "id": "a1502726132662",
                    "text": "你可以将第一节课学到的所有命令与 **JOIN** 语句一起使用。",
                    "is_correct": true
                  },
                  {
                    "id": "a1502726133344",
                    "text": "从多个表格中获取数据的唯一方式是使用 **JOIN** 语句。",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 403631,
              "key": "24b35f61-5103-4325-85da-f2567d10927a",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "24b35f61-5103-4325-85da-f2567d10927a",
                "completed_at": "2019-02-06T00:48:39.249Z",
                "last_viewed_at": "2019-02-09T10:13:40.518Z",
                "unstructured": "{\"selected_ids\":[\"a1502733472038\"],\"is_correct\":true}"
              },
              "question": {
                "prompt": "选择以下所有表述正确的语句。",
                "answers": [
                  {
                    "id": "a1502732764332",
                    "text": "如果我们想要为表格设定别名，则**必须**在查询中使用 **AS**。",
                    "is_correct": false
                  },
                  {
                    "id": "a1502733186945",
                    "text": "如果我们想要为列设定别名，则**必须**在查询中使用 **AS**。",
                    "is_correct": false
                  },
                  {
                    "id": "a1502733472038",
                    "text": "当我们开始连接多个表格时，别名可以用来缩短表格名称，并且很常用。",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 403724,
          "key": "776191b3-68e5-4314-bba7-fec0e9857729",
          "title": "解决方案：JOIN 问题（第一部分）",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "776191b3-68e5-4314-bba7-fec0e9857729",
            "completed_at": "2019-02-06T00:50:12.046Z",
            "last_viewed_at": "2019-10-09T20:35:18.871Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403632,
              "key": "48385eaa-3399-4b64-9aa1-e4df57dfef94",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 解决方案\n\n1. \n```\nSELECT a.primary_poc, w.occurred_at, w.channel, a.name\nFROM web_events w\nJOIN accounts a\nON w.account_id = a.id\nWHERE a.name = 'Walmart';\n```\n2. \n```\nSELECT r.name region, s.name rep, a.name account\nFROM sales_reps s\nJOIN region r\nON s.region_id = r.id\nJOIN accounts a\nON a.sales_rep_id = s.id\nORDER BY a.name;\n```\n3.  \n```\nSELECT r.name region, a.name account,\no.total_amt_usd/(o.total + 0.01) unit_price\nFROM region r\nJOIN sales_reps s\nON s.region_id = r.id\nJOIN accounts a\nON a.sales_rep_id = s.id\nJOIN orders o\nON o.account_id = a.id;\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 403725,
          "key": "08c5b089-9606-4cdd-9ca4-d12f5d04b425",
          "title": "视频：其他 JOIN 的目的",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "08c5b089-9606-4cdd-9ca4-d12f5d04b425",
            "completed_at": "2019-02-06T00:51:28.704Z",
            "last_viewed_at": "2019-10-09T20:43:57.046Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403633,
              "key": "22bc61e2-0c04-49ce-a089-da3d15fc193a",
              "title": "其他 JOIN 的目的",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "3qdv1Ojc9Og",
                "china_cdn_id": "3qdv1Ojc9Og.mp4"
              }
            },
            {
              "id": 403634,
              "key": "414a8fa6-e88f-4072-b62f-f17fc3cfc711",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 专家提示\n\n当我们介绍主键和外键时，稍微介绍了这些**一对一**和**一对多**关系。注意，传统数据库不允许出现**多对多**关系，因为这样很快就会破坏架构。[这篇文章](https://stackoverflow.com/questions/7339143/why-no-many-to-many-relationships)给出了很好的解释。\n\n数据库中的关系类型对分析师来说并不太重要，但是你需要了解为何要执行不同类型的 **JOIN**，以及你要从数据库中获取什么数据。我们将在下一部分详细讲解。\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 403726,
          "key": "434b0766-b87b-4833-b6d9-f0b17b26ab45",
          "title": "视频：LEFT JOIN 和 RIGHT JOIN’",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "434b0766-b87b-4833-b6d9-f0b17b26ab45",
            "completed_at": "2019-02-06T00:54:47.036Z",
            "last_viewed_at": "2019-10-09T20:45:07.927Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403635,
              "key": "c43e93e1-a8bc-4032-90c4-6c9a1edf6ac1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 注意\n\n这一部分有两个视频：\n\n1. 第一个视频演示了当前处理数据的连接方式。\n2. 第二个视频演示了LEFT JOIN 和 RIGHT JOIN 语句。\n",
              "instructor_notes": ""
            },
            {
              "id": 403636,
              "key": "4866152d-15be-45c7-b757-2dde5d33fb01",
              "title": "JOINs",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "CxuHtd1Daqk",
                "china_cdn_id": "CxuHtd1Daqk.mp4"
              }
            },
            {
              "id": 403637,
              "key": "1d903f67-97d9-4fbe-866b-2cf82200746e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "在上面的视频中，你了解了一直都在编写的 JOIN，即**内连接**。在下面的视频中，你将学习其他数据**连接**方式，具体取决于要提出的问题。\n\n______",
              "instructor_notes": ""
            },
            {
              "id": 403638,
              "key": "dead3efd-4a14-4c38-837a-a45cc626cad1",
              "title": "Other JOINs",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "4edRxFmWUEw",
                "china_cdn_id": "4edRxFmWUEw.mp4"
              }
            },
            {
              "id": 403639,
              "key": "72e715f0-d8eb-4940-b5b6-094c2977cd35",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### JOIN\n\n注意，每个新的 **JOIN** 语句和 **INNER JOIN** 获取的都是相同的行，通过直接使用 **JOIN** 就能看到这些行，但是它们可能还会获取其他的行。  \n\n 如果连接的表格没有匹配的信息，那么就会出现单元格为空的列。这些空的单元格就引出了新的数据类型，叫做 **NULL**。你将在下节课详细学习 **NULL**，暂时先理解为任何没有数据的单元格都是 **NULL**。\n            ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 403727,
          "key": "1f196edd-3923-4db2-a509-040be4ac3210",
          "title": " 文本：其他 JOIN 注意事项",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1f196edd-3923-4db2-a509-040be4ac3210",
            "completed_at": "2019-02-06T01:00:48.296Z",
            "last_viewed_at": "2019-10-09T20:50:41.994Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403640,
              "key": "65fae4ae-11c2-44f5-8012-dd859fd0b7f7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# JOIN 简介\n### INNER JOIN\n\n注意，到目前为止介绍的**每个** JOIN 都是 **INNER JOIN**，即我们仅获取在两个表格中都匹配存在的行。\n\n新的 **JOIN** 使我们能够获取可能仅在其中一个表格中存在的行。这就会导致一种新的数据类型，叫做 **NULL**。我们将在下节课详细讲解这一数据类型。\n\n### 注意\n\n你可能见过以下 SQL 语法\n\n```\nLEFT OUTER JOIN\n```\n或\n```\nRIGHT OUTER JOIN\n```\n这些命令和我们在上个视频中学过的 **LEFT JOIN** 和 **RIGHT JOIN** 完全一样。\n\n### OUTER JOIN\n最后一种连接类型是外连接，它将返回内连接的结果，以及被连接的表格中没有匹配的行。\n\n这种连接返回的是与两个表格中的某个表格不匹配的行，完整的外连接用例**非常罕见**。\n\n你可以在[此处](http://www.w3resource.com/sql/joins/perform-a-full-outer-join.php)查看外连接示例，并在[此处](https://stackoverflow.com/questions/2094793/when-is-a-good-situation-to-use-a-full-outer-join)查看罕见使用情况说明。由于这种连接的使用情况很少见，因此我们将不浪费时间讨论了。\n\n和上面的相似，你可能还会看到 **FULL OUTER JOIN**，它和 **OUTER JOIN** 一样。\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 403728,
          "key": "b84358f0-5156-41c2-9497-2a45a7f36035",
          "title": "LEFT 和 RIGHT JOIN",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b84358f0-5156-41c2-9497-2a45a7f36035",
            "completed_at": "2019-02-06T01:09:01.744Z",
            "last_viewed_at": "2019-07-31T13:15:46.667Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403641,
              "key": "dc5fc582-ad77-4672-947f-9dbc1bc59298",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "dc5fc582-ad77-4672-947f-9dbc1bc59298",
                "completed_at": "2019-02-06T01:09:19.892Z",
                "last_viewed_at": "2019-02-06T01:17:25.283Z",
                "unstructured": "{\"selected_ids\":[\"a1502734210259\",\"a1502734398208\",\"a1502734431427\",\"a1502734444700\"],\"is_correct\":true}"
              },
              "question": {
                "prompt": "选择以下所有表述正确的语句。",
                "answers": [
                  {
                    "id": "a1502734210259",
                    "text": "如果我们更改 **FROM** 和 **JOIN** 语句中的表格，则 **LEFT JOIN** 和 **RIGHT JOIN** 的结果一样。",
                    "is_correct": true
                  },
                  {
                    "id": "a1502734398208",
                    "text": "**LEFT JOIN** 将**至少**返回所有 **INNER JOIN** 返回的所有行。",
                    "is_correct": true
                  },
                  {
                    "id": "a1502734431427",
                    "text": "**JOIN** 和 **INNER JOIN** 是一样的。",
                    "is_correct": true
                  },
                  {
                    "id": "a1502734444700",
                    "text": "**LEFT OUTER JOIN** 和 **LEFT JOIN** 是一样的。",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 403642,
              "key": "048f2da8-95b8-4c76-b553-57533a796bf0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/59920464_screen-shot-2017-08-14-at-1.12.55-pm/screen-shot-2017-08-14-at-1.12.55-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/048f2da8-95b8-4c76-b553-57533a796bf0",
              "caption": "",
              "alt": null,
              "width": 1466,
              "height": 587,
              "instructor_notes": null
            },
            {
              "id": 403643,
              "key": "66aaa005-44b5-4341-863a-9e59e18b2400",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "以上是两个小的表格，用来检测下你的 **JOIN** 知识。你可以点击图片，看的更清楚。\n\n**Country** 有 6 行和 2 列：\n* **countryid** 和 **countryName**\n\n**State** 有 6 行和 3 列：\n* **stateid**、**countryid** 和 **stateName**\n\n\n根据上述表格判断以下问题的答案。\n",
              "instructor_notes": ""
            },
            {
              "id": 403644,
              "key": "9543afb8-e626-4c08-a166-f883553f1b88",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9543afb8-e626-4c08-a166-f883553f1b88",
                "completed_at": "2019-02-06T01:10:12.677Z",
                "last_viewed_at": "2019-02-06T01:17:21.123Z",
                "unstructured": "{\"answer_ids\":[\"a1502742297333\",\"a1502743248368\",\"a1502743285301\"],\"is_correct\":true}"
              },
              "question": {
                "complex_prompt": {
                  "text": "将每个语句与所描述的项相匹配。"
                },
                "concepts_label": "描述",
                "answers_label": "项",
                "concepts": [
                  {
                    "text": "**Country** 表格的主键。",
                    "correct_answer": {
                      "id": "a1502742297333",
                      "text": "Country.countryid"
                    }
                  },
                  {
                    "text": "**State** 表格的主键。",
                    "correct_answer": {
                      "id": "a1502743248368",
                      "text": "State.stateid"
                    }
                  },
                  {
                    "text": "在连接表格时会用到的外键。",
                    "correct_answer": {
                      "id": "a1502743285301",
                      "text": "State.countryid"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1502743285301",
                    "text": "State.countryid"
                  },
                  {
                    "id": "a1502742297333",
                    "text": "Country.countryid"
                  },
                  {
                    "id": "a1502743366429",
                    "text": "State.stateName"
                  },
                  {
                    "id": "a1502743248368",
                    "text": "State.stateid"
                  },
                  {
                    "id": "a1502743346310",
                    "text": "Country.countryName"
                  }
                ]
              }
            },
            {
              "id": 403645,
              "key": "6abba5d4-2a22-4eec-9448-f27b2b78dfef",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/59921134_screen-shot-2017-08-14-at-1.12.55-pm/screen-shot-2017-08-14-at-1.12.55-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6abba5d4-2a22-4eec-9448-f27b2b78dfef",
              "caption": "",
              "alt": null,
              "width": 1466,
              "height": 587,
              "instructor_notes": null
            },
            {
              "id": 403646,
              "key": "ca0e115e-8b31-48f2-9baf-271a286da7ff",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "上面的两个表格只是为了避免滚动幅度太大，如果你要执行以下查询：\n```\nSELECT c.countryid, c.countryName, s.stateName\nFROM Country c\nJOIN State s\nON c.countryid = s.countryid;\n```",
              "instructor_notes": ""
            },
            {
              "id": 403647,
              "key": "b47fecf2-7e42-41f0-9b53-0b9be9de6859",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b47fecf2-7e42-41f0-9b53-0b9be9de6859",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "将查询结果与说明相匹配。"
                },
                "concepts_label": "描述",
                "answers_label": "结果",
                "concepts": [
                  {
                    "text": "生成的表格中的列数。",
                    "correct_answer": {
                      "id": "a1502744965152",
                      "text": "3"
                    }
                  },
                  {
                    "text": "生成的表格中的行数。",
                    "correct_answer": {
                      "id": "a1502744997291",
                      "text": "6"
                    }
                  },
                  {
                    "text": "countryid `1` 将在生成的表格中出现的次数。",
                    "correct_answer": {
                      "id": "a1502744998328",
                      "text": "2"
                    }
                  },
                  {
                    "text": "countryid `6` 将在生成的表格中出现的次数。",
                    "correct_answer": {
                      "id": "a1502744999194",
                      "text": "0"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1502744999194",
                    "text": "0"
                  },
                  {
                    "id": "a1502745132163",
                    "text": "1"
                  },
                  {
                    "id": "a1502744965152",
                    "text": "3"
                  },
                  {
                    "id": "a1502744998328",
                    "text": "2"
                  },
                  {
                    "id": "a1502745133934",
                    "text": "4"
                  },
                  {
                    "id": "a1502745152359",
                    "text": "12"
                  },
                  {
                    "id": "a1502745144549",
                    "text": "5"
                  },
                  {
                    "id": "a1502745149555",
                    "text": "8"
                  },
                  {
                    "id": "a1502744997291",
                    "text": "6"
                  },
                  {
                    "id": "a1502745146083",
                    "text": "7"
                  }
                ]
              }
            },
            {
              "id": 403648,
              "key": "a78d3931-3430-4acc-8cda-daa7fbd12730",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/59921120_screen-shot-2017-08-14-at-1.12.55-pm/screen-shot-2017-08-14-at-1.12.55-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a78d3931-3430-4acc-8cda-daa7fbd12730",
              "caption": "",
              "alt": null,
              "width": 1466,
              "height": 587,
              "instructor_notes": null
            },
            {
              "id": 403649,
              "key": "87ff4c7a-46f9-481e-a73f-7a64a5c63af3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "  上面的两个表格同样只是为了避免滚动幅度太大，如果你要执行以下查询：\n\n```\nSELECT c.countryid, c.countryName, s.stateName\nFROM Country c\nLEFT JOIN State s\nON c.countryid = s.countryid;\n```",
              "instructor_notes": ""
            },
            {
              "id": 403650,
              "key": "bdc8c35a-3fea-4434-ba56-6a638194d884",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bdc8c35a-3fea-4434-ba56-6a638194d884",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "将查询结果与说明相匹配。"
                },
                "concepts_label": "描述",
                "answers_label": "结果",
                "concepts": [
                  {
                    "text": "生成的表格中的列数。",
                    "correct_answer": {
                      "id": "a1502743877088",
                      "text": "3"
                    }
                  },
                  {
                    "text": "生成的表格中的行数。",
                    "correct_answer": {
                      "id": "a1502744076702",
                      "text": "8"
                    }
                  },
                  {
                    "text": "countryid `1` 将在生成的表格中出现的次数。",
                    "correct_answer": {
                      "id": "a1502744089777",
                      "text": "2"
                    }
                  },
                  {
                    "text": "countryid `6` 将在生成的表格中出现的次数。",
                    "correct_answer": {
                      "id": "a1502744171617",
                      "text": "1"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1502744171617",
                    "text": "1"
                  },
                  {
                    "id": "a1502744245186",
                    "text": "4"
                  },
                  {
                    "id": "a1502744201203",
                    "text": "6"
                  },
                  {
                    "id": "a1502744076702",
                    "text": "8"
                  },
                  {
                    "id": "a1502744259115",
                    "text": "10"
                  },
                  {
                    "id": "a1502744089777",
                    "text": "2"
                  },
                  {
                    "id": "a1502743877088",
                    "text": "3"
                  },
                  {
                    "id": "a1502746757861",
                    "text": "0"
                  },
                  {
                    "id": "a1502744249740",
                    "text": "7"
                  },
                  {
                    "id": "a1502744241089",
                    "text": "5"
                  },
                  {
                    "id": "a1502744255764",
                    "text": "9"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 403729,
          "key": "d57c222e-1ac5-43d4-8685-e3365f200735",
          "title": "解决方案： LEFT 和 RIGHT JOIN ",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d57c222e-1ac5-43d4-8685-e3365f200735",
            "completed_at": "2019-02-06T01:50:23.908Z",
            "last_viewed_at": "2019-07-31T13:15:50.777Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403651,
              "key": "44ded8ef-5871-495c-85c8-34e3cc36a59e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " # LEFT JOIN 和 RIGHT JOIN 解决方案\n\n这一部分讲解的是上一部分的最后两个问题，首先再看看我们处理的这两个表格：",
              "instructor_notes": ""
            },
            {
              "id": 403652,
              "key": "441c4486-fa15-4726-86dd-a2d78f286f4f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/59922214_screen-shot-2017-08-14-at-1.12.55-pm/screen-shot-2017-08-14-at-1.12.55-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/441c4486-fa15-4726-86dd-a2d78f286f4f",
              "caption": "",
              "alt": null,
              "width": 1466,
              "height": 806,
              "instructor_notes": null
            },
            {
              "id": 403653,
              "key": "c923d83e-5718-4f95-9eac-73dd155efcb5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### INNER JOIN 问题\n\n这些问题旨在让你对 **LEFT JOIN** 和 **INNER JOIN** 的原理有所了解，然后才能使用它们处理更复杂的问题。\n\n对于如下所示的 **INNER JOIN**：\n```\nSELECT c.countryid, c.countryName, s.stateName\nFROM Country c\nJOIN State s\nON c.countryid = s.countryid;\n```\n我们实际上是将两个表格中匹配的主键和外键行连接到一起，如下图所示。\n",
              "instructor_notes": ""
            },
            {
              "id": 403654,
              "key": "5d63b6f0-35ac-4570-bcde-fc39fc802e36",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/599227b3_screen-shot-2017-08-14-at-3.41.58-pm/screen-shot-2017-08-14-at-3.41.58-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5d63b6f0-35ac-4570-bcde-fc39fc802e36",
              "caption": "",
              "alt": null,
              "width": 1479,
              "height": 668,
              "instructor_notes": null
            },
            {
              "id": 403655,
              "key": "939da6ab-06ae-49d6-b86c-b59577f6da5a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " 生成的表格将如下所示：\n\n| **countryid**  | **countryName**  | **stateName**  | \n|--:|--:|---|\n| 1  | India   | Maharashtra  | \n| 1  | India | Punjab  | \n| 2  | Nepal  | Kathmandu  | \n| 3  | United States  | California  | \n| 3  | United States  | Texas  | \n| 4  | Canada  | Alberta  | ",
              "instructor_notes": ""
            },
            {
              "id": 403656,
              "key": "d9d77fec-29f2-40e5-a439-a0aa5b1347fa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### LEFT JOIN 问题\n\n这些问题旨在让你对 **LEFT JOIN** 和 **INNER JOIN** 的原理有所了解，然后才能使用它们处理更复杂的问题。\n\n对于如下所示的 **LEFT JOIN**：\n```\nSELECT c.countryid, c.countryName, s.stateName\nFROM Country c\nLEFT JOIN State s\nON c.countryid = s.countryid;\n```\n和之前一样，我们实际上是将两个表格中匹配的主键和外键行连接到一起，但是我们还从 **Country** 表格中获取额外的行，即使它们在 **State** 表格中没有匹配的项。因此，我们获取的是 **INNER JOIN** 生成的所有行，同时还获取 **FROM** 中的表格里的其他行。\n\n",
              "instructor_notes": ""
            },
            {
              "id": 403657,
              "key": "825e60d9-7ed3-4ab5-baa2-23018ab15920",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/59922cad_screen-shot-2017-08-14-at-4.04.44-pm/screen-shot-2017-08-14-at-4.04.44-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/825e60d9-7ed3-4ab5-baa2-23018ab15920",
              "caption": "",
              "alt": null,
              "width": 1471,
              "height": 622,
              "instructor_notes": null
            },
            {
              "id": 403658,
              "key": "6b0cf2b4-d547-4b69-80e6-aef017b62bed",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "生成的表格将如下所示：\n\n| **countryid**  | **countryName**  | **stateName**  | \n|--:|--:|---|\n| 1  | India   | Maharashtra  | \n| 1  | India | Punjab  | \n| 2  | Nepal  | Kathmandu  | \n| 3  | United States  | California  | \n| 3  | United States  | Texas  | \n| 4  | Canada  | Alberta  | \n| 5  | Sri Lanka  | NULL  | \n| 6  | Brazil  | NULL | \n",
              "instructor_notes": ""
            },
            {
              "id": 403659,
              "key": "86227bc3-7b9a-49c9-a322-ff1946ce3af9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 最后的 LEFT JOIN 注意事项\n\n如果我们翻转表格顺序的话，实际上和 **JOIN** 语句获得的结果完全一样：\n\n```\nSELECT c.countryid, c.countryName, s.stateName\nFROM State s\nLEFT JOIN Country c\nON c.countryid = s.countryid;\n```\n这是因为如果 **State** 位于**左侧**表格中，则所有行再次出现在**右侧**表格中。\n",
              "instructor_notes": ""
            },
            {
              "id": 403660,
              "key": "d84ccaec-ff2c-44b2-97da-80b5ea47a069",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/59922e2e_screen-shot-2017-08-14-at-4.10.54-pm/screen-shot-2017-08-14-at-4.10.54-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d84ccaec-ff2c-44b2-97da-80b5ea47a069",
              "caption": "",
              "alt": null,
              "width": 1479,
              "height": 638,
              "instructor_notes": null
            },
            {
              "id": 403661,
              "key": "82e27548-bd14-4d87-8e17-5eaeba9a59c2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " 生成的表格将如下所示：\n\n| **countryid**  | **countryName**  | **stateName**  | \n|--:|--:|---|\n| 1  | India   | Maharashtra  | \n| 1  | India | Punjab  | \n| 2  | Nepal  | Kathmandu  | \n| 3  | United States  | California  | \n| 3  | United States  | Texas  | \n| 4  | Canada  | Alberta  | ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 403730,
          "key": "e28e03da-aff8-4304-9910-6ae4d74c7a52",
          "title": "视频：JOIN 和过滤",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e28e03da-aff8-4304-9910-6ae4d74c7a52",
            "completed_at": "2019-02-06T01:52:34.716Z",
            "last_viewed_at": "2019-10-09T20:58:49.060Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403662,
              "key": "f770c117-073a-4c8e-9743-6bcf5e4044e6",
              "title": "JOIN 和过滤",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "aI1kbDDNs4w",
                "china_cdn_id": "aI1kbDDNs4w.mp4"
              }
            },
            {
              "id": 403663,
              "key": "28b702e8-0b6f-42e0-92fc-c62ee041b774",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n介绍一个简单的规则：当数据库执行该查询时，它先执行连接和 **ON** 条件中的指令。将其看做构建新的结果集，然后使用 **WHERE** 条件来过滤该结果集。\n\n这个示例是LEFT JOIN这一事实很重要。因为内连接仅返回两个表格中匹配的行，将此过滤器移到内连接的 **ON** 条件中将与使其保留在 **WHERE** 条件中产生的结果一样。\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 403731,
          "key": "2a249dad-12c9-45ea-87c2-70a7dd4a35b1",
          "title": "练习：最后的检测",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2a249dad-12c9-45ea-87c2-70a7dd4a35b1",
            "completed_at": "2019-02-06T01:56:36.425Z",
            "last_viewed_at": "2019-10-09T21:07:22.848Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403664,
              "key": "08c71300-eab5-4ffb-b51f-ded37b6216df",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/5991c52b_screen-shot-2017-08-02-at-11.14.25-am/screen-shot-2017-08-02-at-11.14.25-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/08c71300-eab5-4ffb-b51f-ded37b6216df",
              "caption": "",
              "alt": null,
              "width": 809,
              "height": 494,
              "instructor_notes": null
            },
            {
              "id": 403665,
              "key": "a774cbd1-5582-497c-b180-5fee07bf2736",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "建议使用以下环境练习你的查询，并将查询保存到文件中。然后将你的文件与下一页面中我的答案进行对比！\n\n# 问题\n\n1. 为每个**sales_rep**对应的**region**以及相关的**accounts**创建一个表格，这次仅针对 `Midwest` 区域。最终表格应该包含三列：区域**名称**、销售代表**姓名**，以及客户**名称**。根据客户名称按字母顺序 (A-Z) 排序。<br><br>\n2. 为每个**sales_rep**对应的**region**以及相关的**accounts**创建一个表格，这次仅针对 `Midwest` 区域，并且sales_rep的名字以 `S` 开头。最终表格应该包含三列：区域**名称**、销售代表**姓名**，以及客户**名称**。根据客户名称按字母顺序 (A-Z) 排序。<br><br>\n3. 为每个**sales_rep**对应的**region**以及相关的**accounts**创建一个表格，这次仅针对 `Midwest` 区域，并且sales_rep的姓以 `K` 开头。最终表格应该包含三列：区域**名称**、销售代表**姓名**，以及客户**名称**。根据客户名称按字母顺序 (A-Z) 排序。<br><br>\n4.  提供每个**订单**的区域**名称**，客户**名称**和所支付的**单价** (total_amt_usd/total)。但是，只针对**standard_qty**超过 `100` 的情况提供结果。最终表格应该包含三列：**区域名称**、**客户名称**和**单价**。为了避免除以 0 个订单，这里可以在分母上加上 0.01，即：(total_amt_usd/(total+0.01))。<br><br>\n5.  提供每个**订单**的区域**名称**，客户**名称**和所支付的**单价** (total_amt_usd/total)。但是，只针对**standard_qty**超过 `100` 且**poster_qty**超过 `50` 的情况提供结果。最终表格应该包含三列：**区域名称**、**客户名称**和**单价**。按照最低的**单价**在最之前排序。为了避免除以 0 个订单，这里可以在分母上加上 0.01，即：(total_amt_usd/(total+0.01))。<br><br>\n6.  提供每个**订单**的区域**名称**，客户**名称**和所支付的**单价** (total_amt_usd/total)。但是，只针对**standard_qty**超过 `100` 且**poster_qty**超过 `50` 的情况提供结果。最终表格应该包含三列：**区域名称**、**客户名称**和**单价**。按照最高的**单价**在最之前排序。为了避免除以 0 个订单，这里可以在分母上加上 0.01，即：(total_amt_usd/(total+0.01))。<br><br>\n7. **account id** 为 `1001` 的客户使用了哪些不同的**channel**。最终表格应该包含 2 列：**account**和不同的**channel**。你可以尝试使用 **SELECT DISTINCT** 使结果仅显示唯一的值。<br><br>\n8. 找出发生在 `2015` 年的所有订单。最终表格应该包含 4 列：**occurred_at**、**account name**、**order total** 和 **order total_amt_usd**。\n\n",
              "instructor_notes": ""
            },
            {
              "id": 403666,
              "key": "1fc71188-ffa2-4a8c-bd1d-09d518b067fe",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "viewa24f4820",
              "pool_id": "sqlwidget",
              "view_id": "0dccc13e-aec7-4307-b5b4-0214fb2d984a",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "frameBorder": "0"
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 403732,
          "key": "e12ccca0-1634-44a4-b34a-0344c07f3652",
          "title": "解决方案：最后的检测",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e12ccca0-1634-44a4-b34a-0344c07f3652",
            "completed_at": "2019-02-06T02:01:52.343Z",
            "last_viewed_at": "2019-10-09T21:07:28.887Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403667,
              "key": "6446126b-a94b-4efb-b465-b04761060188",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 解决方案\n\n1. 为每个**销售代表**对应的**区域**以及相关的**客户**创建一个表格，这次仅针对 `Midwest` 区域。最终表格应该包含三列：区域**名称**、销售代表**姓名**，以及客户**名称**。根据客户名称按字母顺序 (A-Z) 排序。\n```\nSELECT r.name region, s.name rep, a.name account\nFROM sales_reps s\nJOIN region r\nON s.region_id = r.id\nJOIN accounts a\nON a.sales_rep_id = s.id\nWHERE r.name = 'Midwest'\nORDER BY a.name;\n```\n2. 为每个**销售代表**对应的**区域**以及相关的**客户**创建一个表格，这次仅针对 `Midwest` 区域，并且销售代表的名字以 `S` 开头。最终表格应该包含三列：区域**名称**、销售代表**姓名**，以及客户**名称**。根据客户名称按字母顺序 (A-Z) 排序。\n```\nSELECT r.name region, s.name rep, a.name account\nFROM sales_reps s\nJOIN region r\nON s.region_id = r.id\nJOIN accounts a\nON a.sales_rep_id = s.id\nWHERE r.name = 'Midwest' AND s.name LIKE 'S%'\nORDER BY a.name;\n```\n3. 为每个**销售代表**对应的**区域**以及相关的**客户**创建一个表格，这次仅针对 `Midwest` 区域，并且销售代表的姓以 `K` 开头。最终表格应该包含三列：区域**名称**、销售代表**姓名**，以及客户**名称**。根据客户名称按字母顺序 (A-Z) 排序。\n```\nSELECT r.name region, s.name rep, a.name account\nFROM sales_reps s\nJOIN region r\nON s.region_id = r.id\nJOIN accounts a\nON a.sales_rep_id = s.id\nWHERE r.name = 'Midwest' AND s.name LIKE '% K%'\nORDER BY a.name;\n```\n4.  提供每个**订单**的每个区域的**名称**，以及客户**名称**和所支付的**单价** (total_amt_usd/total)。但是，只针对**标准订单数量**超过 `100` 的情况提供结果。最终表格应该包含三列：**区域名称**、**客户名称**和**单价**。为了避免除以 0 个订单，这里可以在分母上加上 0.01，即：(total_amt_usd/(total+0.01))。\n```\nSELECT r.name region, a.name account, o.total_amt_usd/(o.total + 0.01) unit_price\nFROM region r\nJOIN sales_reps s\nON s.region_id = r.id\nJOIN accounts a\nON a.sales_rep_id = s.id\nJOIN orders o\nON o.account_id = a.id\nWHERE o.standard_qty > 100;\n```\n5.  提供每个**订单**的每个区域的**名称**，以及客户**名称**和所支付的**单价** (total_amt_usd/total)。但是，只针对**标准订单数量**超过 `100` 且**广告纸数量**超过 `50` 的情况提供结果。最终表格应该包含三列：**区域名称**、**客户名称**和**单价**。按照最低的**单价**在最之前排序。为了避免除以 0 个订单，这里可以在分母上加上 0.01，即：(total_amt_usd/(total+0.01))。\n```\nSELECT r.name region, a.name account, o.total_amt_usd/(o.total + 0.01) unit_price\nFROM region r\nJOIN sales_reps s\nON s.region_id = r.id\nJOIN accounts a\nON a.sales_rep_id = s.id\nJOIN orders o\nON o.account_id = a.id\nWHERE o.standard_qty > 100 AND o.poster_qty > 50\nORDER BY unit_price;\n```\n6.  提供每个**订单**的每个区域的**名称**，以及客户**名称**和所支付的**单价** (total_amt_usd/total)。但是，只针对**标准订单数量**超过 `100` 且**广告纸数量**超过 `50` 的情况提供结果。最终表格应该包含三列：**区域名称**、**客户名称**和**单价**。按照最高的**单价**在最之前排序。为了避免除以 0 个订单，这里可以在分母上加上 0.01，即：(total_amt_usd/(total+0.01))。\n```\nSELECT r.name region, a.name account, o.total_amt_usd/(o.total + 0.01) unit_price\nFROM region r\nJOIN sales_reps s\nON s.region_id = r.id\nJOIN accounts a\nON a.sales_rep_id = s.id\nJOIN orders o\nON o.account_id = a.id\nWHERE o.standard_qty > 100 AND o.poster_qty > 50\nORDER BY unit_price DESC;\n```\n\n7. **account id** 为 `1001` 的客户使用了哪些不同的**渠道**。最终表格应该包含 2 列：**客户名称**和不同的**渠道**。你可以尝试使用 **SELECT DISTINCT** 使结果仅显示唯一的值。\n```\nSELECT DISTINCT a.name, w.channel\nFROM accounts a\nJOIN web_events w\nON a.id = w.account_id\nWHERE a.id = '1001';\n```\n8. 找出发生在 `2015` 年的所有订单。最终表格应该包含 4 列：**occurred_at**、**account name**、**order total** 和 **order total_amt_usd**。\n```\nSELECT w.occurred_at, a.name, o.total, o.total_amt_usd\nFROM accounts a\nJOIN orders o\nON o.account_id = a.id\nJOIN web_events w\nON a.id = w.account_id\nWHERE w.occurred_at BETWEEN '01-01-2015' AND '01-01-2016'\nORDER BY w.occurred_at DESC;\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 403733,
          "key": "f0e65adc-db97-4a50-937d-0d393828f2c8",
          "title": "文本：总结和后续内容",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f0e65adc-db97-4a50-937d-0d393828f2c8",
            "completed_at": "2019-02-06T02:04:11.898Z",
            "last_viewed_at": "2019-10-09T21:07:54.939Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 403668,
              "key": "0b5efde8-08e4-45bb-9823-b06ec1eb4345",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 总结\n\n### 主键和外键\n\n你学习了在连接数据库中的表格时与主键和外键相关的关键要素：\n\n* **主键** - 对于表格中的每行都是唯一的。主键通常是数据库中的第一列（就像 Parch & Posey 数据库中每个表格的 **id** 列）。\n\n* **外键** - 是出现在另一个表格中的**主键**，允许行不是唯一的行。\n\n数据库的数据设置非常重要，但通常不是数据分析师的职责。这一过程称为**数据库规范化**。\n\n### JOIN\n\n在这节课，你学习了如何使用 **JOIN** 组合多个表格的数据。你将最常用到的三个 **JOIN** 语句为：\n\n1. **JOIN** - 一种 **INNER JOIN**，仅获取在两个表格中都存在的数据。\n2. **LEFT JOIN** - 用于获取 **FROM** 中的表格中的所有行，即使它们不存在于 **JOIN** 语句中。\n3. **RIGHT JOIN** - 用于获取 **JOIN** 中的表格中的所有行，即使它们不存在于 **FROM** 语句中。\n\n还有几个没有讲解的高级 **JOIN**，它们仅适用于非常特定的情况。[UNION 和 UNION ALL](http://www.sqlservertutorial.net/sql-server-basics/sql-server-union/)、[CROSS JOIN](http://www.sqlservertutorial.net/sql-server-basics/sql-server-cross-join/) 和比较难的 [SELF JOIN](http://www.sqlservertutorial.net/sql-server-basics/sql-server-self-join/)。这些内容比较深奥，这门课程不会再过多介绍，但是有必要知道这些连接方法是存在的，它们在特殊情况下比较实用。\n\n### 别名\n\n你学习了可以使用 **AS** 或直接对表格和列设定别名。这样可以减少要输入的字符数，同时确保列标题可以描述表格中的数据。\n\n# 后续内容\n\n下节课的主题是**聚合**数据。你已经学到了很多知识，但是可能依然觉得 **SQL** 与**统计学**和使用 **Excel** 等平台不太相关。聚合函数将使你能够编写更复杂的 SQL 查询，并回答以下等问题：\n\n* 哪个**渠道**产生的收入更高？\n* 哪个**客户**具有商品量最多的订单？\n* 哪个**销售代表**的订单量最多？或订单量最少？他们有多少订单？\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}