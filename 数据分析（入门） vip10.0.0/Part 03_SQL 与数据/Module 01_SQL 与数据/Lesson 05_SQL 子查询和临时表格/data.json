{
  "data": {
    "lesson": {
      "id": 432157,
      "key": "b50a9cfd-566a-4b42-bf4f-70081b557c0b",
      "title": "SQL 子查询和临时表格",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "zh-cn",
      "summary": "在本课中，你会学习使用子查询来回答更加复杂的商业问题。",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/b50a9cfd-566a-4b42-bf4f-70081b557c0b/432157/1544466305709/SQL+%E5%AD%90%E6%9F%A5%E8%AF%A2%E5%92%8C%E4%B8%B4%E6%97%B6%E8%A1%A8%E6%A0%BC+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/b50a9cfd-566a-4b42-bf4f-70081b557c0b/432157/1544466302016/SQL+%E5%AD%90%E6%9F%A5%E8%AF%A2%E5%92%8C%E4%B8%B4%E6%97%B6%E8%A1%A8%E6%A0%BC+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 432125,
          "key": "b53dc474-19a9-4969-8fdf-5d1f164b18ff",
          "title": "视频： 简介",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b53dc474-19a9-4969-8fdf-5d1f164b18ff",
            "completed_at": "2019-02-05T07:04:21.991Z",
            "last_viewed_at": "2019-10-09T21:42:43.927Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432023,
              "key": "df634d45-9177-4300-b609-2ae32712c8ab",
              "title": "简介",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "2Y279421n3A",
                "china_cdn_id": "2Y279421n3A.mp4"
              }
            },
            {
              "id": 432024,
              "key": "7b5ce799-6f24-4adf-bf60-0f477a6b4a79",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 关于这节课的内容\n\n到目前为止，你已经学习了如何使用 SQL 处理数据的大量知识。这节课将重点讲解以下三项内容：\n\n1. 子查询\n2. 表格表达式\n3. 持久衍生表格\n\n___\n\n**子查询**和**表格表达式**都是用来通过查询创建一个表格，然后再编写一个查询来与这个新创建的表格进行互动。有时候，你要回答的问题无法通过直接处理数据库中的现有表格获得答案。   \n\n但是，如果我们能通过现有的表格创建新的表格，我们就能查询这些新的表格，并回答我们的问题。这节课的查询就可以实现这一目的。  \n\n如果你暂时想不出需要此类 SQL 的问题，别担心，你之后会见到大量类似的问题！",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432126,
          "key": "125cd218-c091-452f-a942-57b88479b9a6",
          "title": "视频： 子查询简介",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "125cd218-c091-452f-a942-57b88479b9a6",
            "completed_at": "2019-02-06T05:02:29.374Z",
            "last_viewed_at": "2019-10-10T00:42:59.309Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432025,
              "key": "fe4a191f-5044-4944-ad71-ce31d8fadb52",
              "title": "子查询简介",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "s8ZJMj4gscY",
                "china_cdn_id": "s8ZJMj4gscY.mp4"
              }
            },
            {
              "id": 432027,
              "key": "06070fa3-9651-43ee-9930-c9e787142bad",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "‘每当我们需要使用现有表格创建新的表格，然后需要再次查询时，就表明我们需要使用某种**子查询**。在以下几个页面中，我们将一起看一个示例。然后你将自己解答一些问题，练习巩固相关技能。’",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432127,
          "key": "1e2056cd-eae2-4ef4-860a-a11077b71db8",
          "title": "视频 + 练习：编写你的首个子查询",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1e2056cd-eae2-4ef4-860a-a11077b71db8",
            "completed_at": "2019-02-06T05:10:45.617Z",
            "last_viewed_at": "2019-10-10T00:43:36.276Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432028,
              "key": "b6d74195-44c2-41f9-833c-9e4216e26588",
              "title": "你的首个子查询",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "cTM1jPYXLoQ",
                "china_cdn_id": "cTM1jPYXLoQ.mp4"
              }
            },
            {
              "id": 432029,
              "key": "f0ae87a7-c8c0-41a5-8500-b81a11743ccf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 你的首个子查询\n\n当你第一次编写子查询时，可能会显得很复杂。我们尝试将子查询分解成几个不同的部分。  \n\n如果你遇到问题，请重新观看上述视频。我们想要算出每个渠道每天的平均事件次数。第一个表格将提供每个渠道每天的事件次数，然后我们将使用第二个查询对这些值求平均。\n\n请你尝试自己解答这个问题。",
              "instructor_notes": ""
            },
            {
              "id": 432030,
              "key": "b16a8055-bea8-493b-b2d1-6aac3aeca0a6",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b16a8055-bea8-493b-b2d1-6aac3aeca0a6",
                "completed_at": "2019-02-06T05:12:05.813Z",
                "last_viewed_at": "2019-02-12T11:03:08.677Z",
                "unstructured": "{\"selected_ids\":[0,1,2]}"
              },
              "tasks": [
                "使用下面的练习环境算出每个渠道每天的事件发生次数。",
                "练习 1",
                "现在创建一个子查询，只是用来提供第一个查询中的所有数据。",
                "练习 2",
                "‘现在算出每个渠道的事件平均数。因为之前已经按天划分，因此就是每天的平均数。’",
                "练习 3"
              ],
              "positive_feedback": "很棒！了解如何在一个查询中嵌套另一个查询很关键，它可以回答用关系数据库存储数据的公司面临的很多问题。",
              "video_feedback": null,
              "description": "待完成任务"
            },
            {
              "id": 432031,
              "key": "07bcf5de-09de-4e0f-897d-7ea1ef776a47",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view73dba123",
              "pool_id": "sqlwidget",
              "view_id": "73dba123-4a24-44d1-b9cb-cf6226e406bd",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "frameBorder": "0"
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 432032,
              "key": "2077b970-31df-4880-bbd5-c95ab8261cbb",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2077b970-31df-4880-bbd5-c95ab8261cbb",
                "completed_at": "2019-02-06T05:12:20.267Z",
                "last_viewed_at": "2019-02-12T11:02:18.318Z",
                "unstructured": "{\"selected_ids\":[\"a1505946676759\",\"a1505946835747\"],\"is_correct\":true}"
              },
              "question": {
                "prompt": "### 练习 1\n\n在哪个日期-渠道对中发生的事件最多？（选择所有正确的选项）",
                "answers": [
                  {
                    "id": "a1505946676759",
                    "text": "2017 年 1 月 1 日；直接渠道",
                    "is_correct": true
                  },
                  {
                    "id": "a1505946822841",
                    "text": "2016 年 12 月 31 日；facebook",
                    "is_correct": false
                  },
                  {
                    "id": "a1505946834945",
                    "text": "2016 年 11 月 3 日；直接渠道",
                    "is_correct": false
                  },
                  {
                    "id": "a1505946835747",
                    "text": "2016 年 12 月 21 日；直接渠道",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 432033,
              "key": "b32f9cb1-eb81-4d62-8916-cf850b981717",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b32f9cb1-eb81-4d62-8916-cf850b981717",
                "completed_at": "2019-02-06T05:13:37.779Z",
                "last_viewed_at": "2019-02-12T11:03:30.931Z",
                "unstructured": "{\"selected_ids\":[\"a1505947140879\",\"a1505947544506\",\"a1505947584030\"],\"is_correct\":true}"
              },
              "question": {
                "prompt": "### 练习 2\n\n标出以下所有关于编写子查询的正确描述。",
                "answers": [
                  {
                    "id": "a1505947140879",
                    "text": "原始查询位于 **FROM** 语句中。",
                    "is_correct": true
                  },
                  {
                    "id": "a1505947532354",
                    "text": "原始查询位于 **SELECT** 语句中。",
                    "is_correct": false
                  },
                  {
                    "id": "a1505947544506",
                    "text": "在 **SELECT** 语句中使用了 `*`，以便从原始查询中获取所有数据。",
                    "is_correct": true
                  },
                  {
                    "id": "a1505947584030",
                    "text": "必须对嵌套在外部查询中的表格使用别名。",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 432034,
              "key": "4c0e459f-7cb6-46d1-b122-86c8f2680619",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4c0e459f-7cb6-46d1-b122-86c8f2680619",
                "completed_at": "2019-02-12T11:05:35.138Z",
                "last_viewed_at": "2019-02-12T11:06:16.701Z",
                "unstructured": "{\"answer_ids\":[\"a1505959047580\",\"a1505959244950\",\"a1505959249245\",\"a1505959254298\"],\"is_correct\":true}"
              },
              "question": {
                "complex_prompt": {
                  "text": "将每个渠道与相应的每日平均事件数相匹配。"
                },
                "concepts_label": "渠道",
                "answers_label": "平均事件/日期数",
                "concepts": [
                  {
                    "text": "direct",
                    "correct_answer": {
                      "id": "a1505959047580",
                      "text": "4.90"
                    }
                  },
                  {
                    "text": "facebook",
                    "correct_answer": {
                      "id": "a1505959244950",
                      "text": "1.60"
                    }
                  },
                  {
                    "text": "organic",
                    "correct_answer": {
                      "id": "a1505959249245",
                      "text": "1.67"
                    }
                  },
                  {
                    "text": "twitter",
                    "correct_answer": {
                      "id": "a1505959254298",
                      "text": "1.32"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1505959254298",
                    "text": "1.32"
                  },
                  {
                    "id": "a1505959244950",
                    "text": "1.60"
                  },
                  {
                    "id": "a1505959249245",
                    "text": "1.67"
                  },
                  {
                    "id": "a1505959047580",
                    "text": "4.90"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 432129,
          "key": "3201ff48-00d9-4fdf-b3d6-e32e59809358",
          "title": "解决方案：编写你的首个子查询",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3201ff48-00d9-4fdf-b3d6-e32e59809358",
            "completed_at": "2019-02-06T05:16:06.670Z",
            "last_viewed_at": "2019-10-10T00:59:22.421Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432035,
              "key": "3fa736a1-c9a1-4eff-8483-0ba1646b6721",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 你的首个子查询解决方案\n\n1.  首先，我们需要按照日期和渠道分组。然后按事件数（第三列）排序，这样可以快速得出第一个问题的答案。\n```\nSELECT DATE_TRUNC('day',occurred_at) AS day,\nchannel, COUNT(*) as events\nFROM web_events\nGROUP BY 1,2\nORDER BY 3 DESC;\n```\n2.   可以看出，要获得这一结果，提供了整个原始表格。查询的附加部分包括 `*`，并且我们需要为表格设置别名。此外，是在 **SELECT** 语句中（而不是 **FROM**）中提供表格。\n```\nSELECT *\nFROM (SELECT DATE_TRUNC('day',occurred_at) AS day,\nchannel, COUNT(*) as events\nFROM web_events\nGROUP BY 1,2\nORDER BY 3 DESC) sub;\n```\n3. 最后，我们在以下语句中能够获得显示每个渠道一天的平均事件数的表格。\n```\nSELECT channel, AVG(events) AS average_events\nFROM (SELECT DATE_TRUNC('day',occurred_at) AS day,\nchannel, COUNT(*) as events\nFROM web_events\nGROUP BY 1,2) sub\nGROUP BY channel\nORDER BY 2 DESC;\n```\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432128,
          "key": "916b3293-96a4-4f8a-a7ff-022741c84c7a",
          "title": "文本：子查询格式",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "916b3293-96a4-4f8a-a7ff-022741c84c7a",
            "completed_at": "2019-02-06T05:20:34.856Z",
            "last_viewed_at": "2019-10-10T01:02:20.597Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432036,
              "key": "c958e255-878d-4d76-980a-ab454baa26c0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 子查询格式\n\n在编写**子查询**时，查询很容易就看起来很复杂。为了便于阅读，其实日后经常只是你自己要阅读：\n\n要记住的重要事项是，在使用子查询时，要让读者能够轻松地判断查询的哪个部分将一起执行。大部分人的做法是按照某种方式缩进子查询，上一页面的解决方案就是这么做的。\n\n这节课的示例缩进很明显，一直到小括号。如果你嵌套了很多的子查询，则不适用，一般法则就是思考下如何以便于阅读的方式编写查询。下面给出了以多种方式编写同一查询的示例。你会发现，某些示例明显比其他的容易阅读。\n_____\n### 格式糟糕的查询\n\n虽然这些格式糟糕的查询和格式清晰的查询一样会执行，但是却不容易让人理解查询的作用！\n\n以下是第一个示例，根本无法判断查询的作用：\n\n```\nSELECT * FROM (SELECT DATE_TRUNC('day',occurred_at) AS day, channel, COUNT(*) as events FROM web_events GROUP BY 1,2 ORDER BY 3 DESC) sub;\n```\n下面的第二个示例不是太糟糕，但是你会发现最后一个示例依然更容易读懂。\n\n```\nSELECT *\nFROM (\nSELECT DATE_TRUNC('day',occurred_at) AS day,\nchannel, COUNT(*) as events\nFROM web_events\nGROUP BY 1,2\nORDER BY 3 DESC) sub;\n```\n\n_____\n### 格式清晰的查询\n\n与之前的示例相比，在这个格式清晰的示例中，我们很容易就看出要从哪个表格中获取数据。此外，如果在子查询后面有 **GROUP BY**、**ORDER BY**、**WHERE**、**HAVING** 或任何其他语句，则按照外部查询的同一级别缩进，正如最后一个示例所显示的，它是上个练习的最后一个解决方案。\n\n```\nSELECT *\nFROM (SELECT DATE_TRUNC('day',occurred_at) AS day,\n                channel, COUNT(*) as events\n      FROM web_events \n      GROUP BY 1,2\n      ORDER BY 3 DESC) sub;\n```\n下面的查询很相似，但是向外部查询应用了其他逻辑，因此按照外部查询的级别缩进。而内部查询逻辑的缩进级别与内部表格匹配。\n\n```\nSELECT *\nFROM (SELECT DATE_TRUNC('day',occurred_at) AS day,\n                channel, COUNT(*) as events\n      FROM web_events \n      GROUP BY 1,2\n      ORDER BY 3 DESC) sub\nGROUP BY channel\nORDER BY 2 DESC;\n```\n最后两个查询容易读懂多了！\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432130,
          "key": "f696f544-3daf-4e5b-82f3-824300a8205e",
          "title": "视频： 关于子查询的更多内容",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f696f544-3daf-4e5b-82f3-824300a8205e",
            "completed_at": "2019-02-06T05:22:18.087Z",
            "last_viewed_at": "2019-10-10T01:04:27.150Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432037,
              "key": "96704cc5-7474-43d0-b08b-6abfc38efd69",
              "title": "子查询（第二部分）",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "jko-RrZd0R8",
                "china_cdn_id": "jko-RrZd0R8.mp4"
              }
            },
            {
              "id": 432038,
              "key": "d8ffd747-df40-4d1f-8aca-d85c94a1b2f9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 子查询（第二部分）\n\n在你写的第一个子查询中，你编写了一个子查询来创建表格，然后可以在 **FROM** 语句中查询该表格。但是，如果只返回一个值，则可以在逻辑语句中使用该值，例如 **WHERE**、**HAVING**，甚至 **SELECT**，该值可以嵌套在 **CASE** 语句中。\n\n在下一页面中，我们将讲解这个示例，然后你将尝试自己回答一些问题。\n",
              "instructor_notes": ""
            },
            {
              "id": 432039,
              "key": "eadb05bb-d6a2-4481-a0b3-98d70b90da63",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 专家提示\n\n注意，在条件语句中编写子查询时，不能包含别名。这是因为该子查询会被当做单个值（或者对于 **IN** 情况是一组值），而不是一个表格。\n\n同时注意，这里的查询对应的是单个值。如果我们返回了整个列，则需要使用 **IN** 来执行逻辑参数。如果我们要返回整个表格，则必须为该表格使用**别名**，并对整个表格执行其他逻辑。\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432131,
          "key": "6b531825-26f7-453c-a1f7-219c7842b446",
          "title": "练习：关于子查询的更多内容",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6b531825-26f7-453c-a1f7-219c7842b446",
            "completed_at": "2019-02-06T05:25:36.943Z",
            "last_viewed_at": "2019-07-31T13:38:12.354Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432040,
              "key": "ead5df08-1442-4107-ada9-d41cbfc30ead",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 练习：逐步了解上个视频\n\n使用下面的任务列表来逐步了解上个示例的步骤。",
              "instructor_notes": ""
            },
            {
              "id": 432041,
              "key": "e774f513-24b1-4d17-9fdf-6d0e5611870f",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e774f513-24b1-4d17-9fdf-6d0e5611870f",
                "completed_at": "2019-02-06T05:25:41.162Z",
                "last_viewed_at": "2019-02-13T01:26:18.304Z",
                "unstructured": "{\"selected_ids\":[3,2,0]}"
              },
              "tasks": [
                "使用 **DATE_TRUNC** 获取在 **orders** 表格中所下的第一个订单的 `month` 信息。",
                "练习 1",
                "使用上个查询的结果来查找仅与第一个订单的发生年月相同的订单。",
                "练习 2"
              ],
              "positive_feedback": "很棒！你可以在下一页面看到查询的答案，接下来还有一些练习，帮助你完全掌握子查询！",
              "video_feedback": null,
              "description": "Tasks to complete:"
            },
            {
              "id": 432045,
              "key": "5460e82e-b2d2-4d9e-ad27-027b333a9458",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view73dba123",
              "pool_id": "sqlwidget",
              "view_id": "cf762e3c-2cb0-4f7b-a4d5-c2aeb25f50b9",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "frameBorder": "0"
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 432043,
              "key": "379971f3-b4ba-4048-9512-dff8b7e2f7e0",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "379971f3-b4ba-4048-9512-dff8b7e2f7e0",
                "completed_at": "2019-02-06T05:25:57.421Z",
                "last_viewed_at": "2019-02-13T01:36:26.859Z",
                "unstructured": "{\"selected_id\":\"a1506017337421\",\"is_correct\":true}"
              },
              "question": {
                "prompt": "第一个订单是在哪年/月下的？",
                "answers": [
                  {
                    "id": "a1506017297142",
                    "text": "2011 年 10 月",
                    "is_correct": false
                  },
                  {
                    "id": "a1506017329838",
                    "text": "2012 年 10 月",
                    "is_correct": false
                  },
                  {
                    "id": "a1506017337421",
                    "text": "2013 年 12 月",
                    "is_correct": true
                  },
                  {
                    "id": "a1506017343644",
                    "text": "2013 年 11 月",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 432044,
              "key": "e13cc0e5-ec90-47fa-bfa1-0259aca18d45",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e13cc0e5-ec90-47fa-bfa1-0259aca18d45",
                "completed_at": "2019-02-13T01:44:37.972Z",
                "last_viewed_at": "2019-02-13T01:44:37.972Z",
                "unstructured": "{\"answer_ids\":[\"a1506019645537\",\"a1506019674441\",\"a1506019675703\",\"a1506019765719\"],\"is_correct\":true}"
              },
              "question": {
                "complex_prompt": {
                  "text": "将每个值与相应的说明相匹配。"
                },
                "concepts_label": "说明",
                "answers_label": "值",
                "concepts": [
                  {
                    "text": "在 **orders** 表格中第一个月下订单时所出售的标准纸张的平均数量。",
                    "correct_answer": {
                      "id": "a1506019645537",
                      "text": "268"
                    }
                  },
                  {
                    "text": "在 **orders** 表格中第一个月下订单时所出售的铜版纸的平均数量。",
                    "correct_answer": {
                      "id": "a1506019674441",
                      "text": "209"
                    }
                  },
                  {
                    "text": "在 **orders** 表格中第一个月下订单时所出售的广告纸的平均数量。",
                    "correct_answer": {
                      "id": "a1506019675703",
                      "text": "112"
                    }
                  },
                  {
                    "text": "在 **orders** 表格中第一个月下订单时在所有订单上的总消费。",
                    "correct_answer": {
                      "id": "a1506019765719",
                      "text": "377331"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1506019765719",
                    "text": "377331"
                  },
                  {
                    "id": "a1506019675703",
                    "text": "112"
                  },
                  {
                    "id": "a1506019674441",
                    "text": "209"
                  },
                  {
                    "id": "a1506019645537",
                    "text": "268"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 432132,
          "key": "b3556581-c309-4af3-9926-a0677be9f31f",
          "title": "解决方案：关于子查询的更多内容",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b3556581-c309-4af3-9926-a0677be9f31f",
            "completed_at": "2019-02-06T05:28:17.699Z",
            "last_viewed_at": "2019-07-31T13:39:43.057Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432046,
              "key": "114cb2c0-ec72-4492-b03e-18b58b63d12c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 需要回答上一个练习的查询\n\n1. 以下是从 orders 表格中获取第一个订单的年/月信息的查询。\n```\nSELECT DATE_TRUNC('month', MIN(occurred_at))\nFROM orders;\n```\n\n2. 然后，为了获取每个订单的平均值，我们可以在一个查询中执行所有的任务。但是为了便于阅读，我在下面提供了两个查询，单独执行每一步。\n\n```\nSELECT AVG(standard_qty) avg_std, AVG(gloss_qty) avg_gls, AVG(poster_qty) avg_pst\nFROM orders\nWHERE DATE_TRUNC('month', occurred_at) =\n(SELECT DATE_TRUNC('month', MIN(occurred_at)) FROM orders);\n\nSELECT SUM(total_amt_usd)\nFROM orders\nWHERE DATE_TRUNC('month', occurred_at) =\n(SELECT DATE_TRUNC('month', MIN(occurred_at)) FROM orders);\n```\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432133,
          "key": "a4ea6477-dbb6-4890-ac82-ad19f60cc3c5",
          "title": "练习：爱上子查询",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a4ea6477-dbb6-4890-ac82-ad19f60cc3c5",
            "completed_at": "2019-02-06T05:33:09.768Z",
            "last_viewed_at": "2019-07-31T13:39:45.253Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432047,
              "key": "5f7d3698-0c46-41d4-a8e8-a2ab0fa77ae7",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/5991c52b_screen-shot-2017-08-02-at-11.14.25-am/screen-shot-2017-08-02-at-11.14.25-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5f7d3698-0c46-41d4-a8e8-a2ab0fa77ae7",
              "caption": "",
              "alt": "",
              "width": 809,
              "height": 494,
              "instructor_notes": null
            },
            {
              "id": 432051,
              "key": "ac021512-0a39-4333-b741-708263910fa5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 更多的子查询练习\n\n以上是数据库的 ERD，当你处理下面的练习时，可能会用到该 ERD。你应该将答案写成子查询，而不是得出一个答案并复制输出。这么做的重要性是能够让查询动态地回答问题，即使数据变化了，依然能获得正确的答案。\n\n1. 提供每个**区域**销售额 (**total_amt_usd**) 最高的**销售代表**的**姓名**。<br><br>\n\n2. 对于具有最高销售额 (**total_amt_usd**) 的区域，总共下了多少个订单 （**total** count orders） ？<br><br>\n\n3.  对于购买标准纸张数量 (**standard_qty**) 最多的客户（在作为客户的整个时期内），**有多少客户**的购买总数依然更多？<br><br>\n\n4. 对于（在作为客户的整个时期内）总消费 (**total_amt_usd**) 最多的客户，他们在每个渠道上有多少 **web_events**？<br><br>\n\n5. 对于总消费前十名的客户，他们的平均终身消费 (**total_amt_usd**) 是多少?<br><br>\n\n6. 比客户的平均每订单消费高的企业，它们的平均终身消费 (**total_amt_usd**) 是多少？\n",
              "instructor_notes": ""
            },
            {
              "id": 432052,
              "key": "90e72cd5-971e-4b20-87ef-c1d12f04655c",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view73dba123",
              "pool_id": "sqlwidget",
              "view_id": "41803e80-6078-4215-b266-3965ba1be50e",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "frameBorder": "0"
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 432134,
          "key": "068e64fb-f86a-4933-b937-fbc94f366851",
          "title": "解决方案：爱上子查询",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "068e64fb-f86a-4933-b937-fbc94f366851",
            "completed_at": "2019-02-06T05:35:20.004Z",
            "last_viewed_at": "2019-07-31T13:40:24.243Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432053,
              "key": "e3ae797f-ba96-4bda-986b-9093ece426c1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "以下视频演示了解决第一个问题的步骤。每个问题答案都以文本的形式显示在下面。",
              "instructor_notes": ""
            },
            {
              "id": 432055,
              "key": "b3659a09-8b27-4a59-90b5-e41587a44c58",
              "title": "子查询解决方案",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Y6S3S0LsMrw",
                "china_cdn_id": "Y6S3S0LsMrw.mp4"
              }
            },
            {
              "id": 432054,
              "key": "b27171c4-0eed-4a08-b8d6-443bf62cb0b5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 解决方案：爱上子查询\n\n1. 提供每个**区域**拥有最高销售额 (**total_amt_usd**) 的**销售代表**的**姓名**。<br><br>\n首先，我要算出与每个**销售代表**相关的总销售额 (**total_amt_usd**)，并且要得出他们所在的区域。以下查询提供了这一信息。\n```\nSELECT s.name rep_name, r.name region_name, SUM(o.total_amt_usd) total_amt\nFROM sales_reps s\nJOIN accounts a\nON a.sales_rep_id = s.id\nJOIN orders o\nON o.account_id = a.id\nJOIN region r\nON r.id = s.region_id\nGROUP BY 1,2\nORDER BY 3 DESC;\n```\n接着，得出每个区域的最高销售额，然后使用该信息从最终结果中获取这些行。\n```\nSELECT region_name, MAX(total_amt) total_amt\nFROM(SELECT s.name rep_name, r.name region_name, SUM(o.total_amt_usd) total_amt\nFROM sales_reps s\nJOIN accounts a\nON a.sales_rep_id = s.id\nJOIN orders o\nON o.account_id = a.id\nJOIN region r\nON r.id = s.region_id\nGROUP BY 1, 2) inner1\nGROUP BY 1;\n```\n本质上，这是两个表格的**连接**，其中区域和销售额相匹配。\n```\nSELECT t1.rep_name, t1.region_name, t1.total_amt\nFROM(SELECT s.name rep_name, r.name region_name, SUM(o.total_amt_usd) total_amt\nFROM sales_reps s\nJOIN accounts a\nON a.sales_rep_id = s.id\nJOIN orders o\nON o.account_id = a.id\nJOIN region r\nON r.id = s.region_id\nGROUP BY 1,2\nORDER BY 3 DESC) t1\nJOIN (SELECT region_name, MAX(total_amt) total_amt\nFROM(SELECT s.name rep_name, r.name region_name, SUM(o.total_amt_usd) total_amt\nFROM sales_reps s\nJOIN accounts a\nON a.sales_rep_id = s.id\nJOIN orders o\nON o.account_id = a.id\nJOIN region r\nON r.id = s.region_id\nGROUP BY 1, 2) inner1\nGROUP BY 1) t2\nON t1.region_name = t2.region_name AND t1.total_amt = t2.total_amt;\n```\n2. 对于具有最高销售额 (**total_amt_usd**) 的区域，总共下了多少个订单？<br><br>\n我写的第一个查询是获取每个**区域**的 **total_amt_usd**。\n```\nSELECT r.name region_name, SUM(o.total_amt_usd) total_amt\nFROM sales_reps s\nJOIN accounts a\nON a.sales_rep_id = s.id\nJOIN orders o\nON o.account_id = a.id\nJOIN region r\nON r.id = s.region_id\nGROUP BY r.name;\n```\n然后，我们仅从该表格中获取销售额最高的区域。可以通过两种方法来获取，一种是使用子查询后的最大值，另一种是按降序排序，然后获取最高值。\n```\nSELECT MAX(total_amt)\nFROM (SELECT r.name region_name, SUM(o.total_amt_usd) total_amt\nFROM sales_reps s\nJOIN accounts a\nON a.sales_rep_id = s.id\nJOIN orders o\nON o.account_id = a.id\nJOIN region r\nON r.id = s.region_id\nGROUP BY r.name) sub;\n```\n最终，我们要获取具有该区域销售额的总订单量：\n```\nSELECT r.name, SUM(o.total) total_orders\nFROM sales_reps s\nJOIN accounts a\nON a.sales_rep_id = s.id\nJOIN orders o\nON o.account_id = a.id\nJOIN region r\nON r.id = s.region_id\nGROUP BY r.name\nHAVING SUM(o.total_amt_usd) = (\nSELECT MAX(total_amt)\nFROM (SELECT r.name region_name, SUM(o.total_amt_usd) total_amt\nFROM sales_reps s\nJOIN accounts a\nON a.sales_rep_id = s.id\nJOIN orders o\nON o.account_id = a.id\nJOIN region r\nON r.id = s.region_id\nGROUP BY r.name) sub);\n```\n结果就是 **Northeast**，总订单为 **1230378** 个。<br><br>\n3.  对于购买标准纸张数量 (**standard_qty**) 最多的客户（在作为客户的整个时期内），**有多少客户**的购买总数依然更多？<br><br>\n首先，我们要得出购买标准纸张数量 (**standard_qty**) 最多的客户。以下查询获取了该客户，以及总消费：\n```\nSELECT a.name account_name, SUM(o.standard_qty) total_std, SUM(o.total) total\nFROM accounts a\nJOIN orders o\nON o.account_id = a.id\nGROUP BY 1\nORDER BY 2 DESC\nLIMIT 1;\n```\n现在，我将使用上述信息获取总消费更高的所有客户：\n```\nSELECT a.name\nFROM orders o\nJOIN accounts a\nON a.id = o.account_id\nGROUP BY 1\nHAVING SUM(o.total) > (SELECT total\nFROM (SELECT a.name act_name, SUM(o.standard_qty) tot_std, SUM(o.total) total\nFROM accounts a\nJOIN orders o\nON o.account_id = a.id\nGROUP BY 1\nORDER BY 2 DESC\nLIMIT 1) sub);\n```\n上述查询列出了具有更多订单的客户列表。我们还可以使用另一个简单的子查询获取数量。\n```\nSELECT COUNT(*)\nFROM (SELECT a.name\nFROM orders o\nJOIN accounts a\nON a.id = o.account_id\nGROUP BY 1\nHAVING SUM(o.total) > (SELECT total\nFROM (SELECT a.name act_name, SUM(o.standard_qty) tot_std, SUM(o.total) total\nFROM accounts a\nJOIN orders o\nON o.account_id = a.id\nGROUP BY 1\nORDER BY 2 DESC\nLIMIT 1) inner_tab)\n) counter_tab;\n```\n\n4. 对于（在作为客户的整个时期内）总消费 (**total_amt_usd**) 最多的客户，他们在每个渠道上有多少 **web_events**？<br><br>\n我们首先需要获取在整个客户时期内消费最多的客户。\n```\nSELECT a.id, a.name, SUM(o.total_amt_usd) tot_spent\nFROM orders o\nJOIN accounts a\nON a.id = o.account_id\nGROUP BY a.id, a.name\nORDER BY 3 DESC\nLIMIT 1;\n```\n现在，我们要获取该企业（可以使用 **id** 进行匹配）在每个渠道上的事件数。\n```\nSELECT a.name, w.channel, COUNT(*)\nFROM accounts a\nJOIN web_events w\nON a.id = w.account_id AND a.id =  (SELECT id\nFROM (SELECT a.id, a.name, SUM(o.total_amt_usd) tot_spent\nFROM orders o\nJOIN accounts a\nON a.id = o.account_id\nGROUP BY a.id, a.name\nORDER BY 3 DESC\nLIMIT 1) inner_table)\nGROUP BY 1, 2\nORDER BY 3 DESC;\n```\n我添加了 **ORDER BY**，其实并没特别的理由，并添加了客户名称，确保仅从一个客户那获取数据。<br><br>\n5. 对于总消费前十名的客户，他们的平均终身消费 (**total_amt_usd**) 是多少?<br><br>\n首先，我们需要找出总消费 (**total_amt_usd**) 在前十名的客户。\n```\nSELECT a.id, a.name, SUM(o.total_amt_usd) tot_spent\nFROM orders o\nJOIN accounts a\nON a.id = o.account_id\nGROUP BY a.id, a.name\nORDER BY 3 DESC\nLIMIT 10;\n```\n现在计算这十个客户的平均消费。\n```\nSELECT AVG(tot_spent)\nFROM (SELECT a.id, a.name, SUM(o.total_amt_usd) tot_spent\nFROM orders o\nJOIN accounts a\nON a.id = o.account_id\nGROUP BY a.id, a.name\nORDER BY 3 DESC\nLIMIT 10) temp;\n```\n<br>\n6. 比所有客户的平均消费高的企业平均终身消费 (**total_amt_usd**) 是多少？<br><br>\n首先，算出所有客户的总消费 (**total_amt_usd**) 平均值：\n```\nSELECT AVG(o.total_amt_usd) avg_all\nFROM orders o\nJOIN accounts a\nON a.id = o.account_id;\n```\n然后，只获取高于这一平均值的客户。\n```\nSELECT o.account_id, AVG(o.total_amt_usd)\nFROM orders o\nGROUP BY 1\nHAVING AVG(o.total_amt_usd) > (SELECT AVG(o.total_amt_usd) avg_all\nFROM orders o\nJOIN accounts a\nON a.id = o.account_id);\n```\n最后，算出这些值的平均值。\n```\nSELECT AVG(avg_amt)\nFROM (SELECT o.account_id, AVG(o.total_amt_usd) avg_amt\nFROM orders o\nGROUP BY 1\nHAVING AVG(o.total_amt_usd) > (SELECT AVG(o.total_amt_usd) avg_all\nFROM orders o\nJOIN accounts a\nON a.id = o.account_id)) temp_table;\n```\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432135,
          "key": "45018964-e64d-46a7-bd77-98bcae5854f1",
          "title": "视频： WITH",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "45018964-e64d-46a7-bd77-98bcae5854f1",
            "completed_at": "2019-02-06T05:38:12.699Z",
            "last_viewed_at": "2019-11-13T07:58:41.247Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432058,
              "key": "abcbf7b0-7aca-4243-aac8-80743b096b85",
              "title": "公用表表达式",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "qtEKO7B8bXQ",
                "china_cdn_id": "qtEKO7B8bXQ.mp4"
              }
            },
            {
              "id": 432057,
              "key": "ea6c2fda-f0a0-42c6-853d-7e474f9d95f0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**WITH** 语句经常称为**公用表表达式**（简称 **CTE**）。虽然这些表达式和子查询的目的完全一样，但是实际更常用，因为对未来的读者来说，更容易看懂其中的逻辑。\n\n在下一部分，我们将更仔细地讲解这个示例，确保你能了解子查询和这些表达式之间的相似性，并能运用到实践中！如果你已经了解这些内容，可以跳到练习部分。\n",
              "instructor_notes": ""
            },
            {
              "id": 432059,
              "key": "5864943f-9c88-4058-82e3-038d357cb531",
              "title": "Subqueries Using WITH",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "IszTmDKyKHI",
                "china_cdn_id": "IszTmDKyKHI.mp4"
              }
            }
          ]
        },
        {
          "id": 432136,
          "key": "e8d2e92f-de56-48c8-9812-68dfa5eaa1a9",
          "title": "文本 + 练习：WITH 与子查询",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e8d2e92f-de56-48c8-9812-68dfa5eaa1a9",
            "completed_at": "2019-02-06T05:43:05.928Z",
            "last_viewed_at": "2019-07-31T13:40:32.937Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432061,
              "key": "9287b3ac-1e0b-41ec-a9df-1cb227ebf934",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 你的第一个 WITH (CTE)\n\n下面是“你的第一个子查询”部分的问题和解决方案。\n\n\n**问题：**你需要算出每个渠道每天的平均事件数。\n\n**解决方案：**\n\n```\nSELECT channel, AVG(events) AS average_events\nFROM (SELECT DATE_TRUNC('day',occurred_at) AS day,\nchannel, COUNT(*) as events\nFROM web_events\nGROUP BY 1,2) sub\nGROUP BY channel\nORDER BY 2 DESC;\n```\n\n_______\n我们使用 **WITH** 语句重新编写查询。\n\n注意：你可以获取内部查询：\n\n```\nSELECT DATE_TRUNC('day',occurred_at) AS day,\nchannel, COUNT(*) as events\nFROM web_events\nGROUP BY 1,2\n```\n\n我们在此部分放入 **WITH** 语句。注意，在下面我们将表格的别名设为 `events`：\n\n```\nWITH events AS (\nSELECT DATE_TRUNC('day',occurred_at) AS day,\nchannel, COUNT(*) as events\nFROM web_events\nGROUP BY 1,2)\n```\n\n现在，我们可以像对待数据库中的任何其他表格一样使用这个新创建的 `events` 表格：\n\n```\nWITH events AS (\nSELECT DATE_TRUNC('day',occurred_at) AS day,\nchannel, COUNT(*) as events\nFROM web_events\nGROUP BY 1,2)\n\nSELECT channel, AVG(events) AS average_events\nFROM events\nGROUP BY channel\nORDER BY 2 DESC;\n```\n______\n\n对于上述示例，我们只需一个额外的表格，但是想象下我们要创建第二个表格来从中获取数据。我们可以按照以下方式来创建额外的表格并从中获取数据：\n\n```\nWITH table1 AS (\nSELECT *\nFROM web_events),\n\ntable2 AS (\nSELECT *\nFROM accounts)\n\n\nSELECT *\nFROM table1\nJOIN table2\nON table1.account_id = table2.id;\n```\n然后，你可以按照相同的方式使用 **WITH** 语句添加越来越多的表格。底部的练习将确保你掌握了这些新查询的所有必要组成部分。",
              "instructor_notes": ""
            },
            {
              "id": 432062,
              "key": "c3013942-4775-4c2f-9888-63076b7fd5f6",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view73dba123",
              "pool_id": "sqlwidget",
              "view_id": "6c6ac75d-ec6b-4027-9cba-6e649e152fc4",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "frameBorder": "0"
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 432063,
              "key": "0e488992-741b-4902-a99d-f25d84a99f24",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0e488992-741b-4902-a99d-f25d84a99f24",
                "completed_at": "2019-02-06T05:43:30.921Z",
                "last_viewed_at": "2019-02-13T09:53:52.157Z",
                "unstructured": "{\"selected_ids\":[\"a1506043956321\",\"a1506044320353\"],\"is_correct\":true}"
              },
              "question": {
                "prompt": "选中以下关于 **WITH** 语句的所有正确描述。",
                "answers": [
                  {
                    "id": "a1506043939650",
                    "text": "在使用 **WITH** 创建多个表格时，需要在引向最终查询的每个表格后面添加一个逗号。",
                    "is_correct": false
                  },
                  {
                    "id": "a1506043956321",
                    "text": "在使用 **WITH** 创建多个表格时，需要在每个表格后面加一个逗号，但是在引向最终查询的最后一个表格后面不需添加。",
                    "is_correct": true
                  },
                  {
                    "id": "a1506044320353",
                    "text": "新表格名称始终使用 `table_name AS` 设置别名，后面是位于小括号中的查询。",
                    "is_correct": true
                  },
                  {
                    "id": "a1506044339994",
                    "text": "使用 **WITH** 语句开始创建每个新表格。",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 432137,
          "key": "d1933c0d-4e3d-4e8c-bb60-a9a86f596e91",
          "title": "练习：WITH",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d1933c0d-4e3d-4e8c-bb60-a9a86f596e91",
            "completed_at": "2019-02-06T05:45:40.304Z",
            "last_viewed_at": "2019-07-31T13:42:27.041Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432065,
              "key": "c37143ce-cfab-462e-8f7b-c36ba675784b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/5991c52b_screen-shot-2017-08-02-at-11.14.25-am/screen-shot-2017-08-02-at-11.14.25-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c37143ce-cfab-462e-8f7b-c36ba675784b",
              "caption": "",
              "alt": "",
              "width": 809,
              "height": 494,
              "instructor_notes": null
            },
            {
              "id": 432066,
              "key": "3a7825f9-6d39-40fd-bf8e-3584b6a6bfcf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### WITH 练习\n\n本质上，**WITH** 语句和**子查询**执行的任务相同。因此，你可以使用 **WITH** 编写之前的任何一个查询。尝试使用 **WITH**（而不是子查询）再次执行之前的每个查询。  ",
              "instructor_notes": ""
            },
            {
              "id": 432067,
              "key": "05877628-51d7-4a2b-a1d8-cc62a2d2b24e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "以上是数据库的 ERD，当你处理下面的练习时，可能会用到该 ERD。你应该将答案写成 **WITH** 语句，而不是得出一个答案并复制输出。这么做的重要性是查询能够动态地回答问题，即使数据变化了，依然能获得正确的答案。\n\n1.  提供每个**区域**拥有最高销售额 (**total_amt_usd**) 的**销售代表**的**姓名**。<br><br>\n\n2. 对于具有最高销售额 (**total_amt_usd**) 的区域，总订单量是多少（注：订单量这里指购买货物总数）？<br><br>\n\n3.  对于购买标准纸张数量 (**standard_qty**) 最多的客户（在作为客户的整个时期内），**有多少客户**的购买总数（**total**）比该用户的购买总数（**total**）更多？<br><br>\n\n4. 对于（在作为客户的整个时期内）总消费 (**total_amt_usd**) 最多的客户，他们在每个渠道上有多少 **web_events**？<br><br>\n\n5. 对于总消费前十名的客户，他们的平均终身消费 (**total_amt_usd**) 是多少?<br><br>\n\n6. 比所有客户的平均消费高的企业平均终身消费 (**total_amt_usd**) 是多少？\n",
              "instructor_notes": ""
            },
            {
              "id": 432068,
              "key": "4c7dfa1a-c288-49ec-9043-128ab653d947",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view73dba123",
              "pool_id": "sqlwidget",
              "view_id": "a633fa88-b427-4c9b-b8f0-0b85c1e0bd96",
              "gpu_capable": null,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "allowSubmit": false,
                    "frameBorder": "0"
                  },
                  "kind": "sql-evaluator"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 432138,
          "key": "3b5e8d4a-b035-42cd-a353-ab4e0d21e804",
          "title": "解决方案：WITH",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3b5e8d4a-b035-42cd-a353-ab4e0d21e804",
            "completed_at": "2019-02-06T05:58:02.734Z",
            "last_viewed_at": "2019-07-31T13:42:28.331Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432069,
              "key": "2e679960-37d5-4530-a809-84d6ab325cfe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### WITH 解决方案\n\n以下是使用 **WITH** 条件重新编写的之前问题的答案。这些查询通常更容易读懂。\n\n1. 提供每个**区域**拥有最高销售额 (**total_amt_usd**) 的**销售代表**的**姓名**。<br><br>\n```\nWITH t1 AS (\nSELECT s.name rep_name, r.name region_name, SUM(o.total_amt_usd) total_amt\nFROM sales_reps s\nJOIN accounts a\nON a.sales_rep_id = s.id\nJOIN orders o\nON o.account_id = a.id\nJOIN region r\nON r.id = s.region_id\nGROUP BY 1,2\nORDER BY 3 DESC),\nt2 AS (\nSELECT region_name, MAX(total_amt) total_amt\nFROM t1\nGROUP BY 1)\nSELECT t1.rep_name, t1.region_name, t1.total_amt\nFROM t1\nJOIN t2\nON t1.region_name = t2.region_name AND t1.total_amt = t2.total_amt;\n```\n2. 对于具有最高销售额 (**total_amt_usd**) 的区域，总共下了多少个订单？<br><br>\n```\nWITH t1 AS (\nSELECT r.name region_name, SUM(o.total_amt_usd) total_amt\nFROM sales_reps s\nJOIN accounts a\nON a.sales_rep_id = s.id\nJOIN orders o\nON o.account_id = a.id\nJOIN region r\nON r.id = s.region_id\nGROUP BY r.name),\nt2 AS (\nSELECT MAX(total_amt)\nFROM t1)\nSELECT r.name, SUM(o.total) total_orders\nFROM sales_reps s\nJOIN accounts a\nON a.sales_rep_id = s.id\nJOIN orders o\nON o.account_id = a.id\nJOIN region r\nON r.id = s.region_id\nGROUP BY r.name\nHAVING SUM(o.total_amt_usd) = (SELECT * FROM t2);\n```\n3.  对于购买标准纸张数量 (**standard_qty**) 最多的客户（在作为客户的整个时期内），**有多少客户**的购买总数依然更多？<br><br>\n```\nWITH t1 AS (\nSELECT a.name account_name, SUM(o.standard_qty) total_std, SUM(o.total) total\nFROM accounts a\nJOIN orders o\nON o.account_id = a.id\nGROUP BY 1\nORDER BY 2 DESC\nLIMIT 1),\nt2 AS (\nSELECT a.name\nFROM orders o\nJOIN accounts a\nON a.id = o.account_id\nGROUP BY 1\nHAVING SUM(o.total) > (SELECT total FROM t1))\nSELECT COUNT(*)\nFROM t2;\n```\n4. 对于（在作为客户的整个时期内）总消费 (**total_amt_usd**) 最多的客户，他们在每个渠道上有多少 **web_events**？<br><br>\n```\nWITH t1 AS (\nSELECT a.id, a.name, SUM(o.total_amt_usd) tot_spent\nFROM orders o\nJOIN accounts a\nON a.id = o.account_id\nGROUP BY a.id, a.name\nORDER BY 3 DESC\nLIMIT 1)\nSELECT a.name, w.channel, COUNT(*)\nFROM accounts a\nJOIN web_events w\nON a.id = w.account_id AND a.id =  (SELECT id FROM t1)\nGROUP BY 1, 2\nORDER BY 3 DESC;\n```\n5. 对于总消费前十名的客户，他们的平均终身消费 (**total_amt_usd**) 是多少?<br><br>\n```\nWITH t1 AS (\nSELECT a.id, a.name, SUM(o.total_amt_usd) tot_spent\nFROM orders o\nJOIN accounts a\nON a.id = o.account_id\nGROUP BY a.id, a.name\nORDER BY 3 DESC\nLIMIT 10)\nSELECT AVG(tot_spent)\nFROM t1;\n```\n<br>\n6. 比所有客户的平均消费高的企业平均终身消费 (**total_amt_usd**) 是多少？<br><br>\n```\nWITH t1 AS (\nSELECT AVG(o.total_amt_usd) avg_all\nFROM orders o\nJOIN accounts a\nON a.id = o.account_id),\nt2 AS (\nSELECT o.account_id, AVG(o.total_amt_usd) avg_amt\nFROM orders o\nGROUP BY 1\nHAVING AVG(o.total_amt_usd) > (SELECT * FROM t1))\nSELECT AVG(avg_amt)\nFROM t2;\n```\n### 哇！太夸张了，如果你都答对了，那么很棒！\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 432139,
          "key": "dd0fcc23-910e-4328-bf88-811c101650ef",
          "title": "视频：子查询总结",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dd0fcc23-910e-4328-bf88-811c101650ef",
            "completed_at": "2019-02-06T06:00:16.286Z",
            "last_viewed_at": "2019-11-13T07:58:53.618Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 432070,
              "key": "80b6dc6c-a900-4f3d-8d29-d45a80316ef1",
              "title": "子查询总结",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "TUYvx2K9-5k",
                "china_cdn_id": "TUYvx2K9-5k.mp4"
              }
            },
            {
              "id": 432071,
              "key": "5d0f4712-6fbd-4a07-a6d3-0007ffd4dec2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 总结\n\n这节课是编写高级 SQL 的第一节课。可以认为，高级功能**子查询**和 **CTE** 是企业中的分析师最常用的工具。能够将问题分解为必要的表格并使用生成的表格找到答案是非常实用的技能。\n\n如果你第一次尝试时，没有得出正确答案，别担心，可以再试一次！此外，你也可以尝试自己想出一些答案，看看是否可行。\n\n这门课程的剩余部分属于分析师需要掌握的关键技能，但是到目前为止介绍的所有 SQL 技能足够你日常使用了。\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}