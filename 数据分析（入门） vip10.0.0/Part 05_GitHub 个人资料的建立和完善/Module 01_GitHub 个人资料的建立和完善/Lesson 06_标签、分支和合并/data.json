{
  "data": {
    "lesson": {
      "id": 339110,
      "key": "61776182-df3f-4767-9558-5d1591c1a709",
      "title": "标签、分支和合并",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "zh-cn",
      "summary": "能够在不受其他更改的影响的情况下处理项目，将大大提高工作效率。你将学习如何利用 git 的分支实现这种隔离开发过程。",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/61776182-df3f-4767-9558-5d1591c1a709/339110/1547629870619/%E6%A0%87%E7%AD%BE%E3%80%81%E5%88%86%E6%94%AF%E5%92%8C%E5%90%88%E5%B9%B6+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/61776182-df3f-4767-9558-5d1591c1a709/339110/1547629868247/%E6%A0%87%E7%AD%BE%E3%80%81%E5%88%86%E6%94%AF%E5%92%8C%E5%90%88%E5%B9%B6+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 339096,
          "key": "886b5f73-40c8-4fd0-a800-cdc1d0cb5801",
          "title": "简介",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "886b5f73-40c8-4fd0-a800-cdc1d0cb5801",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 338960,
              "key": "620f86ad-7e0f-4cfb-97ef-fead5299d556",
              "title": "GitFinal L5 01 标签、分支和合并 - 简介",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "sMf_r4_z-Ls",
                "china_cdn_id": "sMf_r4_z-Ls.mp4"
              }
            }
          ]
        },
        {
          "id": 339099,
          "key": "f22ea0e4-4a68-4d3a-91c8-0c19915af71f",
          "title": "标签",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f22ea0e4-4a68-4d3a-91c8-0c19915af71f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 338962,
              "key": "0eb25264-5b11-4480-afea-62bc68ebfd5f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "到目前为止，我们在这门课程中学习的都是具体的 git 命令。我们详细了解了这些命令的工作方式，以及在终端上运行这些命令后的输出结果。\n        \n现在我们从宏观层面了解下 git 标签在仓库中的作用。",
              "instructor_notes": ""
            },
            {
              "id": 338963,
              "key": "bde9382c-48f4-40c6-838d-355e6ba576a4",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L5 03 打标签概述",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "D4VdXT72ASE",
                "china_cdn_id": "D4VdXT72ASE.mp4"
              }
            },
            {
              "id": 338964,
              "key": "632e9d8a-0a8d-4820-8674-ed332d855cde",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 目前所处的位置\n\n你可以在任一项目中执行这些步骤，我将在 `new-git-project` 项目中执行。\n\n我们来看看该项目到目前为止的 git log 输出结果：",
              "instructor_notes": ""
            },
            {
              "id": 338965,
              "key": "9a7beeee-5fca-44ac-bd92-9cf28ac40f8c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a39500_ud123-l5-git-log-pre-tag/ud123-l5-git-log-pre-tag.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9a7beeee-5fca-44ac-bd92-9cf28ac40f8c",
              "caption": "_终端显示运行 `git log --oneline` 后的输出结果。_",
              "alt": "",
              "width": 1778,
              "height": 1280,
              "instructor_notes": null
            },
            {
              "id": 338966,
              "key": "ee746cd8-611e-4b17-8493-176b682c9f76",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## git tag 命令\n\n注意所显示的结果（只需注意 SHA 和 commit 消息）\n\n我们将使用 `git tag` 命令与仓库的标签进行交互：\n\n```bash\n$ git tag -a v1.0\n ```\n\n上述命令将打开代码编辑器，并等待你为标签输入信息。输入\"Ready for content\"怎么样？",
              "instructor_notes": ""
            },
            {
              "id": 338967,
              "key": "f0d8a547-0cd4-44a4-bc72-36b929303263",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a39be9_ud123-l5-editor-with-tag-message/ud123-l5-editor-with-tag-message.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f0d8a547-0cd4-44a4-bc72-36b929303263",
              "caption": "_代码编辑器正在等待提供标签信息。_",
              "alt": "",
              "width": 2740,
              "height": 1758,
              "instructor_notes": null
            },
            {
              "id": 338968,
              "key": "3a40a6e6-0ea0-4dd0-9a0d-c700241379a4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> 注意：在上述命令 (`git tag -a v1.0`) 中，使用了 `-a` 选项。该选项告诉 git 创建一个带注释的标签。如果你没有提供该选项（即 `git tag v1.0`），那么它将创建一个轻量级标签。\n\n> 建议使用带注释的标签，因为它们包含了大量的额外信息，例如：\n* 标签创建者\n* 标签创建日期\n* 标签消息\n\n> 因此，你应该始终使用带注释的标签。",
              "instructor_notes": ""
            },
            {
              "id": 338969,
              "key": "01ebadf3-e925-4d3b-8099-2611aaf5e1fb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 验证标签\n\n 保存并退出编辑器后，命令行上什么也不会显示。那么如何知道已经向项目中添加了标签呢？只需输入 `git tag`，命令行会显示仓库中的所有标签。\n  ",
              "instructor_notes": ""
            },
            {
              "id": 338972,
              "key": "ef436798-619e-46ab-97bf-d62c3c48753e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a39cdf_ud123-l5-git-tag/ud123-l5-git-tag.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ef436798-619e-46ab-97bf-d62c3c48753e",
              "caption": "_终端显示了 `git tag` 命令的输出结果，并列出了 `v1.0` 标签。_",
              "alt": "",
              "width": 2142,
              "height": 1280,
              "instructor_notes": null
            },
            {
              "id": 338970,
              "key": "aa31c6da-66b3-4e94-9d9b-0f2a6fc100a3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "我们已经验证了该标签位于仓库中，但是我们想知道它位于仓库的哪个位置。为此，我们需要调用一直在使用的 `git log`！",
              "instructor_notes": ""
            },
            {
              "id": 338973,
              "key": "25c1c715-0267-4487-9a10-46c4d0619232",
              "title": "能看到标签吗？",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "25c1c715-0267-4487-9a10-46c4d0619232",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "根据你对 `git log` 命令的了解，能在日志输出中看到标签吗？",
                "answers": [
                  {
                    "id": "a1487117600936",
                    "text": "是",
                    "is_correct": false
                  },
                  {
                    "id": "a1487117607351",
                    "text": "否",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 338971,
              "key": "526a4c8e-836b-45df-9f0b-472a8a858289",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## git log 的 --decorate 选项\n\n正如你所了解的，`git log` 是一个非常强大的工具，可以让我们查看仓库的 commit。我们已经学习了几个选项，现在该学习一个新的选项了。`--decorate` 选项将显示默认视图隐藏起来的一些详情。\n",
              "instructor_notes": ""
            },
            {
              "id": 338974,
              "key": "00fbafed-8bbc-4a82-88e1-58dcaf565079",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "马上去试试运行 `git log --decorate` 吧！",
              "instructor_notes": ""
            },
            {
              "id": 338975,
              "key": "9abefc84-fa0c-4c9b-b214-580be53df7df",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## 💡 Git 2.13 中 `--decorate` 选项的变化  💡 \n\n> 在 2.13 版 git 中，`log` 命令已改为自动启用 `--decorate` 选项。这意味着，你不需要在命令中包含 `--decorate` 选项，因为它已经自动包含了！因此下面的命令输出结果完全一样：\n\n> ```shell\n$ git log --decorate\n$ git log\n```\n\n> 请参阅 [2.13 版本说明 - 英](https://github.com/git/git/blob/v2.13.0/Documentation/RelNotes/2.13.0.txt#L176-L177)。",
              "instructor_notes": ""
            },
            {
              "id": 338976,
              "key": "17cab282-f405-4200-84a6-7142a6800d56",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a39d95_ud123-l5-git-log-decorate/ud123-l5-git-log-decorate.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/17cab282-f405-4200-84a6-7142a6800d56",
              "caption": "_终端显示了 `git log --decorate` 命令的输出结果。现在的日志输出显示了新建的标签。_",
              "alt": "",
              "width": 2246,
              "height": 1280,
              "instructor_notes": null
            },
            {
              "id": 338977,
              "key": "0a95d7a6-3dea-409d-a592-00d7bffc7b21",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "标签信息位于第一行的末尾：\n\n          \n```bash\ncommit 6fa5f34790808d9f4dccd0fa8fdbc40760102d6e (HEAD -> master, tag: v1.0)\n          \n```\n\n          \n看见输出结果显示的 `tag: v1.0` 了吗？这就是标签！标签与 commit 相绑定。因此，该标签与 commit 的 SHA 位于同一行。",
              "instructor_notes": ""
            },
            {
              "id": 338978,
              "key": "1916f801-426b-47fc-aa04-ded1341119a0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## HEAD -> master?\n\n          \n> 你是否注意到，日志中除了显示标签信息之外，`--decorate` 还显示了 `HEAD -> master`？这是关于分支的信息！接下来我们将了解 git 中的分支。",
              "instructor_notes": ""
            },
            {
              "id": 338979,
              "key": "79215abc-e861-4537-bfe7-eb498effbbee",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 删除标签\n\n          \n如果将标签消息中的某个字打错了，或标签名称打错了（输入 `v0.1`，而不是 `v1.0`），如何修正这个错误？最简单的方法是删除这个标签并重新创建。\n\n          \n可以通过输入 `-d` 选项 （表示 delete 删除！）加上标签名称来删除 git 标签：\n\n          \n```bash\n$ git tag -d v1.0\n          \n```",
              "instructor_notes": ""
            },
            {
              "id": 338980,
              "key": "cf1b013c-588b-4f37-b7fc-30bcc9b09047",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a39e16_ud123-l5-git-tag-delete/ud123-l5-git-tag-delete.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/cf1b013c-588b-4f37-b7fc-30bcc9b09047",
              "caption": "_终端显示了使用 `-d` 选项删除某个标签。所运行的命令为 `git tag -d v1.0`。_",
              "alt": "",
              "width": 2246,
              "height": 1280,
              "instructor_notes": null
            },
            {
              "id": 338984,
              "key": "fddb0d6b-d8bb-4ead-bc93-091ea16c20bc",
              "title": "标签在哪里？",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fddb0d6b-d8bb-4ead-bc93-091ea16c20bc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "默认情况下，git 标签不会出现在日志中。哪一选项用于在 `git log` 的输出中显示标签信息？",
                "answers": [
                  {
                    "id": "a1487117898240",
                    "text": "--show-tags",
                    "is_correct": false
                  },
                  {
                    "id": "a1487117911707",
                    "text": "--tags",
                    "is_correct": false
                  },
                  {
                    "id": "a1487117912363",
                    "text": "--display-all",
                    "is_correct": false
                  },
                  {
                    "id": "a1487117912891",
                    "text": "--decorate",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 338986,
              "key": "a1f05cad-108d-465d-ab02-3fd691399c11",
              "title": "删除该标签？",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a1f05cad-108d-465d-ab02-3fd691399c11",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "下面的哪个命令将删除标签 `v-1`？",
                "answers": [
                  {
                    "id": "a1487117949183",
                    "text": "git tag --delete v-1",
                    "is_correct": false
                  },
                  {
                    "id": "a1487117956923",
                    "text": "git remove v-1",
                    "is_correct": false
                  },
                  {
                    "id": "a1487117957429",
                    "text": "git tag -d v-1",
                    "is_correct": true
                  },
                  {
                    "id": "a1487117958062",
                    "text": "git delete v-1",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 338985,
              "key": "ae6b1f0d-80cd-44b2-9836-a8f53c037e95",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 向以前的 commit 添加标签\n\n          \n运行 `git tag -a v1.0` 将为最近的 commit 添加标签。但是如果你想向仓库中很久之前的 Commit 添加标签呢？\n\n          \n只需提供要添加标签的 commit 的 SHA 即可！\n\n        \n```bash\n$ git tag -a v1.0 a87984\n          \n```\n\n          \n（在弹出代码编辑器以便让你提供标签消息之后）此命令将向 SHA 为 `a87084` 的 commit 添加标签 `v1.0`。借助这一技巧，你可以为整个 git 仓库中的任何 commit 添加标签！很强大吧？并且只需在你已经知道的 git 标签命令中加上 commit 的 SHA 即可。\n  ",
              "instructor_notes": ""
            },
            {
              "id": 338981,
              "key": "69e97312-a26f-464c-b2bc-764b853bc901",
              "title": "对以前的 commit 添加标签？",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "69e97312-a26f-464c-b2bc-764b853bc901",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "根据以下 `git log --oneline` 信息，要向提交说明为 \"style page header\" 的 commit 添加标签 `beta`，你会运行哪个命令？\n\n```bash\n2a9e9f3 add breakpoint for large-sized screens\n137a0bd add breakpoint for medium-sized screens\nc5ee895 add space around page edge\nb552fa5 style page header\nf8c87c7 convert social links from text to images\n```",
                "matchers": [
                  {
                    "expression": "git tag -a beta b552fa5"
                  },
                  {
                    "expression": "git tag beta b552fa5"
                  }
                ]
              }
            },
            {
              "id": 338982,
              "key": "1fdab2d4-e9b0-40e5-bf6b-6deb1f95d594",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## git tag 小结\n\n          \n总结下，`git tag` 命令用来标记特定的 commit 。当添加新的 commit 时，标签不会移动。\n\n          \n```shell\n$ git tag -a beta\n          \n```\n\n          \n此命令将：\n          \n* 向最近的 commit 添加标签\n          \n* 如果提供了 SHA，则向具体的 commit 添加标签\n\n          \n### 深入研究\n          \n* git 基础知识 - 添加标签：[英](https://git-scm.com/book/en/v2/Git-Basics-Tagging)|[中](https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE) git 图书\n          \n* [git tag - 英](https://git-scm.com/docs/git-tag) git 文档",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339100,
          "key": "89a3a3ca-c47d-4e5f-87c7-cbc838f62232",
          "title": "分支",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "89a3a3ca-c47d-4e5f-87c7-cbc838f62232",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 338983,
              "key": "30647156-9ab8-4346-a9ee-944b48b4cc5f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "现在该学习强大的分支功能了！git 中的分支非常灵活，使你能够实现一些很强大的功能。在详细了解一些具体的命令之前，我们先从宏观层面了解下什么是分支以及它们的工作方式。",
              "instructor_notes": ""
            },
            {
              "id": 338991,
              "key": "094aefc4-f58b-45a7-b41e-eb7ec6d0a4a0",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L5 26 分支概述",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ywcOC6CLG4s",
                "china_cdn_id": "ywcOC6CLG4s.mp4"
              }
            },
            {
              "id": 338987,
              "key": "29854875-59f0-4d8a-bf60-f2564530afcc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "这就是分支的工作原理以及如何在分支之间切换的概述。其实你已经在命令行上见过 master 分支了。因为你在第一节课进行了文件设置，因此命令行中显示了当前分支。",
              "instructor_notes": ""
            },
            {
              "id": 338988,
              "key": "1a6aa741-88c9-4e44-958e-5b5d48839044",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a3a0fe_ud123-l5-branch-current/ud123-l5-branch-current.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1a6aa741-88c9-4e44-958e-5b5d48839044",
              "caption": "_终端在提示符中显示了当前分支。当前分支是\"master\"分支。_",
              "alt": "",
              "width": 1536,
              "height": 382,
              "instructor_notes": null
            },
            {
              "id": 338989,
              "key": "844d2130-d3b3-499d-9080-f55d55de4b83",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `git branch` 命令\n\n          \n`git branch` 命令用来与 git 的分支进行交互：\n\n          \n```bash\n$ git branch\n          \n```\n\n          \n它可以用来：\n          \n* 列出仓库中的所有分支名称\n          \n* 创建新的分支\n          \n* 删除分支\n\n          \n如果我们只输入 `git branch`，则 git 将列出仓库中的分支：",
              "instructor_notes": ""
            },
            {
              "id": 338990,
              "key": "178f9635-9479-4529-b163-700b9165ae41",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a3a139_ud123-l5-git-branch/ud123-l5-git-branch.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/178f9635-9479-4529-b163-700b9165ae41",
              "caption": "_终端显示了 `git branch` 命令的输出结果，并显示了 master 分支。_",
              "alt": "",
              "width": 1756,
              "height": 1398,
              "instructor_notes": null
            },
            {
              "id": 338992,
              "key": "7c3de544-9015-4291-a898-9ee64f779e09",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " ## 创建分支\n\n          \n要创建分支，只需使用 `git branch` 并提供要创建的分支对应的名称。因此，如果你想创建一个叫做\"sidebar\"的分支，只需运行以下命令：\n\n          \n```bash\n$ git branch sidebar\n          \n```",
              "instructor_notes": ""
            },
            {
              "id": 338993,
              "key": "bd62ce2c-dc5e-4747-8611-bdcbab243eb3",
              "title": "提示符改变了吗？",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bd62ce2c-dc5e-4747-8611-bdcbab243eb3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": " 注意，仓库中有多个分支，但是提示符显示的是当前分支。         \n\n现在我们新建了\"sidebar\"分支，提示符会显示 `sidebar` 还是 `master`？",
                "answers": [
                  {
                    "id": "a1487193375843",
                    "text": "sidebar",
                    "is_correct": false
                  },
                  {
                    "id": "a1487193402877",
                    "text": "master",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 338994,
              "key": "1af6f45e-35ad-4591-abf9-4a400f191343",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `git checkout` 命令\n\n          \n注意，在进行 commit 时，该 commit 将添加到当前分支上。虽然我们创建了新的 `sidebar` 分支，但是没有向其添加新的 commit，因为我们尚未切换到该分支。如果我们现在进行 commit 的话，该 commit 将添加到 `master` 分支，而不是 `sidebar` 分支。我们已经在演示中看到这一情况，要在分支之间进行切换，我们需要使用 git 的 `checkout` 命令。\n\n          \n```bash\n$ git checkout sidebar\n          \n```\n\n          \n请务必了解该命令的工作方式。运行该命令将：\n          \n* 从工作目录中删除 git 跟踪的所有文件和目录\n   * (git 跟踪的文件存储在仓库中，因此什么也不会丢失)\n\n\n* 转到仓库，并提取分支指向的 commit 所对应的所有文件和目录\n\n          \n因此此命令将删除 master 分支中的 commit 引用的所有文件。它会将这些文件替换为 sidebar 分支中的 commit 引用的文件。理解这一部分十分重要，所以请务必多读几遍工作方式。\n\n          \n有趣的是，`sidebar` 和 `master` 都指向同一 commit，因此当你在这两个分支之间切换时，看起来什么也没变。但是提示符现在会显示\"sidebar\"：",
              "instructor_notes": ""
            },
            {
              "id": 338995,
              "key": "b2d2a7d2-287b-41a3-b831-7d4b6c48ec97",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4c60a_ud123-l5-git-checkout-sidebar/ud123-l5-git-checkout-sidebar.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b2d2a7d2-287b-41a3-b831-7d4b6c48ec97",
              "caption": "_终端在提示符中显示了\"sidebar\"分支。_",
              "alt": "",
              "width": 1756,
              "height": 1398,
              "instructor_notes": null
            },
            {
              "id": 338996,
              "key": "f2831ca3-214f-44e2-8d71-e4dce56a8959",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " ## 日志中的分支\n\n          \n提示符中的分支信息很有用，但是最清晰的查看方式是查看 `git log` 的输出结果。就像我们需要使用 `--decorate` 选项来显示 git 标签一样，我们也需要该选项来显示分支。\n\n          \n```bash\n$ git log --oneline --decorate\n          \n```\n\n          \n我的日志输出结果如下所示（你的可能不太一样，取决于你提交的 commit）：",
              "instructor_notes": ""
            },
            {
              "id": 338997,
              "key": "cd6e6a72-f0cc-4750-b900-f3b576eb0645",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4c65f_ud123-l5-git-log-branches/ud123-l5-git-log-branches.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/cd6e6a72-f0cc-4750-b900-f3b576eb0645",
              "caption": "_终端显示了 `git log --oneline --decorate` 命令的输出结果。单词\"HEAD\"具有一个指向\"sidebar\"的箭头，后者是当前分支。_",
              "alt": "",
              "width": 1756,
              "height": 1398,
              "instructor_notes": null
            },
            {
              "id": 338998,
              "key": "a9db1d08-a5dd-41e6-9201-b5906a360ac9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "在上述输出中，注意我们之前见到的特殊指示符\"HEAD\"具有一个指向 sidebar 分支的箭头。它指向 sidebar 是因为 sidebar 分支是当前分支，现在提交的任何 commit 将添加到 sidebar 分支。\n    ",
              "instructor_notes": ""
            },
            {
              "id": 338999,
              "key": "9edfe7cf-d938-49f2-8790-563aa77d8e7d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 活跃分支\n\n          \n提示符将显示活跃分支。但这是我们对提示符进行的特殊自定义，如果你使用的是不同的计算机，判断活跃分支的最快速方式是查看 `git branch` 命令的输出结果。活跃分支名称旁边会显示一个星号。",
              "instructor_notes": ""
            },
            {
              "id": 339004,
              "key": "45b208cb-b5e9-4ffc-a7da-b73b49071cf3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4c6aa_ud123-l5-git-branch-asterisk/ud123-l5-git-branch-asterisk.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/45b208cb-b5e9-4ffc-a7da-b73b49071cf3",
              "caption": "_终端显示了 `git branch` 命令的输出结果。活跃分支（这里是 \"sidebar\"分支）旁边有一个星号。_",
              "alt": "",
              "width": 1756,
              "height": 950,
              "instructor_notes": null
            },
            {
              "id": 339000,
              "key": "297d01f0-00a2-4de2-9197-510998b03bc6",
              "title": "在某一位置创建 git 分支",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "297d01f0-00a2-4de2-9197-510998b03bc6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "根据你所掌握的 `git branch` 和 `git tag` 命令方面的知识，你认为下面的命令将有何作用？\n\n```bash\n$ git branch alt-sidebar-loc 42a69f\n```",
                "answers": [
                  {
                    "id": "a1487193898208",
                    "text": "将创建一个 `alt` 分支，并且指向与 `master` 分支相同的 commit",
                    "is_correct": false
                  },
                  {
                    "id": "a1487193910461",
                    "text": "将创建以下 3 个分支：`alt`、`sidebar`、`loc`",
                    "is_correct": false
                  },
                  {
                    "id": "a1487193911811",
                    "text": "将使 master 分支移到 SHA 为 `42a69f` 的 commit 上",
                    "is_correct": false
                  },
                  {
                    "id": "a1487193912349",
                    "text": "将创建 `alt-sidebar-loc` 分支并使其指向 SHA 为 `42a69f` 的 commit",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 339001,
              "key": "5bded3f3-d1d7-479c-ac45-bd71f1b4efeb",
              "title": "哪个分支是活跃分支？",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5bded3f3-d1d7-479c-ac45-bd71f1b4efeb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "假设 `git branch` 的输出如下所示：\n\n```bash\n$ git branch\n  barbara\n* footer-fix\n  master\n  richard\n  sidebar\n  social-icons\n```\n\n哪个分支是活跃分支？",
                "matchers": [
                  {
                    "expression": "footer-fix"
                  }
                ]
              }
            },
            {
              "id": 339002,
              "key": "1d857219-061b-4da7-8f11-4261c9faf1ce",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " ## 删除分支\n\n          \n分支用来进行开发或对项目进行修正，不会影响到项目（因为更改是在分支上进行的）。在分支上做出更改后，你可以将该分支组合到 `master` 分支上（这种“分支组合过程”叫做“合并”（merge），稍后将详细讲解）\n\n          \n合并了分支的更改后，你可能不再需要该分支了。如果你想删除分支，可以使用 `-d` 选项。下面的命令包含 `-d` 选项，告诉 git 删掉给出的分支（这里是\"sidebar\"分支）。\n\n          \n```bash\n$ git branch -d sidebar\n          \n```\n\n          \n注意，无法删除当前所在的分支。因此要删除 `sidebar` 分支，你需要切换到 `master` 分支，或者创建并切换到新的分支。\n\n          \n删除内容让人比较紧张。但是不用担心。如果某个分支上有任何其他分支上都没有包含的 commit（也就是这个 commit 是要被删除的分支独有的），git 不会删除该分支。如果你创建了 `sidebar` 分支，向其添加了 commit，然后尝试使用 `git branch -d sidebar` 删除该分支，git 不会让你删除该分支，因为你无法删除当前所在的分支。如果你切换到 `master` 分支并尝试删除 `sidebar` 分支，git 也不会让你删除，因为 `sidebar` 分支上的新 commit 会丢失！要强制删除，你需要使用大写的 D 选项 - `git branch -D sidebar`。\n      ",
              "instructor_notes": ""
            },
            {
              "id": 339003,
              "key": "22f92e55-2af3-40ab-8bae-15ea071dd2d1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## git branch 小结\n\n          \n总结下，`git branch` 命令用来管理 git 中的分支：\n\n          \n```bash\n          \n# 列出所有分支\n          \n$ git branch\n\n          \n# 创建新的\"footer-fix\"分支\n          \n$ git branch footer-fix\n\n          \n# 删除\"footer-fix\"分支\n          \n$ git branch -d footer-fix\n          \n```\n\n          \n此命令用来：\n\n          \n* 列出本地分支\n          \n* 创建新的分支\n          \n* 删除分支\n\n\n          \n### 深入研究\n          \n* git 分支 - 分支的新建与合并：[英](https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging)|[中](https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6) git 文档\n          \n* [了解 git 分支](http://learngitbranching.js.org/)\n          \n* [git 分支教程](https://www.atlassian.com/git/tutorials/using-branches) Atlassian 博客(**英**)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339101,
          "key": "b86879e8-45d6-4600-94f2-a11564e7d1f8",
          "title": "高效分支",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b86879e8-45d6-4600-94f2-a11564e7d1f8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339005,
              "key": "a825b443-4eb7-4201-9dcc-b1f5efb87ef0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "你已经学会了如何创建、列出和删除分支，我们来运用下所学的知识吧！\n\n          \n首先，确保我们保持相同的进度，并拥有相同的起始代码。我们将在 `new-git-project` 项目中进行操作。该项目具有以下文件：\n          \n* `index.html`\n          \n* `css/app.css`（空文件）\n          \n* `js/app.js`（空文件）\n\n          \nCSS 和 JavaScript 文件是空的。确保 index 文件具有以下内容：",
              "instructor_notes": ""
            },
            {
              "id": 339006,
              "key": "ee1ca7a6-df52-4009-aa66-e1ced34044ca",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>Blog Project</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <meta name=\"description\" content=\"\">\n    <link rel=\"stylesheet\" href=\"css/app.css\">\n</head>\n<body>\n\n    <header>\n        <h1>Expedition</h1>\n    </header>\n\n    <div class=\"container\">\n        <main>\n            \n        </main>\n    </div>\n\n    <footer>\n        Made with ♥ @ Udacity\n    </footer>\n    <script src=\"js/app.js\"></script>\n</body>\n</html>\n```",
              "instructor_notes": ""
            },
            {
              "id": 339007,
              "key": "144ad1c9-ca59-40c9-af3f-45479b5fffe0",
              "title": "项目设置完毕",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "144ad1c9-ca59-40c9-af3f-45479b5fffe0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "我有一个包含上述起始代码的 `index.html` 文件",
                "我在 `css` 目录中有一个 `app.css` 文件",
                "我在 `js` 目录中有一个 `app.js` 文件",
                "所有文件已被保存",
                "所有文件已暂存并提交至仓库",
                "当前分支是 `master` 分支",
                "我已删除所有其他分支",
                "在命令行上运行 `git status` 后的输出结果包括 `working directory clean`"
              ],
              "positive_feedback": "很棒！继续保持！",
              "video_feedback": null,
              "description": "在继续之前，确保我们的设置保持一致。请检查以下各项："
            },
            {
              "id": 339008,
              "key": "037cd78b-b1f5-4b12-996e-ff47bf79307b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 策略\n\n 现在，所有代码都位于 `master` 分支（默认分支）上。我们通过以下操作利用分支进行工作：\n          \n* 向分支中添加内容\n          \n* 创建新的分支\n          \n* 在分支之间切换\n\n          \n让我们使用分支完成以下更改：\n          \n1. 在 master 分支上 - 向页面添加默认颜色\n          \n* 创建一个 sidebar 分支 - 为页面创建侧栏\n          \n* 在 master 分支上 - 更改页面的标题\n          \n* 在 sidebar 分支上 - 向侧栏中添加更多内容\n          \n* 创建一个 footer 分支 - 向脚注中添加社交链接",
              "instructor_notes": ""
            },
            {
              "id": 339009,
              "key": "e8f3480d-6189-4d87-ac28-c858ed6dde7e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 更改 1 - 添加页面颜色\n          \n确保位于 `master` 分支上，并向 `css/app.css` 添加以下内容：\n\n```css\nbody {\n    background-color: #00cae4;\n}\n```\n\n保存文件，然后将该文件添加到暂存区，并将其 commit 到仓库。",
              "instructor_notes": ""
            },
            {
              "id": 339010,
              "key": "f0eb19d8-cbe4-43e4-9a0e-6088a9a1f596",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4ce74_ud123-l5-changes-add-color/ud123-l5-changes-add-color.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f0eb19d8-cbe4-43e4-9a0e-6088a9a1f596",
              "caption": "_终端显示了 `git log --oneline --decorate` 命令的输出结果。最近的 commit 向页面上添加了默认背景色。_",
              "alt": "",
              "width": 2224,
              "height": 974,
              "instructor_notes": null
            },
            {
              "id": 339011,
              "key": "2c1e6c1d-0dd6-4026-b921-cae02752d11c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 更改 2 - 添加侧栏\n        \n我们向页面上添加一个侧栏。但是假定我们不确定是否喜欢新的背景色。因此我们要将 sidebar 分支放在设置页面颜色的 commit 之前。你的 SHA 可能会不一样，但对我来说，在添加颜色的 commit 之前的 commit 具有 SHA `5bfe5e7`。因此向该 commit 添加分支的命令是：\n          \n```bash\n$ git branch sidebar 5bfe5e7\n          \n```         \n现在使用 `git checkout` 命令切换到新的 `sidebar` 分支。运行 `git log --oneline --decorate` 显示以下结果：",
              "instructor_notes": ""
            },
            {
              "id": 339012,
              "key": "6c1f7853-8f48-454a-a175-24eed97367f4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4cee4_ud123-l5-git-branch-sidebar/ud123-l5-git-branch-sidebar.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6c1f7853-8f48-454a-a175-24eed97367f4",
              "caption": "_终端显示了 `git log --oneline --decorate` 的输出结果。输出结果**不**包含 `master` 分支 - 它消失了。_",
              "alt": "",
              "width": 2224,
              "height": 974,
              "instructor_notes": null
            },
            {
              "id": 339013,
              "key": "f94d0d4f-24bc-43fe-b3bc-c975b4b40b51",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "你是否注意到 `master` 分支没有显示在输出结果中？它去哪了？丢失了？别担心，它还在那儿，稍后我们将了解如何显示该分支。\n        \n但首先，在代码编辑器中切换到 `app.css` 文件。注意它没有我们之前输入的 CSS！因此，如果你在浏览器中加载该项目，页面将没有背景色。这很正常，因为 CSS 文件是空的，但是你知道为什么吗？\n       ",
              "instructor_notes": ""
            },
            {
              "id": 339014,
              "key": "264f6bfa-7fd3-4e49-a95e-ef7f0a0c3ed9",
              "title": "CSS 在哪？",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "264f6bfa-7fd3-4e49-a95e-ef7f0a0c3ed9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "回忆下上节课的分支仓库视频，为何 CSS 文件是空的？",
                "answers": [
                  {
                    "id": "a1487195917493",
                    "text": "内容已被清除。",
                    "is_correct": false
                  },
                  {
                    "id": "a1487195933402",
                    "text": "内容存储在另一个分支上。",
                    "is_correct": true
                  },
                  {
                    "id": "a1487195934091",
                    "text": "内容在需要保存的临时文件上。",
                    "is_correct": false
                  },
                  {
                    "id": "a1487195934667",
                    "text": "被熊吃了。",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 339015,
              "key": "3b18fe7e-e7c6-4d55-8af9-f3da21bc9a1b",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L5 54 不同分支上的内容",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Px6EUylw8Uw",
                "china_cdn_id": "Px6EUylw8Uw.mp4"
              }
            },
            {
              "id": 339016,
              "key": "cd26ac4c-8f9e-40d1-a246-f8c6dd8d8538",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "通过向 HTML 文件添加以下 `<aside>` 代码添加一个侧栏：\n\n```html\n<div class=\"container\">\n    <main>\n\n    </main>\n</div>\n\n<!-- start of new content -->\n<aside>\n    <h2>About Me</h2>\n\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eos, debitis earum molestias veniam suscipit aliquam totam exercitationem tempore neque vitae. Minima, corporis pariatur facere at quo porro beatae similique! Odit.</p>\n</aside>\n<!-- end of new content -->\n\n<footer>\n    Made with ♥ @ Udacity\n</footer>\n```\n\n我将 `<aside>` 内容添加到 `<main>` 元素旁边，作为 `<div class=\"container\">` 元素的子级。\n\n          \n你可以在 `<aside>` 元素中添加任何内容！",
              "instructor_notes": ""
            },
            {
              "id": 339017,
              "key": "98a41109-ad84-4acb-b784-ea1ac2d97145",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## ⚠️ 请勿更改 CSS\n         \n> 警告：千万不要更改 CSS 文件。\n          \n> 稍后我们将更改该文件，但是暂时请勿更改，否则会出现“合并冲突”（merge conflict）。稍后我们将手动操作出合并冲突，但是现在我们还不想有冲突，因此暂时不要更改 CSS 文件。\n",
              "instructor_notes": ""
            },
            {
              "id": 339018,
              "key": "0607a90d-8aef-419f-b523-1f65a097472c",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0607a90d-8aef-419f-b523-1f65a097472c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "我已经保存 `index.html`",
                "我已经暂存 `index.html`",
                "我已经将 `index.html` commit 到仓库"
              ],
              "positive_feedback": "很棒！ 🎉",
              "video_feedback": null,
              "description": "这一步已经操作完毕，可以 commit 任何更改了。"
            },
            {
              "id": 339019,
              "key": "9559b157-76a2-405f-b58f-6bfc5b8e8b9c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 更改 3 - 更改 master 上的标题\n          \n切换到 master 分支并更新页面标题。\n          \n使用 `git checkout` 命令切换到 `master` 分支。（注意，新的侧栏的 HTML 不在了！因为所有代码都妥善地保存在 `sidebar` 分支上。）\n         \n现在将页面的 `<h1>` 标题从\"Expedition\"改为其他内容。要不改为吸引人的\"Adventure\"？！",
              "instructor_notes": ""
            },
            {
              "id": 339020,
              "key": "a5e4d20e-0731-40af-8dc0-b70f7a2c2a2d",
              "title": "看到所做的更改了吗？",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a5e4d20e-0731-40af-8dc0-b70f7a2c2a2d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "小练习时间！如何让 git 显示你已经保存但是尚未 commit 的更改？",
                "answers": [
                  {
                    "id": "a1487196644318",
                    "text": "git show --diff",
                    "is_correct": false
                  },
                  {
                    "id": "a1487196658665",
                    "text": "git log -p",
                    "is_correct": false
                  },
                  {
                    "id": "a1487196659223",
                    "text": "git diff",
                    "is_correct": true
                  },
                  {
                    "id": "a1487196659848",
                    "text": "git log --stat",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 339021,
              "key": "25e377f2-2537-4b52-8f43-6ea3731bc5dd",
              "title": "标题更改已被保存并 commit",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "25e377f2-2537-4b52-8f43-6ea3731bc5dd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "我已经保存 `index.html`",
                "我已经暂存 `index.html`",
                "我已经将 `index.html` commit 到仓库"
              ],
              "positive_feedback": "很棒！",
              "video_feedback": null,
              "description": "现在该保存 `index.html` 文件并进行 commit 以将此更改添加到仓库中。（我使用了 commit 消息\"Improve site heading for SEO\"，但是你也可以想一个更好的消息）"
            },
            {
              "id": 339022,
              "key": "57349e08-f83f-4709-980e-68adaa3a6d1d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 更改 4 - 向侧栏中添加更多内容\n\n          \n切换到 `sidebar` 分支（注意，我们添加到 `master` 分支的内容在 `sidebar` 分支上不可见）。\n\n          \n现在，在 `<aside>` 元素中添加一些内容。添加一些个人信息，例如你喜欢的电影或书籍（我最喜欢的是《指环王》！）。任何内容都可以，只需添加一些内容。\n\n          \n同样确保不要更改 CSS 文件。\n\n          \n保存 `index.html` 文件并提交 commit。",
              "instructor_notes": ""
            },
            {
              "id": 339023,
              "key": "46d3c3ce-38ab-4b16-bf61-5889ac9c831a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 更改 5 - 向脚注中添加社交链接\n          \n我们已经做出了好几个更改，下面要进行最后一项更改了。我们向页面脚注中添加一些社交图标。为了加以区分，我们在基于 `master` 分支的新 footer 分支上做出这一更改，因此需要先创建一个新的 `footer` 分支。\n  ",
              "instructor_notes": ""
            },
            {
              "id": 339024,
              "key": "33f82009-8ceb-46e3-9f5e-3bc6f57b38d4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## 💡 用一个命令切换并创建分支💡 \n\n>目前，我们处理分支的方式是使用 `git branch` 命令创建一个分支，然后使用 `git checkout` 命令切换到这个新建的分支。\n\n> 但是你知道吗？`git checkout` 命令也可以创建一个新的分支。如果你添加 `-b` 选项，则能够用一个命令创建分支并切换到该分支。\n\n> ```bash\n$ git checkout -b richards-branch-for-awesome-changes\n```\n\n> 这是一个很实用的命令，我经常会用到它。",
              "instructor_notes": ""
            },
            {
              "id": 339025,
              "key": "c7c1f449-c3eb-4df9-9977-aa21522e9d07",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "我们使用新的 `git checkout` 命令来创建新的 `footer` 分支并让此 footer 分支的起点位置与 master 分支的一样：\n\n```bash\n$ git checkout -b footer master\n```\n\n现在如果运行 `git log --oneline --decorate`，应该能看到以下结果（你的 commit 消息可能不一样）：",
              "instructor_notes": ""
            },
            {
              "id": 339026,
              "key": "665d46d2-5da8-4d72-aa9d-8dd3a3da7445",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4d41d_ud123-l5-git-checkout-b-footer-master/ud123-l5-git-checkout-b-footer-master.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/665d46d2-5da8-4d72-aa9d-8dd3a3da7445",
              "caption": "_终端显示了 `git log --oneline --decorate` 的输出结果。特殊的 `HEAD` 指针指向 `footer` 分支。`footer` 分支与 `master` 分支位于同一 commit 上。_",
              "alt": "",
              "width": 2224,
              "height": 974,
              "instructor_notes": null
            },
            {
              "id": 339027,
              "key": "2c00e808-424e-4b89-80ff-3bf4da10fbbe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 添加社交链接\n\n现在我们已经位于新分支上，我们向页面脚注中添加一些社交链接。我添加了以下内容：\n\n```html\n<footer>\n    <!-- start of new content -->\n    <section>\n        <h3 class=\"visuallyhidden\">Social Links</h3>\n        <a class=\"social-link\" href=\"https://twitter.com/udacity\">\n            <img src=\"img/social-twitter.png\" alt=\"Twitter\">\n        </a>\n        <a class=\"social-link\" href=\"https://www.instagram.com/udacity/\">\n            <img src=\"img/social-instagram.png\" alt=\"Instagram\">\n        </a>\n        <a class=\"social-link\" href=\"https://plus.google.com/+Udacity\">\n            <img src=\"img/social-google.png\" alt=\"Google Plus\">\n        </a>\n    </section>\n    <!-- end of new content -->\n</footer>\n```\n\n你也可以添加你自己的社交帐户链接。",
              "instructor_notes": ""
            },
            {
              "id": 339028,
              "key": "9eafbeff-a750-40c1-8d97-0c98d288b9e8",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9eafbeff-a750-40c1-8d97-0c98d288b9e8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "我已经保存  `index.html`",
                "我已经暂存`index.html`",
                "我已经 `index.html` commit 到仓库"
              ],
              "positive_feedback": "很棒！ 👏",
              "video_feedback": null,
              "description": "现在保存文件并提交 commit。（我使用了 commit 消息\"Add links to social media\"，当然你也可以想出更好的消息）"
            },
            {
              "id": 339029,
              "key": "f7a7ee58-6d09-4f58-8c39-a45d46166c10",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 同时查看所有分支\n\n         \n我们已经做出了所有需要做出的更改！很棒！\n\n          \n我们已经在三个不同的分支上进行了多项更改。我们在 `git log` 输出结果中看不到其他分支，触发切换到某个分支。如果能在 `git log` 输出结果中看到所有分支，是不是很棒？\n\n         \n 你到现在为止已经知道，`git log` 命令非常强大，可以显示此信息。我们将使用新的 `--graph` 和 `--all` 选项：\n\n          \n```bash\n$ git log --oneline --decorate --graph --all\n          \n```\n\n          \n`--graph` 选项将条目和行添加到输出的最左侧。显示了实际的分支。`--all` 选项会显示仓库中的所有分支。\n\n          \n运行此命令将显示仓库中的所有分支和 commit：",
              "instructor_notes": ""
            },
            {
              "id": 339030,
              "key": "1e40b6ef-cc1c-4f78-876c-73c8f90c3e19",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4d51e_ud123-l5-git-log-graph-all/ud123-l5-git-log-graph-all.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1e40b6ef-cc1c-4f78-876c-73c8f90c3e19",
              "caption": "_终端显示了 `git log --oneline --graph --decorate --all` 的输出结果。它会显示仓库中的所有分支，以及所有 commit。_",
              "alt": "",
              "width": 2224,
              "height": 974,
              "instructor_notes": null
            },
            {
              "id": 339031,
              "key": "c4375d39-6d27-426c-a068-82b97e12f911",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " ## 更改小结\n\n          \n我们做出了以下更改：\n          \n1. 我们在 master 分支上向页面添加了默认颜色\n          \n* 我们创建了 sidebar 分支并为侧栏添加了代码\n          \n* 我们在 master 分支上更改了页面的标题\n          \n* 我们在 sidebar 分支上向侧栏添加了更多内容\n          \n* 我们创建了 footer 分支并向脚注中添加了社交链接\n\n          \n这些更改都发生在不同的分支上。让我们用 git 合并所有这些更改吧。将分支组合到一起称为**合并**（merge）。",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339102,
          "key": "3a831268-c6c7-4d10-a755-37e1232a2b4c",
          "title": "合并",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3a831268-c6c7-4d10-a755-37e1232a2b4c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339032,
              "key": "ee19effe-4bb7-41e4-a374-46c5f5a31979",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "注意，主题分支（例如 `sidebar`）的作用是让你做出不影响 `master` 分支的更改。当你在主题分支上做出更改后，如果觉得不想要该分支上的更改，则可以删掉该分支，或者你决定要保留更改，则可以将该分支上的更改与其他分支上的更改合并。\n          \n将分支组合到一起称为**合并**。\n         \ngit 可以自动将不同分支上的更改合并到一起。这种分支和合并功能正是 git 的强大之处！你可以在分支上做出小的或大的更改，然后使用 git 合并这些更改。\n         \n我们来看看理论原理。注意 git 中的两种合并：普通**合并**和**快进合并**。",
              "instructor_notes": ""
            },
            {
              "id": 339033,
              "key": "c4f25391-7354-4b54-b72b-33e0f32a1564",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L5 71 合并",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "gQiWicrreJg",
                "china_cdn_id": "gQiWicrreJg.mp4"
              }
            },
            {
              "id": 339034,
              "key": "b4fee657-95fc-4f5e-9d94-b228ac99e0bb",
              "title": "快速检查",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b4fee657-95fc-4f5e-9d94-b228ac99e0bb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "我位于 `new-git-project` 项目中",
                "我已检出 `master` 分支",
                "`git status` 的输出结果包括文本 `working directory clean`"
              ],
              "positive_feedback": "我们开始吧！",
              "video_feedback": null,
              "description": "我们快速检查下我们的起点是否一样。请检查以下各项："
            },
            {
              "id": 339035,
              "key": "b3ea4063-593e-465c-bb8a-26d50494c8c7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## ⚠️ 了解分支 ⚠️\n          \n> 当你要合并分支时，务必知道当前位于哪个分支上。注意，合并分支会提交 commit。\n       \n > 现在我们不知道如何撤消更改。下节课将介绍这一技巧，但是如果你在错误的分支上进行了合并，可以使用以下命令撤消合并：\n         \n> `git reset --hard HEAD^`\n         \n> （确保包含 `^` 字符！它属于“相对 commit 引用”并表示“父 级 commit”。我们将在下节课学习相对 commit 引用。）",
              "instructor_notes": ""
            },
            {
              "id": 339036,
              "key": "7e678f1a-8d95-4b39-b634-c4954715de27",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 合并指令\n\n          \n`git merge` 指令用来合并 git 分支：\n         \n```bash\n$ git merge <name-of-branch-to-merge-in>\n          \n```         \n发生合并时，git 将：\n          \n* 查看将合并的分支\n          \n* 查看分支的历史记录并寻找两个分支的 commit 历史记录中都有的单个 commit\n          \n* 将单个分支上更改的代码行合并到一起\n          \n* 提交一个 commit 来记录合并操作",
              "instructor_notes": ""
            },
            {
              "id": 339037,
              "key": "17ae13f4-48aa-4067-8436-79ef02c8d737",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 快进合并\n          \n在我们的项目中，我们检出了 `master` 分支，我希望它拥有 `footer` 分支上的更改。用语言描述的话就是“我想要合并 `footer` 分支。”。注意表述“合并…”；在进行合并时，另一个分支上的更改将出现在当前检出的分支上。\n          \n我再强调下，当我们合并时，我们将其他分支合并到当前（检出的）分支上。我们不是将两个分支合并到一个新的分支上。也不是将当前分支合并到其他分支上。\n        \n因为 `footer` 直接在 `master` 前面，因此这种合并最简单。将 `footer` 合并到 `master` 中将导致**快进合并**（Fast-forward merge）。快进合并将使当前检出的分支向前移动，直到它指向与另一个分支（这里是 `footer`）指向的 commit 一样为止。\n        \n要合并 `footer` 分支，运行：\n\n          \n```bash\n$ git merge footer\n          \n```\n        \n在运行该命令后，我的终端显示结果如下所示：",
              "instructor_notes": ""
            },
            {
              "id": 339038,
              "key": "a7794263-281e-463d-8556-26de2dfd6b92",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4d706_ud123-l5-merge-fast-forward/ud123-l5-merge-fast-forward.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a7794263-281e-463d-8556-26de2dfd6b92",
              "caption": "_终端显示了将 `footer` 分支合并到 `master` 分支后的结果。_",
              "alt": "",
              "width": 1020,
              "height": 490,
              "instructor_notes": null
            },
            {
              "id": 339039,
              "key": "14f1fe21-ec45-4565-b613-8530332477be",
              "title": "分支位于同一个位置？",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "14f1fe21-ec45-4565-b613-8530332477be",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "再看看仓库，现在你已经将两个分支合并到一起了。`master` 分支和 `footer` 分支指向同一 commit 吗？",
                "answers": [
                  {
                    "id": "a1487197986349",
                    "text": "是",
                    "is_correct": true
                  },
                  {
                    "id": "a1487198027495",
                    "text": "否",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 339040,
              "key": "f440e00e-035b-4d7f-b873-563c0d6bf240",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "  ## 进行普通合并\n          \n终于完成快进合并流程了！也没那么难，对吧？\n        \n但是你可能会说“当然简单了，所有 commit 都已经在那，分支指针只是向前移动了！”…说的对，这是最简单的合并。 \n\n现在我们将进行更常见的合并，其中两个分支完全不一样。你会惊讶地发现，实际合并 `sidebar` 这样的独特分支，操作是完全一样的！\n\n要合并 `sidebar` 分支，确保你位于 `master` 分支上，并运行：\n\n```bash\n$ git merge sidebar\n```\n\n因为合并的是两个完全不一样的分支，因此将提交 commit。在进行 commit 时，需要提供 commit 消息。因为这是合并 commit，因此已经提供了默认消息。你也可以更改消息，但通常都会直接使用默认的合并 commit 消息。因此当你的代码编辑器打开并包含该消息时，直接关闭编辑器以确认使用该 commit 消息。\n\n在使用默认 commit 消息后，我的终端如下所示：",
              "instructor_notes": ""
            },
            {
              "id": 339041,
              "key": "7e777705-6ae1-41f0-8cb8-99397d235f6c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4d84e_ud123-l5-git-merge-sidebar/ud123-l5-git-merge-sidebar.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7e777705-6ae1-41f0-8cb8-99397d235f6c",
              "caption": "_终端显示了合并 `sidebar` 分支后的结果。_",
              "alt": "",
              "width": 2224,
              "height": 1032,
              "instructor_notes": null
            },
            {
              "id": 339042,
              "key": "14808f27-c54c-4b18-b2ae-5409369a7188",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "就这么多合并操作！很简单吧？你可能读过很多让分支和合并显得非常复杂的文档，但实际上并没有那么难。",
              "instructor_notes": ""
            },
            {
              "id": 339043,
              "key": "68e80616-386c-4969-a6e6-3b926146a46c",
              "title": "哪个分支会移动？",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "68e80616-386c-4969-a6e6-3b926146a46c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "现在做个简短的小练习，看看你是否理解了合并的操作原理。 \n           \n假设某个仓库有以下 4 个分支：\n            \n* master          \n* allisons-mobile-footer-fix           \n* nav-updates           \n* jonathans-seo-changes\n           \n`master` 和 `allisons-mobile-footer-fix` 上的更改需要合并到一起。如果 HEAD 指向 `allisons-mobile-footer-fix`，在进行合并时，哪个分支将移动？",
                "answers": [
                  {
                    "id": "a1487198316971",
                    "text": "master",
                    "is_correct": false
                  },
                  {
                    "id": "a1487198333854",
                    "text": "allisons-mobile-footer-fix",
                    "is_correct": true
                  },
                  {
                    "id": "a1487198335177",
                    "text": "nav-updates",
                    "is_correct": false
                  },
                  {
                    "id": "a1487198357539",
                    "text": "jonathans-seo-changes",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 339044,
              "key": "19a8f14e-446b-4a88-8143-90a9f3261281",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 如果合并失败了呢？\n\n我们刚刚执行的合并能够成功合并。git 能够灵活地合并不同分支上的大量工作。但是，有时候也无法合并分支。如果在进行合并时失败了，则称为**合并冲突（merge conflict）**。我们将在下节课了解合并冲突及其背后的原因，并学习如何解决冲突。\n",
              "instructor_notes": ""
            },
            {
              "id": 339045,
              "key": "502d162b-dec5-4741-83b6-aa665181932c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 合并小结\n\n总结下，`git merge` 命令用来在 git 中合并分支：\n\n```bash\n$ git merge <other-branch>\n```\n\n合并有以下两种类型：\n\n* 快进合并 – 要合并的分支必须位于检出分支前面。检出分支的指针将向前移动，指向另一分支所指向的同一 commit。\n* 普通类型的合并\n    * 两个完全不同的分支被合并\n    * 创建一个合并 commit\n\n ### 深入研究\n* 分支合并：[英](https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging#Basic-Merging)|[中](https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6) git 图书\n* [git-merge](https://git-scm.com/docs/git-merge) git 文档 (**英**)\n* [git 合并](https://www.atlassian.com/git/tutorials/git-merge) Atlassian 博客 (**英**)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339104,
          "key": "84037f3a-2ba6-4317-a705-4dc5f342295e",
          "title": "合并冲突",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "84037f3a-2ba6-4317-a705-4dc5f342295e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339046,
              "key": "e0cf0330-9680-4c3f-b07e-3658d2122133",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 有时候合并会失败\n\n大部分情况下，git 将能够成功地合并分支。但是，有时候 git 无法完全自动地进行合并。合并失败时，就称为**合并冲突**。\n\n如果出现合并冲突，git 将尝试尽可能合并多的内容，然后将留下特殊选项（例如 `>>>` 和 `<<<`），告诉你（没错，告诉作为程序员的你！）需要从何处手动修复。 \n\n### 什么导致了合并冲突\n正如你所知道的，git 会跟踪文件中的代码行。如果完全相同的行在不同的文件中更改了，将产生合并冲突。例如，如果你在 `alternate-sidebar-style` 分支上并将侧栏的标题改为\"Information About Me\"，git 应该选择哪个标题？你在两个分支上都更改了标题，因此 git 根本不知道你要保留哪个标题。它肯定不会随机选择一个标题！\n\n我们来人为制造一个合并冲突，学习如何解决这种冲突。当你学会了后，就非常简单!当 git 不确定你要使用即将合并的分支中的哪些行时，就会出现合并冲突。因此我们需要在两个不同的分支上修改同一行，然后重设合并它们。\n",
              "instructor_notes": ""
            },
            {
              "id": 339047,
              "key": "a40269b0-e25c-44a7-8154-7e80b0aae331",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 人为制造合并冲突！\n\n当同一行在两个分支中都更改了时，就会出现合并冲突。我们在两个不同的分支上更改同一页面的标题：\n\n* 更改 `master` 分支上的标题\n* 在最近修改 `master` 分支的 commit 前面创建一个 `heading-update` 分支\n* 更改同一标题\n* 切换到 `master` 分支\n* 合并 `heading-update` 分支",
              "instructor_notes": ""
            },
            {
              "id": 339048,
              "key": "a651eeaa-10ed-45e9-9f93-4576159d42f9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 在分支上更改标题 1\n\n因为 `master` 分支就像所有其他分支一样，也是个普通分支，我们在 `master` 分支上更改标题。将 `<h1>` 标题改为其他内容。对我来说，标题当前在第 13 行是\"Adventure\"，我将其改为\"Quest\"。\n\n做出更改后，保存文件并 commit 到仓库。",
              "instructor_notes": ""
            },
            {
              "id": 339049,
              "key": "49709dc9-b85e-4f8d-b9ba-bd77c01e1846",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 在分支上更改标题 2\n\n现在我们需要创建不同的分支并在该分支上更新标题。\n\n现在要注意的是，我们需要创建一个不是从 master 分支上分叉的分支。如果我们在从 master 分支上分叉的分支上做出更改，那么该更改将在此更改前面，git 将直接使用该更改，而不是使用我们刚刚在 `master` 上做出的更改。因此我们需要将该分支“放在过去”。\n\n我们创建一个位于最近 commit 之前的 commit 上的分支。使用 git log 获取上一个 commit 的 SHA，并在该 commit 上创建一个分支。在创建 `heading-update` 分支后，我的 git log 输出结果如下所示：\n  ",
              "instructor_notes": ""
            },
            {
              "id": 339050,
              "key": "7edd79d5-434c-49fd-bd67-e06457b51e2a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4da49_ud123-l5-git-merge-conflict-prep/ud123-l5-git-merge-conflict-prep.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7edd79d5-434c-49fd-bd67-e06457b51e2a",
              "caption": "_终端显示了 `git log --oneline --decorate --graph --all` 的输出结果。当前被检出的分支为 `heading-update` 。_",
              "alt": "",
              "width": 2314,
              "height": 1264,
              "instructor_notes": null
            },
            {
              "id": 339052,
              "key": "d457a2cd-ec3c-4993-86f6-1bd363278707",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "现在已经创建好分支，我们只需再次更新标题。确保更改在 `master` 分支上做出更改的同一行。我将第 13 行的\"Adventure\"改为\"Crusade\"。\n\n然后保存文件，并将文件 commit 到仓库。",
              "instructor_notes": ""
            },
            {
              "id": 339051,
              "key": "15bc28a8-36fc-42ae-a4ac-a773ca28a561",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4dbc5_ud123-l5-git-merge-conflict-prep2/ud123-l5-git-merge-conflict-prep2.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/15bc28a8-36fc-42ae-a4ac-a773ca28a561",
              "caption": "_终端显示了 `git log --oneline --decorate --graph --all` 的输出结果。`master` 分支和 `heading-update` 分支都更改了同一文件的同一行。_",
              "alt": "",
              "width": 2314,
              "height": 1264,
              "instructor_notes": null
            },
            {
              "id": 339053,
              "key": "2f5bdd8b-399e-459c-b3d3-34c87c859342",
              "title": "准备合并冲突",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2f5bdd8b-399e-459c-b3d3-34c87c859342",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "我在 `master` 分支上做出了更改标题的 commit",
                "我在 `heading-update` 分支上做出了同样更改标题的 commit",
                "我目前位于 `master` 分支上"
              ],
              "positive_feedback": "很棒！我们继续。",
              "video_feedback": null,
              "description": "我们即将导致合并冲突，确保你的进度和我的一样："
            },
            {
              "id": 339054,
              "key": "a82efaec-85d6-44bc-b1eb-be7de9631995",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "确保你位于 master 分支（我们也可以在另一分支上操作，但是我习惯将 `master` 分支作为主分支，让另一个分支合并到该分支上）上，并合并 `heading-update` 分支：\n\n```bash\n$ git merge heading-update\n```\n\n你应该看到以下结果：",
              "instructor_notes": ""
            },
            {
              "id": 339055,
              "key": "d23607af-f999-4947-92d3-67868a354ec2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a4dc22_ud123-l5-git-merge-conflict/ud123-l5-git-merge-conflict.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d23607af-f999-4947-92d3-67868a354ec2",
              "caption": "_终端显示了导致合并冲突的合并输出结果。出现单词\"CONFLICT\"，并且指出 index.html 文件中出现合并冲突。_",
              "alt": "",
              "width": 2314,
              "height": 1264,
              "instructor_notes": null
            },
            {
              "id": 339056,
              "key": "d5426353-0a77-44bb-8b3e-cf9d2b30551c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 合并冲突输出结果解释\n\n终端中显示的输出结果为：\n\n```bash\n$ git merge heading-update \nAuto-merging index.html\nCONFLICT (content): Merge conflict in index.html\nAutomatic merge failed; fix conflicts and then commit the result.\n```\n\n注意在 `git merge heading-update` 命令之后，git 尝试合并在两个分支上都更改了的文件 (`index.html`)，但是出现冲突。此外，它告诉你发生了什么：\"Automatic merge failed; fix conflicts and then commit the result\"。\n\n还记得 `git status` 命令吗？在处理合并冲突时，该命令将非常有用。",
              "instructor_notes": ""
            },
            {
              "id": 339057,
              "key": "4777593d-4f8a-4036-ac9d-45f0d204ee52",
              "title": "合并冲突的状态？",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4777593d-4f8a-4036-ac9d-45f0d204ee52",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "尝试立即运行 `git status`。终端显示了以下哪些信息？",
                "answers": [
                  {
                    "id": "a1487199322718",
                    "text": "You have unmerged paths",
                    "is_correct": true
                  },
                  {
                    "id": "a1487199330549",
                    "text": "Unmerged paths",
                    "is_correct": true
                  },
                  {
                    "id": "a1487199331117",
                    "text": "fix conflicts and run \"git commit\"",
                    "is_correct": true
                  },
                  {
                    "id": "a1487199331717",
                    "text": "use \"git add <file>...\" to mark resolution",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 339058,
              "key": "a68afd48-2bd0-4824-9b9f-d3e2eb0eba95",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "`git status` 的输出结果告诉我们 `index.html` 中存在合并冲突。因此在代码编辑器中查看该文件！",
              "instructor_notes": ""
            },
            {
              "id": 339059,
              "key": "e732b6a7-a3b9-49fb-9b2c-f0ae89d6895d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a74de1_ud123-l5-git-merge-conflict-indicators/ud123-l5-git-merge-conflict-indicators.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e732b6a7-a3b9-49fb-9b2c-f0ae89d6895d",
              "caption": "_代码编辑器显示了合并冲突指示符。_",
              "alt": "",
              "width": 2542,
              "height": 1780,
              "instructor_notes": null
            },
            {
              "id": 339060,
              "key": "f3dd33f4-4879-4b04-b9b2-3db84c2b8e0a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 合并冲突指示符解释\n\n编辑器具有以下合并冲突指示符：\n* `<<<<<<< HEAD` 此行下方的所有内容（直到下个指示符）显示了当前分支上的行\n* `||||||| merged common ancestors` 此行下方的所有内容（直到下个指示符）显示了原始行的内容\n* `=======` 表示原始行内容的结束位置，之后的所有行（直到下个指示符）是被合并的当前分支上的行的内容\n* `>>>>>>> heading-update` 是要被合并的分支（此例中是 `heading-update` 分支）上的行结束指示符\n",
              "instructor_notes": ""
            },
            {
              "id": 339061,
              "key": "c5564b18-74b4-41c9-abe6-d0a35b7c0c96",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 解决合并冲突\n\ngit 使用合并冲突指示符来告诉你两个不同分支上的哪些行导致了合并冲突，以及原始行是什么。要解决合并冲突，你需要：\n1. 选择保留哪些行\n* 删掉所有带指示符的行\n\n因为某种原因，我不太喜欢现在的\"Crusade\"一词，但是\"Quest\"也不太合适。要不将标题设为\"Adventurous Quest\"？",
              "instructor_notes": ""
            },
            {
              "id": 339062,
              "key": "4e812d50-7ff5-43e5-88c4-302bf7d08512",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a74ced_ud123-l5-resolve-merge-conflict/ud123-l5-resolve-merge-conflict.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4e812d50-7ff5-43e5-88c4-302bf7d08512",
              "caption": "_代码编辑器显示合并冲突指示符已被删除，并且标题已更新。_",
              "alt": "",
              "width": 1160,
              "height": 780,
              "instructor_notes": null
            },
            {
              "id": 339063,
              "key": "5bba13df-c5f5-4990-a39b-41aaa23b8c8b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## commit 合并冲突\n\n删掉所有包含合并冲突指示符的行并选择保留哪个标题后，直接保存文件，并将其添加到暂存区，然后 commit！就像普通合并一样，代码编辑器会弹出，并让你提供 commit 消息。和之前一样，我们经常会使用自动生成的合并 commit 消息，因此在编辑器打开后，直接关闭编辑器并使用自动生成的 commit 消息。\n\n就这些内容！当你明白合并指示符所显示的内容后，合并冲突就没那么复杂了。",
              "instructor_notes": ""
            },
            {
              "id": 339064,
              "key": "6e47c06c-5573-486b-9111-68134c4167aa",
              "title": "合并冲突指示符可以被 commit 吗？",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6e47c06c-5573-486b-9111-68134c4167aa",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "你到目前为止已经提交了大量的 commit。如果文件中出现合并冲突，你修改并保存了文件，然后添加到暂存区并 commit 了，但是忘了删掉合并冲突指示符，git 会 commit 文件吗？",
                "answers": [
                  {
                    "id": "a1487199561900",
                    "text": "是",
                    "is_correct": true
                  },
                  {
                    "id": "a1487199583358",
                    "text": "否",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 339065,
              "key": "d6c2fd78-1b6a-455f-aa2a-5ded8d3958a9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 合并冲突小结\n\n当相同的行在要合并的不同分支上做出了更改时，就会出现合并冲突。git 将在合并途中暂停，并告诉你存在冲突，以及哪些文件存在冲突。要解决文件中的冲突：\n* 找到并删掉存在合并冲突指示符的所有行\n* 决定保留哪些行\n* 保存文件\n* 暂存文件\n* 提交 commit\n\n注意一个文件可能在多个部分存在合并冲突，因此检查整个文件中的合并冲突指示符，搜索 `<<<` 能够帮助你找到所有这些指示符。\n\n### 深入研究\n* 遇到冲突时的分支合并：[英](https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging#Basic-Merge-Conflicts)|[中](https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6) git 图书\n* [冲突如何被显示](https://git-scm.com/docs/git-merge#_how_conflicts_are_presented) git 文档 (**英**)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339103,
          "key": "36702d2f-8d5c-4019-ad0a-67fd0b54d46a",
          "title": "总结",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "36702d2f-8d5c-4019-ad0a-67fd0b54d46a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339066,
              "key": "c3fd9059-a22a-48b4-9a0f-c4478734ff16",
              "title": "标签、分支和合并-总结",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ot4fPX1jzOI",
                "china_cdn_id": "ot4fPX1jzOI.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}