WEBVTT
Kind: captions
Language: zh-CN

00:00:00.160 --> 00:00:03.510
要编写这个函数 我先要将 x 和 y 值标准化

00:00:04.689 --> 00:00:07.540
我们写过用于标准化变量的代码

00:00:07.540 --> 00:00:10.450
但这次有些不同 因为你要确保

00:00:10.450 --> 00:00:17.274
对两个值使用 ddof = 0 从而取得未更正的标准偏差

00:00:17.274 --> 00:00:20.339
与此前一样 我仍需注意小括号的使用

00:00:21.410 --> 00:00:23.670
然后 将每一对值相乘

00:00:23.670 --> 00:00:27.360
在这里 我使用向量化乘法

00:00:27.360 --> 00:00:31.810
然后我用 mean 函数来取乘积的平均值

00:00:31.810 --> 00:00:35.370
我添加了小括号 以便获得乘积的平均值

00:00:35.370 --> 00:00:37.120
而不仅仅是取 y 的平均值 然后乘以 x

00:00:38.300 --> 00:00:40.190
我返回这个值

00:00:40.190 --> 00:00:44.200
事实上 NumPy 有一个函数 可以帮你计算皮尔逊积矩相关系数

00:00:44.200 --> 00:00:46.892
但第一次使用时 自己动手编写这个代码

00:00:46.892 --> 00:00:49.000
有助于你对它的理解

00:00:49.000 --> 00:00:49.955
但我建议 在日后的运算中

00:00:49.955 --> 00:00:53.290
你可以直接使用 NumPy 的函数

00:00:53.290 --> 00:00:56.500
接下来 我要用这个函数来计算

00:00:56.500 --> 00:00:58.830
地铁数据中部分变量的相关度

00:00:58.830 --> 00:01:02.090
首先 我要计算 ENTRIESn_hourly

00:01:02.090 --> 00:01:06.760
即每小时的入站人数 以及 meanprecipi 即当天的平均降水量的相关系数

00:01:06.760 --> 00:01:11.050
可以看到 输出结果约为 0.03

00:01:11.050 --> 00:01:15.000
它是正值 也就意味着

00:01:15.000 --> 00:01:17.020
降水量高时 地铁客流量也会增加

00:01:17.020 --> 00:01:18.380
但这个值非常小

00:01:18.380 --> 00:01:20.850
也就是说 两者间的相关度不是很高

00:01:21.960 --> 00:01:25.160
为了比较一下 我准备计算

00:01:25.160 --> 00:01:27.295
我认为相关度较高的两个变量之间的相关系数

00:01:27.295 --> 00:01:31.880
ENTRIESn_hourly 是每小时乘坐地铁的人数

00:01:31.880 --> 00:01:35.610
ENTRIESn 是每小时增加的

00:01:35.610 --> 00:01:37.680
乘坐地铁总人数

00:01:37.680 --> 00:01:40.780
我认为这两个变量肯定具有相关性

00:01:40.780 --> 00:01:44.790
但它们的相关度不一定很高

00:01:44.790 --> 00:01:47.450
因为入站总人数取决于

00:01:47.450 --> 00:01:52.410
之前几个小时和现在进入车站的人数

00:01:52.410 --> 00:01:56.681
我得到的结果是 0.58

00:01:56.681 --> 00:01:58.923
这比 ENTRIESn_hourly 和 meanpercipi 的相关性高很多

00:01:58.923 --> 00:02:03.214
但它仍小于皮尔逊积矩相关系数的最大值 1

