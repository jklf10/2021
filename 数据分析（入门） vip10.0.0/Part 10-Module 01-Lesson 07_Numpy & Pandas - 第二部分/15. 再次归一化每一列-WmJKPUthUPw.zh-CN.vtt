WEBVTT
Kind: captions
Language: zh-CN

00:00:00.160 --> 00:00:03.360
我现在要针对涉及 2 个科目和 5 个学生成绩的 DataFrame

00:00:03.360 --> 00:00:04.170
写出相关代码

00:00:05.300 --> 00:00:07.840
首先 我需要各列的平均值

00:00:07.840 --> 00:00:10.650
这个我可以通过 grades_df.mean 获得

00:00:10.650 --> 00:00:15.490
这样我就得到了 pandasSeries 中科目 1 和 2 的平均值

00:00:15.490 --> 00:00:18.170
我还要看一下原 DataFrame

00:00:18.170 --> 00:00:20.390
要对每一列进行标准化

00:00:20.390 --> 00:00:23.680
我需要用各列减去其平均值

00:00:23.680 --> 00:00:28.170
所以 我要将第一列的每个值减去第一个平均值

00:00:28.170 --> 00:00:31.240
再将第二列的每个值减去第二个平均值

00:00:32.390 --> 00:00:34.690
这与你刚才看到的加法运算一样 

00:00:34.690 --> 00:00:38.129
我利用 grades_df 减去 grades_df.mean

00:00:38.129 --> 00:00:41.249
然后可以看到 考试科目 1 的前两个分数

00:00:41.249 --> 00:00:44.789
Andre 的分数低于平均值 因此是负分

00:00:44.789 --> 00:00:47.916
而 Barry 的分数高于平均值 因此是正分

00:00:47.916 --> 00:00:51.992
接下来 我要用标准偏差除以相应的列

00:00:51.992 --> 00:00:53.592
这个过程与此前一样

00:00:53.592 --> 00:00:57.483
我通过 grades_df.std 获得每一列的标准偏差

00:00:57.483 --> 00:01:01.307
然后用 series 除以 DataFrame

00:01:01.307 --> 00:01:03.670
也就是用各偏差除以相应的考试分数

00:01:03.670 --> 00:01:06.180
这里仍须注意小括号的使用

00:01:06.180 --> 00:01:07.310
再次运行这个代码

00:01:07.310 --> 00:01:11.430
我们可以看到 每项考试均以标准偏差的形式出现

00:01:11.430 --> 00:01:13.930
注意 这个代码

00:01:13.930 --> 00:01:16.710
与标准化单个 series 的代码完全相同

00:01:16.710 --> 00:01:20.440
但随后你会发现 由于行的标准化较为复杂

00:01:20.440 --> 00:01:24.720
所以这个看似简单的代码其实比较复杂

00:01:24.720 --> 00:01:27.020
那我要如何标准化每一行呢？

00:01:27.020 --> 00:01:29.899
首先 我要参考一下原 DataFrame 

00:01:31.070 --> 00:01:33.770
这一次 我需要各行的平均值

00:01:33.770 --> 00:01:36.610
为此 我设置数轴等于列

00:01:36.610 --> 00:01:40.110
记住 这意味着我要沿着每一列取平均值

00:01:40.110 --> 00:01:42.250
这样 我就能得到每一行的平均值

00:01:42.250 --> 00:01:46.150
可以看到 它返回了每个学生两项考试的平均值

00:01:46.150 --> 00:01:49.710
现在 我需要用DataFrame的第一行减去第一个平均值

00:01:49.710 --> 00:01:52.560
再用第二行减去第二个平均值 以此类推

00:01:52.560 --> 00:01:57.090
但如果我像刚才那样 使用 grades_df 减 grades_df.mean

00:01:57.090 --> 00:02:00.880
它就会用 DataFrame 的一列减去这些值

00:02:00.880 --> 00:02:03.380
但这样是行不通的

00:02:03.380 --> 00:02:07.150
因为该 series 的这些索引值与 DataFrame 的列名不一致

00:02:07.150 --> 00:02:09.449
所以 我只会得到一些请求

00:02:09.449 --> 00:02:12.840
因此 我需要使用 sub 函数 它代表减法

00:02:12.840 --> 00:02:16.990
与减号有着相同的作用 但它还可以引入数轴参数

00:02:16.990 --> 00:02:19.890
在这种情况下 数轴应该是索引值

00:02:19.890 --> 00:02:24.240
因为我想利用行索引值 把 DataFrame 的元素和 series 的元素相匹配

00:02:24.240 --> 00:02:25.960
现在 我试一下

00:02:25.960 --> 00:02:28.170
可以看到 第一列和第二列的所有值

00:02:28.170 --> 00:02:31.250
均有着同样的绝对值

00:02:31.250 --> 00:02:35.400
当你仅用两个值来减平均值时 结果就是这样的

00:02:35.400 --> 00:02:38.650
我将该 DataFrame 命名为 mean_diffs 以便此后使用

00:02:38.650 --> 00:02:41.430
接下来 要用标准偏差做除法

00:02:41.430 --> 00:02:42.870
我所需要的代码与此前的极为类似

00:02:42.870 --> 00:02:45.640
我要使成绩列的标准偏差等于列 同时使数轴等于列

00:02:45.640 --> 00:02:49.090
这样 我就能得到每一行的标准偏差了

00:02:49.090 --> 00:02:52.860
然后 我通过 mean_diffs.div 

00:02:52.860 --> 00:02:54.709
用标准偏差 series 除以 mean_diffs DataFrame

00:02:55.880 --> 00:02:59.490
然后我要通过数轴等于索引值 根据行索引匹配元素

00:03:00.590 --> 00:03:02.340
你会发现 每一行的结果都是相同的

00:03:02.340 --> 00:03:05.000
这也是因为 DataFrame 只有两列

00:03:06.340 --> 00:03:09.890
这个代码看起来确实与标准化列的代码完全相同

00:03:09.890 --> 00:03:14.870
但各数轴参数均与默认值相反

00:03:14.870 --> 00:03:17.950
在编写 Pandas 代码时要格外注意这点

00:03:17.950 --> 00:03:21.360
如果你使用的是普通算法 那你可能不需要指定数轴的值

00:03:21.360 --> 00:03:24.590
因为 默认值应该是正确的

00:03:24.590 --> 00:03:27.410
但如果你的运算比较特殊

00:03:27.410 --> 00:03:30.720
比如标准化的对象是 DataFrame 的行 而不是列

00:03:30.720 --> 00:03:34.020
那你就需要将所有数轴都设为非默认值

