WEBVTT
Kind: captions
Language: zh-CN

00:00:00.310 --> 00:00:03.880
首先 我会写出适用于这个小样本数组的代码

00:00:03.880 --> 00:00:06.510
以检验它能否完成每一步运算

00:00:06.510 --> 00:00:09.620
然后 我再将其返回这一函数中

00:00:09.620 --> 00:00:11.090
即客流量最大的车站的平均乘客数

00:00:11.090 --> 00:00:14.180
首先 我们要找出第一天

00:00:14.180 --> 00:00:15.520
乘客数量最多的车站

00:00:15.520 --> 00:00:20.140
第一天是数组的第0行

00:00:20.140 --> 00:00:24.680
我可以通过0来表示行位置 用冒号表示列位置 即所有列

00:00:24.680 --> 00:00:28.650
通过检验 我发现结果正确 它成功输出了第一行

00:00:28.650 --> 00:00:32.980
现在 我要使用 max 函数来找出最大值

00:00:32.980 --> 00:00:37.000
事实上 我所需要的是拥有最大值的车站

00:00:37.000 --> 00:00:39.690
因此 我将使用 argmax 函数

00:00:39.690 --> 00:00:42.760
它能够返回最大值的位置

00:00:42.760 --> 00:00:45.570
我们可以看到 它的位置是3

00:00:45.570 --> 00:00:49.220
而数组的第3列确实为最大值

00:00:49.220 --> 00:00:51.840
我将这个值命名为 max_station

00:00:51.840 --> 00:00:55.640
接下来 我想找出这个车站每天的平均乘客数

00:00:55.640 --> 00:00:58.430
首先 我需要该车站的客流数据

00:00:58.430 --> 00:01:02.010
所以 我要选择所有行以及 max_station 列

00:01:02.010 --> 00:01:03.430
可以看到

00:01:03.430 --> 00:01:06.360
它输出了客流数据的正确一列

00:01:06.360 --> 00:01:08.440
然后 我要取这些值的平均值

00:01:08.440 --> 00:01:13.090
我将其命名为 mean_for_max 也就是最大客流车站的平均值

00:01:13.090 --> 00:01:16.650
最后 我需要求出总平均值 以进行比较

00:01:16.650 --> 00:01:19.990
为此 我只需利用 ridership.mean

00:01:19.990 --> 00:01:22.850
现在 我可以把这个代码嵌入我的函数中

00:01:22.850 --> 00:01:26.560
由于示例数组与函数参数的名称相同

00:01:26.560 --> 00:01:29.320
即 ridership 因此 我无需更改任何名称

00:01:29.320 --> 00:01:31.660
然后 我返回这两个值

00:01:31.660 --> 00:01:33.830
接下来 我将在示例数组中调用这一函数

00:01:35.100 --> 00:01:38.730
可以看出 总平均值约为 2300

00:01:38.730 --> 00:01:41.190
而最大客流车站的平均值约为 3200

00:01:41.190 --> 00:01:44.530
也就是说 第一天乘客数量最高的车站

00:01:44.530 --> 00:01:48.050
其总客流量也高于平均值

00:01:48.050 --> 00:01:51.110
当然 这不代表它的总客流量高于其他所有车站

00:01:51.110 --> 00:01:54.130
这个问题 我们将在下一个练习中进行计算

