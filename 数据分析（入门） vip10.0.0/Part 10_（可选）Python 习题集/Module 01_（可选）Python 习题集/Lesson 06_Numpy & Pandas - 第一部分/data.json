{
  "data": {
    "lesson": {
      "id": 561639,
      "key": "18337233-0c82-48d8-8654-fbaf72e37c65",
      "title": "Numpy & Pandas - 第一部分",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "zh-cn",
      "summary": "在本课中，你将学习一些关于 numpy 和 pandas 的知识。numpy 和 pandas 将分为两部分为你教授，提早学习有利于帮助你完成项目挑战。 \n",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/18337233-0c82-48d8-8654-fbaf72e37c65/561639/1544466235344/Numpy+%26+Pandas+-+%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/18337233-0c82-48d8-8654-fbaf72e37c65/561639/1544466227112/Numpy+%26+Pandas+-+%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86+Subtitles.zip"
          },
          {
            "name": "Male Completion Rate",
            "uri": "https://video.udacity-data.com/topher/2018/March/5a985a94_male-completion-rate/male-completion-rate.csv"
          },
          {
            "name": "Female Completion Rate",
            "uri": "https://video.udacity-data.com/topher/2018/March/5a985abf_female-completion-rate/female-completion-rate.csv"
          },
          {
            "name": "Gdp Per Capita",
            "uri": "https://video.udacity-data.com/topher/2018/March/5a985ad2_gdp-per-capita/gdp-per-capita.csv"
          },
          {
            "name": "Life Expectancy",
            "uri": "https://video.udacity-data.com/topher/2018/March/5a985add_life-expectancy/life-expectancy.csv"
          },
          {
            "name": "Employment Above 15",
            "uri": "https://video.udacity-data.com/topher/2018/March/5a985ae7_employment-above-15/employment-above-15.csv"
          },
          {
            "name": "Numpy Pandas Cheatsheet",
            "uri": "https://video.udacity-data.com/topher/2018/March/5a985af4_numpy-pandas-cheatsheet/numpy-pandas-cheatsheet.pdf"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 561492,
          "key": "781830f7-1f81-4855-baca-2cf8c943ae85",
          "title": "简介备注",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "781830f7-1f81-4855-baca-2cf8c943ae85",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 561250,
              "key": "9647c9f8-5509-4f4f-9551-6a5c2420ca73",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "接下来两节课 NumPy & Pandas - Part 1 & 2 保留了来自于数据分析师纳米学位的部分内容。 例如，你将看到`print 7`，而不是 `print (7) `，因为这里的语法遵循 Python 2.7 而不是 Python 3.`*`。 （这些 Python 版本之间的主要区别之一在于： Python 3 中需要使用 `print` 函数带有括号。）\n\n除此以外，与 NumPy 和 pandas 相关的所有其他语法在 Python 2.7 和 Python 3 中都是一致的。 许多专业库仍进行从 Python 2.` *`翻译成 Python 3.` *`的转变过程。我们在此感谢你的耐心，我们后续也将所有内容移至Python 3.` *`。",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 176499,
          "key": "54534286320923",
          "title": "简介",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54534286320923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 174121,
              "key": "5453428632",
              "title": "简介",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "QXxtu_gdWQs",
                "china_cdn_id": "QXxtu_gdWQs.mp4"
              }
            }
          ]
        },
        {
          "id": 176501,
          "key": "54301490040923",
          "title": "Gapminder 数据",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54301490040923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 174122,
              "key": "5430149004",
              "title": "Gapminder 数据",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "### Gapminder 数据\n\n本节课中的数据取自网站 [gapminder.org](http://www.gapminder.org/data/)。包含的变量有：\n\n* 15 岁以上人口就业率 (%)\n* 平均寿命（年）\n* 人均 GDP（美元，已经过通胀调整)\n* 小学完成率\n\n\n你也可以从“课程资源”部分获取数据，独自进行分析。",
              "user_state": {
                "node_key": "5430149004",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "_Z4d6-d-glM",
                  "china_cdn_id": "_Z4d6-d-glM.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Gapminder 数据 - 练习",
                "alt_text": "",
                "background_image": "//lh3.googleusercontent.com/XqMvZsoi0HJ2HvFTKt0HqDSllHGsLg1b-Xk_g1EfIz2obueZBybmuIvEn3DBvv-O9mcRA3pQlL0aQL4Y-w=s0#w=1439&h=810",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5430149004",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "5427482388",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check1",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.1154925187032419,
                      "y": 0.7709950110864745
                    }
                  },
                  {
                    "group": null,
                    "initial_value": "false",
                    "label": null,
                    "marker": "check2",
                    "model": "CheckboxWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.11843438279301746,
                      "y": 0.8673087583148559
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "lbNk216NW48",
                  "china_cdn_id": "lbNk216NW48.mp4"
                }
              }
            },
            {
              "id": 689980,
              "key": "3588386d-ed3a-42b7-b309-a81761cdf3af",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "虽然使用的是一个网站的数据，但是是不同数据集，即这里使用了多个文件。",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 176500,
          "key": "54301490070923",
          "title": "NumPy 和 Pandas 中的一维数据",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54301490070923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 174123,
              "key": "5430149007",
              "title": "NumPy 和 Pandas 中的一维数据",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "hDGFrCaAptM",
                "china_cdn_id": "hDGFrCaAptM.mp4"
              }
            },
            {
              "id": 569697,
              "key": "b345e27a-b582-42d3-a36f-c43cda5d3a59",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "同学们可以通过右键另存为下载数据[daily_engagement_full.csv](https://s3.amazonaws.com/video.udacity-data.com/topher/2017/May/59192b12_daily-engagement-full/daily-engagement-full.csv)。",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 176505,
          "key": "54301490080923",
          "title": "NumPy 数组",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54301490080923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 568400,
              "key": "cb43d67d-53c1-4142-8fa3-261c042087ea",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "提示：我们并没有对课堂中的quiz中的英文注释给出中文翻译。因为：\n1. 一般来说代码中的注释最好全部用英文，中国开发者也是如此。\n2. 英文是开发者必须要掌握的技能。\n3. quiz中的注释不是很长，如果确实不能理解的话可以使用翻译软件进行查询。",
              "instructor_notes": ""
            },
            {
              "id": 174124,
              "key": "5430149008",
              "title": "NumPy 数组",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5430149008",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "7GeiZ8IVZfE",
                  "china_cdn_id": "7GeiZ8IVZfE.mp4"
                },
                "text": null
              },
              "question": {
                "title": "NumPy 数组 - 练习",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5146514626",
                "initial_code_files": [
                  {
                    "text": "import numpy as np\n\n# First 20 countries with employment data\ncountries = np.array([\n    'Afghanistan', 'Albania', 'Algeria', 'Angola', 'Argentina',\n    'Armenia', 'Australia', 'Austria', 'Azerbaijan', 'Bahamas',\n    'Bahrain', 'Bangladesh', 'Barbados', 'Belarus', 'Belgium',\n    'Belize', 'Benin', 'Bhutan', 'Bolivia',\n    'Bosnia and Herzegovina'\n])\n\n# Employment data in 2007 for those 20 countries\nemployment = np.array([\n    55.70000076,  51.40000153,  50.5       ,  75.69999695,\n    58.40000153,  40.09999847,  61.5       ,  57.09999847,\n    60.90000153,  66.59999847,  60.40000153,  68.09999847,\n    66.90000153,  53.40000153,  48.59999847,  56.79999924,\n    71.59999847,  58.40000153,  70.40000153,  41.20000076\n])\n\n# Change False to True for each block of code to see what it does\n\n# Accessing elements\nif False:\n    print countries[0]\n    print countries[3]\n\n# Slicing\nif False:\n    print countries[0:3]\n    print countries[:3]\n    print countries[17:]\n    print countries[:]\n\n# Element types\nif False:\n    print countries.dtype\n    print employment.dtype\n    print np.array([0, 1, 2, 3]).dtype\n    print np.array([1.0, 1.5, 2.0, 2.5]).dtype\n    print np.array([True, False, True]).dtype\n    print np.array(['AL', 'AK', 'AZ', 'AR', 'CA']).dtype\n\n# Looping\nif False:\n    for country in countries:\n        print 'Examining country {}'.format(country)\n\n    for i in range(len(countries)):\n        country = countries[i]\n        country_employment = employment[i]\n        print 'Country {} has employment {}'.format(country,\n                country_employment)\n\n# Numpy functions\nif False:\n    print employment.mean()\n    print employment.std()\n    print employment.max()\n    print employment.sum()\n\ndef max_employment(countries, employment):\n    '''\n    Fill in this function to return the name of the country\n    with the highest employment in the given employment\n    data, and the employment in that country.\n    '''\n    max_country = None      # Replace this with your code\n    max_value = None   # Replace this with your code\n\n    return (max_country, max_value)",
                    "name": "numpy_arrays.py"
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "UG924zKZF7U",
                  "china_cdn_id": "UG924zKZF7U.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 176503,
          "key": "54301490110923",
          "title": "向量化运算",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54301490110923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 174125,
              "key": "5430149011",
              "title": "向量化运算",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5430149011",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "-InZYjwPsKs",
                  "china_cdn_id": "-InZYjwPsKs.mp4"
                },
                "text": null
              },
              "question": {
                "title": "向量化运算 - 练习",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/fWQoh1ENxr5wWGYGO8MPCoOmtbJ6W-6piAir5pAAajvRcgwUEAriukHyYN1oH7BBi3ECx1-cYok3ddRZwPg=s0#w=1440&h=810",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5430149011",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "5436018550",
                "widgets": [
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio1",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.584982855361596,
                      "y": 0.342814578713969
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio2",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.5863661159600998,
                      "y": 0.5675235587583148
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio3",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.5872038653366584,
                      "y": 0.7549889135254989
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "q5PjL9GkVtM",
                  "china_cdn_id": "q5PjL9GkVtM.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 176504,
          "key": "54301490140923",
          "title": "乘以标量",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54301490140923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 174126,
              "key": "5430149014",
              "title": "乘以标量",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5430149014",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "jP1KfLaTtpU",
                  "china_cdn_id": "jP1KfLaTtpU.mp4"
                },
                "text": null
              },
              "question": {
                "title": "乘以标量 - 练习",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/bwKczFVxheZVyvOWIBYxW9dbChRG3QNeNQPEjT98MjUwH3TH9e_Df3ccVPCbx8F5mDQqrH8hSzz_XRrMh_I=s0#w=1440&h=810",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5430149014",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "5393753542",
                "widgets": [
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio1",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.5071890586034913,
                      "y": 0.38234478935698446
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio2",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.5102478179551122,
                      "y": 0.6028963414634146
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio3",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.5107543640897756,
                      "y": 0.8053630820399114
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "si8AcC5pTfM",
                  "china_cdn_id": "si8AcC5pTfM.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 176502,
          "key": "54301490170923",
          "title": "计算整体完成率",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54301490170923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 174127,
              "key": "5430149017",
              "title": "计算整体完成率",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "### 位运算\n\n查看[此文章](https://en.wikipedia.org/wiki/Bitwise_operation)，进一步了解位运算。\n\n在 NumPy 中，`a & b` 执行 `a` 和 `b` 的“**按位与**”。这不一定要与执行“**逻辑与**”（“与”没有对应的向量版）的 `a` 和 `b` 相同。但是，如果 `a` 和 `b` 都是布尔型而非整数型数组，“**按位与**”和“**逻辑与**”的作用是一样的。\n\n如果你想要对整数型向量进行“**逻辑与**”计算，你可以使用 NumPy 函数 [`np.logical_and(a,b)`](http://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_and.html)，或者先把它们转换为布尔型向量。\n\n类似地，`a | b` 执行“**按位或**”，而 `~a` 执行“**按位非**”。但是，如果数组包含布尔值，它们与执行“**逻辑或**”和“**逻辑非**”的效果是一样的。\n\nNumPy 也有类似的函数：[逻辑或](http://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_or.html)，[逻辑非](http://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_not.html)，用于对含整数型数值的数组进行逻辑运算。\n\n在答案中，我们要用 `/ 2.`，而不是 `/ 2`。注意 2 后面有一个句点。这是因为在 Python 2 中，将一个整数除以另一个整数 (`2`)，会舍去分数。所以如果输入是整数值，就会丢失信息。因此使用浮点数值 (`2.`)，我们就能保留结果小数点后的值了。\n\n------\n\n**纠正：** 视频中单元格 [3]  的运行结果并不正确，可能是由于变量 `male` 没有被正常导入所致。单元格运行的正确结果应该是以下方数组开头的矩阵：\n```\narray([ 192.83205,  205.28855,  202.82258,  186.63257,  206.91115,\n```",
              "user_state": {
                "node_key": "5430149017",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "6CiZB0N7y64",
                  "china_cdn_id": "6CiZB0N7y64.mp4"
                },
                "text": null
              },
              "question": {
                "title": "计算整体完成率 - 练习",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5188068538",
                "initial_code_files": [
                  {
                    "text": "import numpy as np\n\n# Change False to True for each block of code to see what it does\n\n# Arithmetic operations between 2 NumPy arrays\nif False:\n    a = np.array([1, 2, 3, 4])\n    b = np.array([1, 2, 1, 2])\n    \n    print a + b\n    print a - b\n    print a * b\n    print a / b\n    print a ** b\n    \n# Arithmetic operations between a NumPy array and a single number\nif False:\n    a = np.array([1, 2, 3, 4])\n    b = 2\n    \n    print a + b\n    print a - b\n    print a * b\n    print a / b\n    print a ** b\n    \n# Logical operations with NumPy arrays\nif False:\n    a = np.array([True, True, False, False])\n    b = np.array([True, False, True, False])\n    \n    print a & b\n    print a | b\n    print ~a\n    \n    print a & True\n    print a & False\n    \n    print a | True\n    print a | False\n    \n# Comparison operations between 2 NumPy Arrays\nif False:\n    a = np.array([1, 2, 3, 4, 5])\n    b = np.array([5, 4, 3, 2, 1])\n    \n    print a > b\n    print a >= b\n    print a < b\n    print a <= b\n    print a == b\n    print a != b\n    \n# Comparison operations between a NumPy array and a single number\nif False:\n    a = np.array([1, 2, 3, 4])\n    b = 2\n    \n    print a > b\n    print a >= b\n    print a < b\n    print a <= b\n    print a == b\n    print a != b\n    \n# First 20 countries with school completion data\ncountries = np.array([\n       'Algeria', 'Argentina', 'Armenia', 'Aruba', 'Austria','Azerbaijan',\n       'Bahamas', 'Barbados', 'Belarus', 'Belgium', 'Belize', 'Bolivia',\n       'Botswana', 'Brunei', 'Bulgaria', 'Burkina Faso', 'Burundi',\n       'Cambodia', 'Cameroon', 'Cape Verde'\n])\n\n# Female school completion rate in 2007 for those 20 countries\nfemale_completion = np.array([\n    97.35583,  104.62379,  103.02998,   95.14321,  103.69019,\n    98.49185,  100.88828,   95.43974,   92.11484,   91.54804,\n    95.98029,   98.22902,   96.12179,  119.28105,   97.84627,\n    29.07386,   38.41644,   90.70509,   51.7478 ,   95.45072\n])\n\n# Male school completion rate in 2007 for those 20 countries\nmale_completion = np.array([\n     95.47622,  100.66476,   99.7926 ,   91.48936,  103.22096,\n     97.80458,  103.81398,   88.11736,   93.55611,   87.76347,\n    102.45714,   98.73953,   92.22388,  115.3892 ,   98.70502,\n     37.00692,   45.39401,   91.22084,   62.42028,   90.66958\n])\n\ndef overall_completion_rate(female_completion, male_completion):\n    '''\n    Fill in this function to return a NumPy array containing the overall\n    school completion rate for each country. The arguments are NumPy\n    arrays giving the female and male completion of each country in\n    the same order.\n    '''\n    return None",
                    "name": "overall_completion_rate.py"
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "zlopUR9utUY",
                  "china_cdn_id": "zlopUR9utUY.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 176506,
          "key": "54301490200923",
          "title": "标准化数据",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54301490200923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 174128,
              "key": "5430149020",
              "title": "标准化数据",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5430149020",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "Mta8Hv36k7Q",
                  "china_cdn_id": "Mta8Hv36k7Q.mp4"
                },
                "text": null
              },
              "question": {
                "title": "归一化数据 - 练习",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5188929289",
                "initial_code_files": [
                  {
                    "text": "import numpy as np\n\n# First 20 countries with employment data\ncountries = np.array([\n    'Afghanistan', 'Albania', 'Algeria', 'Angola', 'Argentina',\n    'Armenia', 'Australia', 'Austria', 'Azerbaijan', 'Bahamas',\n    'Bahrain', 'Bangladesh', 'Barbados', 'Belarus', 'Belgium',\n    'Belize', 'Benin', 'Bhutan', 'Bolivia',\n    'Bosnia and Herzegovina'\n])\n\n# Employment data in 2007 for those 20 countries\nemployment = np.array([\n    55.70000076,  51.40000153,  50.5       ,  75.69999695,\n    58.40000153,  40.09999847,  61.5       ,  57.09999847,\n    60.90000153,  66.59999847,  60.40000153,  68.09999847,\n    66.90000153,  53.40000153,  48.59999847,  56.79999924,\n    71.59999847,  58.40000153,  70.40000153,  41.20000076\n])\n\n# Change this country name to change what country will be printed when you\n# click \"Test Run\". Your function will be called to determine the standardized\n# score for this country for each of the given 5 Gapminder variables in 2007.\n# The possible country names are available in the Downloadables section.\n\ncountry_name = 'United States'\n\ndef standardize_data(values):\n    '''\n    Fill in this function to return a standardized version of the given values,\n    which will be in a NumPy array. Each value should be translated into the\n    number of standard deviations that value is away from the mean of the data.\n    (A positive number indicates a value higher than the mean, and a negative\n    number indicates a value lower than the mean.)\n    '''\n    return None",
                    "name": "standardizing_data.py"
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "a6oG3g7aKR4",
                  "china_cdn_id": "a6oG3g7aKR4.mp4"
                }
              }
            },
            {
              "id": 613228,
              "key": "28f47109-077d-4b58-b761-17c9587aae9e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "备注：在答案视频在1:06处，应当为`return standardized_values`.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 176507,
          "key": "54301490230923",
          "title": "NumPy 索引数组",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54301490230923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 174129,
              "key": "5430149023",
              "title": "NumPy 索引数组",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5430149023",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "MlE3BuOvWnU",
                  "china_cdn_id": "MlE3BuOvWnU.mp4"
                },
                "text": null
              },
              "question": {
                "title": "NumPy 索引数组 - 练习",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5188328536",
                "initial_code_files": [
                  {
                    "text": "import numpy as np\n\n# Change False to True for each block of code to see what it does\n\n# Using index arrays\nif False:\n    a = np.array([1, 2, 3, 4])\n    b = np.array([True, True, False, False])\n    \n    print a[b]\n    print a[np.array([True, False, True, False])]\n    \n# Creating the index array using vectorized operations\nif False:\n    a = np.array([1, 2, 3, 2, 1])\n    b = (a >= 2)\n    \n    print a[b]\n    print a[a >= 2]\n    \n# Creating the index array using vectorized operations on another array\nif False:\n    a = np.array([1, 2, 3, 4, 5])\n    b = np.array([1, 2, 3, 2, 1])\n    \n    print b == 2\n    print a[b == 2]\n\ndef mean_time_for_paid_students(time_spent, days_to_cancel):\n    '''\n    Fill in this function to calculate the mean time spent in the classroom\n    for students who stayed enrolled at least (greater than or equal to) 7 days.\n    Unlike in Lesson 1, you can assume that days_to_cancel will contain only\n    integers (there are no students who have not canceled yet).\n    \n    The arguments are NumPy arrays. time_spent contains the amount of time spent\n    in the classroom for each student, and days_to_cancel contains the number\n    of days until each student cancel. The data is given in the same order\n    in both arrays.\n    '''\n    return None\n\n# Time spent in the classroom in the first week for 20 students\ntime_spent = np.array([\n       12.89697233,    0.        ,   64.55043217,    0.        ,\n       24.2315615 ,   39.991625  ,    0.        ,    0.        ,\n      147.20683783,    0.        ,    0.        ,    0.        ,\n       45.18261617,  157.60454283,  133.2434615 ,   52.85000767,\n        0.        ,   54.9204785 ,   26.78142417,    0.\n])\n\n# Days to cancel for 20 students\ndays_to_cancel = np.array([\n      4,   5,  37,   3,  12,   4,  35,  38,   5,  37,   3,   3,  68,\n     38,  98,   2, 249,   2, 127,  35\n])\n",
                    "name": "numpy_index_arrays.py"
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "93y6ms_fuQQ",
                  "china_cdn_id": "93y6ms_fuQQ.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 176508,
          "key": "54301490260923",
          "title": "+ 与 +=",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54301490260923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 174130,
              "key": "5430149026",
              "title": "+ 与 +=",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5430149026",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "J9FWaCBXhIk",
                  "china_cdn_id": "J9FWaCBXhIk.mp4"
                },
                "text": null
              },
              "question": {
                "title": "+ 与 += - 练习",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/uI-26i5qPSqXiC48s0TALYH23EwzXU0FhKeJ81PgJx4TP64FZ5FX7mM4YzoNPo1YJLA-lMJIS2IImfDrdjU=s0#w=1440&h=810",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5430149026",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "5393474438",
                "widgets": [
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio1",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.16217269326683292,
                      "y": 0.714835088691796
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio2",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.16164666458852867,
                      "y": 0.8023143015521065
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio3",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.162348036159601,
                      "y": 0.8897935144124168
                    }
                  },
                  {
                    "group": "group2",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio4",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.6315850997506235,
                      "y": 0.6877078713968958
                    }
                  },
                  {
                    "group": "group2",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio5",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.6328319825436409,
                      "y": 0.780245288248337
                    }
                  },
                  {
                    "group": "group2",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio6",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.637390897755611,
                      "y": 0.8649528824833703
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "rQivl4aJCOI",
                  "china_cdn_id": "rQivl4aJCOI.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 176509,
          "key": "54301490290923",
          "title": "原地与非原地",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54301490290923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 174131,
              "key": "5430149029",
              "title": "原地与非原地",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5430149029",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "STqN_v6Iz5o",
                  "china_cdn_id": "STqN_v6Iz5o.mp4"
                },
                "text": null
              },
              "question": {
                "title": "原地与非原地 - 练习",
                "alt_text": null,
                "background_image": "//lh3.googleusercontent.com/OLHlfSfLIgTaLdQ38_fSDHgsJe4YW1zM3nTl0-1Z1koXWgcOi7Xqt186Q9h_4GjBw-P2x6sC3a80U27F4I0=s0#w=1440&h=810",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5430149029",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "5395654502",
                "widgets": [
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio1",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.6083424251870324,
                      "y": 0.3129157427937916
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio2",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.6081281172069826,
                      "y": 0.413075110864745
                    }
                  },
                  {
                    "group": "group1",
                    "initial_value": "false",
                    "label": null,
                    "marker": "radio3",
                    "model": "RadioButtonWidget",
                    "is_text_area": null,
                    "tabindex": null,
                    "placement": {
                      "height": 0.05,
                      "width": 0.05,
                      "x": 0.6113037718204489,
                      "y": 0.5139273835920177
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "TVyv8acRPrs",
                  "china_cdn_id": "TVyv8acRPrs.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 176510,
          "key": "54301490320923",
          "title": "Pandas Series",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54301490320923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 174132,
              "key": "5430149032",
              "title": "Pandas Series",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5430149032",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "8zWQmAVPthY",
                  "china_cdn_id": "8zWQmAVPthY.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Pandas Series - 练习",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5188928647",
                "initial_code_files": [
                  {
                    "text": "import pandas as pd\n\ncountries = ['Albania', 'Algeria', 'Andorra', 'Angola', 'Antigua and Barbuda',\n             'Argentina', 'Armenia', 'Australia', 'Austria', 'Azerbaijan',\n             'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus',\n             'Belgium', 'Belize', 'Benin', 'Bhutan', 'Bolivia']\n\nlife_expectancy_values = [74.7,  75. ,  83.4,  57.6,  74.6,  75.4,  72.3,  81.5,  80.2,\n                          70.3,  72.1,  76.4,  68.1,  75.2,  69.8,  79.4,  70.8,  62.7,\n                          67.3,  70.6]\n\ngdp_values = [ 1681.61390973,   2155.48523109,  21495.80508273,    562.98768478,\n              13495.1274663 ,   9388.68852258,   1424.19056199,  24765.54890176,\n              27036.48733192,   1945.63754911,  21721.61840978,  13373.21993972,\n                483.97086804,   9783.98417323,   2253.46411147,  25034.66692293,\n               3680.91642923,    366.04496652,   1175.92638695,   1132.21387981]\n\n# Life expectancy and gdp data in 2007 for 20 countries\nlife_expectancy = pd.Series(life_expectancy_values)\ngdp = pd.Series(gdp_values)\n\n# Change False to True for each block of code to see what it does\n\n# Accessing elements and slicing\nif False:\n    print life_expectancy[0]\n    print gdp[3:6]\n    \n# Looping\nif False:\n    for country_life_expectancy in life_expectancy:\n        print 'Examining life expectancy {}'.format(country_life_expectancy)\n        \n# Pandas functions\nif False:\n    print life_expectancy.mean()\n    print life_expectancy.std()\n    print gdp.max()\n    print gdp.sum()\n\n# Vectorized operations and index arrays\nif False:\n    a = pd.Series([1, 2, 3, 4])\n    b = pd.Series([1, 2, 1, 2])\n  \n    print a + b\n    print a * 2\n    print a >= 3\n    print a[a >= 3]\n   \ndef variable_correlation(variable1, variable2):\n    '''\n    Fill in this function to calculate the number of data points for which\n    the directions of variable1 and variable2 relative to the mean are the\n    same, and the number of data points for which they are different.\n    Direction here means whether each value is above or below its mean.\n    \n    You can classify cases where the value is equal to the mean for one or\n    both variables however you like.\n    \n    Each argument will be a Pandas series.\n    \n    For example, if the inputs were pd.Series([1, 2, 3, 4]) and\n    pd.Series([4, 5, 6, 7]), then the output would be (4, 0).\n    This is because 1 and 4 are both below their means, 2 and 5 are both\n    below, 3 and 6 are both above, and 4 and 7 are both above.\n    \n    On the other hand, if the inputs were pd.Series([1, 2, 3, 4]) and\n    pd.Series([7, 6, 5, 4]), then the output would be (0, 4).\n    This is because 1 is below its mean but 7 is above its mean, and\n    so on.\n    '''\n    num_same_direction = None        # Replace this with your code\n    num_different_direction = None   # Replace this with your code\n    \n    return (num_same_direction, num_different_direction)",
                    "name": "pandas_series.py"
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "V7zAB9dUaFY",
                  "china_cdn_id": "V7zAB9dUaFY.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 176511,
          "key": "54301490350923",
          "title": "Series 索引",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54301490350923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 174133,
              "key": "5430149035",
              "title": "Series 索引",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "### Pandas argmax()\n\n你可以在[此处](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.argmax.html) 找到有关 Pandas `argmax()` 函数的文档。",
              "user_state": {
                "node_key": "5430149035",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "RK6CPtXdK5Q",
                  "china_cdn_id": "RK6CPtXdK5Q.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Series 索引 - 练习",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5191668674",
                "initial_code_files": [
                  {
                    "text": "import pandas as pd\n\ncountries = [\n    'Afghanistan', 'Albania', 'Algeria', 'Angola',\n    'Argentina', 'Armenia', 'Australia', 'Austria',\n    'Azerbaijan', 'Bahamas', 'Bahrain', 'Bangladesh',\n    'Barbados', 'Belarus', 'Belgium', 'Belize',\n    'Benin', 'Bhutan', 'Bolivia', 'Bosnia and Herzegovina',\n]\n\n\nemployment_values = [\n    55.70000076,  51.40000153,  50.5       ,  75.69999695,\n    58.40000153,  40.09999847,  61.5       ,  57.09999847,\n    60.90000153,  66.59999847,  60.40000153,  68.09999847,\n    66.90000153,  53.40000153,  48.59999847,  56.79999924,\n    71.59999847,  58.40000153,  70.40000153,  41.20000076,\n]\n\n# Employment data in 2007 for 20 countries\nemployment = pd.Series(employment_values, index=countries)\n\ndef max_employment(employment):\n    '''\n    Fill in this function to return the name of the country\n    with the highest employment in the given employment\n    data, and the employment in that country.\n    \n    The input will be a Pandas series where the values\n    are employment and the index is country names.\n    \n    Try using the Pandas idxmax() function. Documention can\n    be found here:\n    http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.idxmax.html\n    '''\n    max_country = None      # Replace this with your code\n    max_value = None   # Replace this with your code\n\n    return (max_country, max_value)",
                    "name": "series_indexes.py"
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "FA4mkuoDoJI",
                  "china_cdn_id": "FA4mkuoDoJI.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 176512,
          "key": "54301490380923",
          "title": "向量化运算和 Series 索引",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54301490380923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 174134,
              "key": "5430149038",
              "title": "向量化运算和 Series 索引",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5430149038",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "QX_KFUXtHkw",
                  "china_cdn_id": "QX_KFUXtHkw.mp4"
                },
                "text": null
              },
              "question": {
                "title": "向量化运算和 Series 索引 - 练习",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5193828615",
                "initial_code_files": [
                  {
                    "text": "import pandas as pd\n\n# Change False to True for each block of code to see what it does\n\n# Addition when indexes are the same\nif False:\n    s1 = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\n    s2 = pd.Series([10, 20, 30, 40], index=['a', 'b', 'c', 'd'])\n    print s1 + s2\n\n# Indexes have same elements in a different order\nif False:\n    s1 = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\n    s2 = pd.Series([10, 20, 30, 40], index=['b', 'd', 'a', 'c'])\n    print s1 + s2\n\n# Indexes overlap, but do not have exactly the same elements\nif False:\n    s1 = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\n    s2 = pd.Series([10, 20, 30, 40], index=['c', 'd', 'e', 'f'])\n    print s1 + s2\n\n# Indexes do not overlap\nif False:\n    s1 = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\n    s2 = pd.Series([10, 20, 30, 40], index=['e', 'f', 'g', 'h'])\n    print s1 + s2",
                    "name": "series_vectorized_operations.py"
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "BqQbAqok8JU",
                  "china_cdn_id": "BqQbAqok8JU.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 176514,
          "key": "54301490410923",
          "title": "填充缺失值",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54301490410923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 572124,
              "key": "8824b2cb-5053-42b7-8b6d-a576a2c9e9a2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "请查看fill_value参数的具体说明：\nhttps://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.add.html\nfill_value的默认值为None，如果设置了fill_value的值，该数值应当为浮点类型float.",
              "instructor_notes": ""
            },
            {
              "id": 174135,
              "key": "5430149041",
              "title": "填充缺失值",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5430149041",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "l3ergsxocok",
                  "china_cdn_id": "l3ergsxocok.mp4"
                },
                "text": null
              },
              "question": {
                "title": "填充缺失值 - 练习",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5190918633",
                "initial_code_files": [
                  {
                    "text": "import pandas as pd\n\ns1 = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\ns2 = pd.Series([10, 20, 30, 40], index=['c', 'd', 'e', 'f'])\n\n# Try to write code that will add the 2 previous series together,\n# but treating missing values from either series as 0. The result\n# when printed out should be similar to the following line:\n# print pd.Series([1, 2, 13, 24, 30, 40], index=['a', 'b', 'c', 'd', 'e', 'f'])",
                    "name": "filling_missing_values.py"
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "-xVYQQHNNuM",
                  "china_cdn_id": "-xVYQQHNNuM.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 176513,
          "key": "54301490440923",
          "title": "Pandas Series apply()",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54301490440923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 174136,
              "key": "5430149044",
              "title": "Pandas Series apply()",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "### split()\n\n你可以在[此处](https://docs.python.org/2/library/stdtypes.html#str.split) 找到有关 Python `split()` 函数的文档。",
              "user_state": {
                "node_key": "5430149044",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "c8SD8zn5FTo",
                  "china_cdn_id": "c8SD8zn5FTo.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Pandas Series apply() - 练习",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5192518659",
                "initial_code_files": [
                  {
                    "text": "import pandas as pd\n\n# Change False to True to see what the following block of code does\n\n# Example pandas apply() usage (although this could have been done\n# without apply() using vectorized operations)\nif False:\n    s = pd.Series([1, 2, 3, 4, 5])\n    def add_one(x):\n        return x + 1\n    print s.apply(add_one)\n\nnames = pd.Series([\n    'Andre Agassi',\n    'Barry Bonds',\n    'Christopher Columbus',\n    'Daniel Defoe',\n    'Emilio Estevez',\n    'Fred Flintstone',\n    'Greta Garbo',\n    'Humbert Humbert',\n    'Ivan Ilych',\n    'James Joyce',\n    'Keira Knightley',\n    'Lois Lane',\n    'Mike Myers',\n    'Nick Nolte',\n    'Ozzy Osbourne',\n    'Pablo Picasso',\n    'Quirinus Quirrell',\n    'Rachael Ray',\n    'Susan Sarandon',\n    'Tina Turner',\n    'Ugueth Urbina',\n    'Vince Vaughn',\n    'Woodrow Wilson',\n    'Yoji Yamada',\n    'Zinedine Zidane'\n])\n\ndef reverse_names(names):\n    '''\n    Fill in this function to return a new series where each name\n    in the input series has been transformed from the format\n    \"Firstname Lastname\" to \"Lastname, FirstName\".\n    \n    Try to use the Pandas apply() function rather than a loop.\n    '''\n    return None",
                    "name": "pandas_series_apply.py"
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "lhcl1UjM_0Q",
                  "china_cdn_id": "lhcl1UjM_0Q.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 176516,
          "key": "54301490470923",
          "title": "在 Pandas 中绘图",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54301490470923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 174137,
              "key": "5430149047",
              "title": "在 Pandas 中绘图",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5430149047",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "",
                  "china_cdn_id": ".mp4"
                },
                "text": "## 在 Pandas 中绘图\n\n如果变量 `data` 是一个 NumPy 数组或 Pandas Series，就像它是一个列表一样，代码\n\n<pre>\nimport matplotlib.pyplot as plt\nplt.hist(data)\n</pre>\n\n将创建数据的直方图。\n\nPandas 库实际上已经内置了 matplotlib 库的绘图函数。也就是说，如果对 Pandas 库中的 Series 数据绘图，不用 import matplotlib 就能完成绘图，你可以使用 `data.hist()` 创建直方图。另外，例子中的 seaborn 也是一种绘图样式库。\n\n在此情形中，这两者没有区别，但有时候 Pandas 封装器更加方便。例如，你可以使用 `data.plot()` 创建 Series 的线条图。Series 索引被用于 x 轴，值被用于 y 轴。\n\n在随后的测试题中，我们创建了一个 Series，其中包含本节课所涉及到的各种变量。选择你感兴趣的国家，创建每个变量随时间变化的图形。\n\n每次你点击“测试运行”时，优达学城编辑器都将只显示一个图形。所以，你需要点击多次“测试运行”来查看多张图型。如果你在本地运行绘图代码，你可能会需要加入一行 `plt.show()` 代码。"
              },
              "question": {
                "title": "在 Pandas 中绘图 - 练习",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5194268547",
                "initial_code_files": [
                  {
                    "text": "import pandas as pd\nimport seaborn as sns\n\n# The following code reads all the Gapminder data into Pandas DataFrames. You'll\n# learn about DataFrames next lesson.\n\npath = '/datasets/ud170/gapminder/'\nemployment = pd.read_csv(path + 'employment_above_15.csv', index_col='Country')\nfemale_completion = pd.read_csv(path + 'female_completion_rate.csv', index_col='Country')\nmale_completion = pd.read_csv(path + 'male_completion_rate.csv', index_col='Country')\nlife_expectancy = pd.read_csv(path + 'life_expectancy.csv', index_col='Country')\ngdp = pd.read_csv(path + 'gdp_per_capita.csv', index_col='Country')\n\n# The following code creates a Pandas Series for each variable for the United States.\n# You can change the string 'United States' to a country of your choice.\n\nemployment_us = employment.loc['United States']\nfemale_completion_us = female_completion.loc['United States']\nmale_completion_us = male_completion.loc['United States']\nlife_expectancy_us = life_expectancy.loc['United States']\ngdp_us = gdp.loc['United States']\n\n# Uncomment the following line of code to see the available country names\n# print employment.index.values\n\n# Use the Series defined above to create a plot of each variable over time for\n# the country of your choice. You will only be able to display one plot at a time\n# with each \"Test Run\".",
                    "name": "pandas_plotting.py"
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "ujJShz9YfAU",
                  "china_cdn_id": "ujJShz9YfAU.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 176515,
          "key": "54095394000923",
          "title": "总结",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "54095394000923",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 174138,
              "key": "5409539400",
              "title": "结论",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": null,
              "video": {
                "youtube_id": "P7H8wjCIJ6k",
                "china_cdn_id": "P7H8wjCIJ6k.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    }
  ]
}