{
  "data": {
    "lesson": {
      "id": 614562,
      "key": "45f0a5c9-5114-49d5-8fc4-35870ba1eb88",
      "title": "函数和标准库（选学）",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "学习 Python 中的函数和常用库。这部分不是必学，但学习后能更好地掌握和理解实战项目中的代码。",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/45f0a5c9-5114-49d5-8fc4-35870ba1eb88/614562/1544461485713/%E5%87%BD%E6%95%B0%E5%92%8C%E6%A0%87%E5%87%86%E5%BA%93%EF%BC%88%E9%80%89%E5%AD%A6%EF%BC%89+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/45f0a5c9-5114-49d5-8fc4-35870ba1eb88/614562/1544461483447/%E5%87%BD%E6%95%B0%E5%92%8C%E6%A0%87%E5%87%86%E5%BA%93%EF%BC%88%E9%80%89%E5%AD%A6%EF%BC%89+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 673352,
          "key": "9e4fabb5-7143-4af2-b78d-d4377f34bc0d",
          "title": "函数简介",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9e4fabb5-7143-4af2-b78d-d4377f34bc0d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 673350,
              "key": "056787ab-6db0-4de8-8512-2131a64dd49a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "欢迎学习函数课程！之前我们使用了几个Python的内置函数，在这节课中我们将自己编写函数并使用。\n\n### 什么是函数？\n\n函数是一段用来封装任务的使用代码。封装是指用一个简单的命令执行一系列步骤的方式。例如，你想要制作一块蛋糕，你需要准备面粉、糖霜、鸡蛋等一系列的材料，并用特定的方式将配料混合在一起，放置一段时间，将混合后的材料放到烤箱中制作，然后将烤制好的蛋糕冷却。在计算机编程中，函数能够将所有的流程封装到一个命令中，在这个例子中，我们需要定义一个bake_cake函数，将所有的原料作为input放到这个函数中，蛋糕就是我们的output。今后，只要我们想要制作蛋糕，就只需要给定输入，并执行这个函数就可以了，而不用关心具体的细节。函数还可以帮助我们整理和优化代码，尤其是减少重复性的代码。让我们来尝试一下吧！\n\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 673351,
              "key": "65efbae3-784a-4ca2-a0bf-73b5c2d4c7bd",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5ae187fb_function-machine2.svg/function-machine2.svg.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/65efbae3-784a-4ca2-a0bf-73b5c2d4c7bd",
              "caption": "",
              "alt": "",
              "width": 485,
              "height": 480,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 347261,
          "key": "bcd75648-55c5-4634-873a-acdb308cb9c1",
          "title": "定义函数 I",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bcd75648-55c5-4634-873a-acdb308cb9c1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 346959,
              "key": "8ce4f6e5-8f39-4066-a8b7-b1fa3ccb0674",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "圆柱体积函数\n=================\n我们以前使用过几种 Python 内置函数。现在，我们可以尝试自己编写函数。\n\n我们将编写一个计算圆柱体积的函数：圆柱的高乘以其半径的平方，再乘以 pi。",
              "instructor_notes": ""
            },
            {
              "id": 346960,
              "key": "735575fb-40a1-483c-8081-cdf0b7296a24",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/March/58d95b7b_intropy-l2-circular-cylinder-rh/intropy-l2-circular-cylinder-rh.svg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/735575fb-40a1-483c-8081-cdf0b7296a24",
              "caption": "已标明圆柱的半径 (r) 和高 (h)。\n图片改编自 [Wikimedia Commons](https://commons.wikimedia.org/wiki/File:Circular_cylinder_rh.svg)",
              "alt": null,
              "width": 425,
              "height": 480,
              "instructor_notes": null
            },
            {
              "id": 346961,
              "key": "c1b0f33d-d78d-4301-989a-c532d9ea37b7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "下面是一个计算圆柱体积的函数定义：\n\n```python\ndef cylinder_volume(height, radius):\n    pi = 3.14159\n    return height * pi * radius ** 2\n```\n\n在定义 `cylinder_volume` 函数后，可以按如下方法使用该函数：\n```python\n>>> cylinder_volume(10, 3)\n282.7431\n```\n\n现在我们来仔细分析一下这个函数的定义：",
              "instructor_notes": ""
            },
            {
              "id": 346962,
              "key": "b82f6c96-d39b-4564-8114-2cc75e604e29",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "分析函数定义\n====================",
              "instructor_notes": ""
            },
            {
              "id": 346963,
              "key": "519a242c-53d3-4646-a5ae-901107d58f9c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58ebabc1_intropy-l1-elements-of-function-definition2/intropy-l1-elements-of-function-definition2.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/519a242c-53d3-4646-a5ae-901107d58f9c",
              "caption": "函数定义的元素",
              "alt": null,
              "width": 964,
              "height": 522,
              "instructor_notes": null
            },
            {
              "id": 346964,
              "key": "26c6a84c-1043-4d24-8e02-08cc9f683c5f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "函数头\n------------------------\n- **(1)** `def` 关键字表示以下代码即函数定义。\n- **(2)** `def` 后跟的是函数的名称，在这个例子中是 `cylinder_volume`。函数名称应该是一个单词，可使用下划线连接两个单词。\n- **(3)** 函数定义第一行的最后一个元素是函数所需的参数（函数名的命名规则与变量名相同）。函数的参数是调用函数时传入的值；在函数体中将使用这些参数。请用逗号隔开参数，并将它们放在一对括号中。如果编写一个不带参数的函数，应使用一对空括号 `()`。函数定义的第一行以冒号 `:` 结尾。\n\n下面是一个不带参数的函数示例：\n```python\ndef print_greeting():\n    print('Hello World!')\n```\n该函数将打印出 \"Hello World\"。由于这个函数没有参数，因此我们使用一对空括号。\n\n函数体\n---------------------\n- **(4)** 使用四个空格缩进函数体。函数体是函数发挥作用的载体。我们可以在函数体内引用参数变量，以及定义新的变量。在此定义的 `pi` 变量是一个局部变量，这意味着它只能在 `cylinder_volume` 函数的函数体中使用。在其他地方尝试访问该变量会导致错误。\n- **(5)** 使用 `return` 关键字可获取函数结果。`return` 之后的表达式值是函数的输出值。\n- **(6)** 在这个示例中，我们返回一个表达式（即圆柱体积的公式）的值。请注意，该表达式先计算 `radius ** 2`，这是因为在数学运算中，先计算乘方，再计算乘法。（有时为了避免混淆，在涉及大量运算的数学表达式中，你也可以添加括号，如 `height * pi * (radius ** 2)` 。）如果你不想在设置返回值时使用表达式，也可以提前在函数体中计算体积，然后将其存储在名为 `volume` 的变量中，这将使我们可以 `return volume`。\n",
              "instructor_notes": ""
            },
            {
              "id": 346965,
              "key": "3886b3ec-9f15-4577-993c-c0e3d1a6f25e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "练习：人口密度函数\n=============\n请编写一个名为 `population_density` 的函数，该函数有两个参数，`population` 和 `land_area`（以平方公里计），并返回一个根据这些值计算出的人口密度。下面的练习中有两个测试案例，你可以使用这两个案例验证自己的函数是否可用。编写函数后，请使用测试答案按钮测试代码。",
              "instructor_notes": ""
            },
            {
              "id": 346966,
              "key": "11203165-e55a-47d3-9cd6-567c319ea059",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "11203165-e55a-47d3-9cd6-567c319ea059",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6308877915258880",
                "initial_code_files": [
                  {
                    "text": "# todo: define a function named `population_density` that takes two arguments, \n# `population` and `land_area` (in square kilometres), and returns a population \n# density calculated from those values.\n\n# Your code goes here!\n\n\n\n\n# Here are test cases to verify that your function works as expected:\ntest1 = population_density(10, 1)\nexpected_result1 = 10\nprint(\"expected result: {}, actual result: {}\".format(expected_result1, test1))\n\ntest2 = population_density(864816, 121.4)\nexpected_result2 = 7123.6902801\nprint(\"expected result: {}..., actual result: {}\".format(expected_result2, test2))",
                    "name": "pop_density.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 347263,
          "key": "6f282eeb-c6fe-4ef3-a80b-c1fde200daeb",
          "title": "定义函数 II",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6f282eeb-c6fe-4ef3-a80b-c1fde200daeb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 346967,
              "key": "36d0763c-8de7-4c75-804f-4d77e7a54099",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "练习解决方案：人口密度函数\n=============\n下面是我的解决方案：\n```python\ndef population_density(population, land_area):\n    return population/land_area\n```\n\n此处函数体只有一行，原因是在代码不混乱的前提下，我个人偏向于保持函数简单。你也可以将计算语句和返回语句分为两行来编写函数。",
              "instructor_notes": ""
            },
            {
              "id": 346968,
              "key": "bd7e8987-23b6-4d6f-9bfe-984bcd33405b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "缩进\n==========\n\n正如大家刚刚所见，缩进十分重要。这可以用来提醒我们 Python 函数体中存在什么代码、以及哪些代码在函数体之外。缩进不仅仅在函数定义中重要，在其他情况下也经常出现。在其他语言中，会使用 `{` 和 `}` 等符号表示代码块开始和结束位置，而在 Python 中，我们使用缩进来包含代码块。\n\n在 Python 中，缩进字符数通常是四个空格的倍数。请务必遵守此规定，因为更改缩进将会完全改变代码的含义。每位 Python 程序员都务必要遵循相同的缩进规定！",
              "instructor_notes": ""
            },
            {
              "id": 346969,
              "key": "57bfbc6e-4435-4be4-8f2f-aa4efcc6bbaf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "记录函数\n=============\n函数有助于将程序分解成更小的块。这样不仅易于编写，而且函数可重复使用，也使读取更加容易。如果一个程序需要计算多个人口密度，那么该程序可以多次调用 `population_density`，而不需要频繁写出公式，这样更加简便。\n\n由于函数有可读名称，所以我们在运行时更容易读懂代码。虽然人口密度公式本身并不复杂，但一个命名清晰的函数显然更容易识别。\n\n还有一种便于读取函数的方法，即文档字符串（也称为 \"docstrings\"）。Docstrings 是一种用于解释函数目的以及使用方法的注释。下面是一个 population_density 函数，函数中包含一个 docstring：\n\n\n```python\ndef population_density(population, land_area):\n    \"\"\"Calculate the population density of an area.\n\n    population: int. The population of the area\n    land_area: int or float. This function is unit-agnostic, if you pass\n               in values in terms of square km or square miles the\n               function will return a density in those units.\n    \"\"\"\n    return population / land_area\n```\n\nDocstrings 外是三重引号，即 `\"\"\"`。docstring 字符串的第一行简要解释函数目的。如果你觉得这样的说明就够了，即可在此结束 docstring，单行 docstrings 也是完全可以的。但如果函数十分复杂，为了确保说明清晰，可以在一行总结后添加一段更详细的描述段落。\n\n另外一种 docstring 元素则用于解释函数参数。可以在此列出参数，说明参数目的以及参数类型。\n\ndocstring 的每一部分都是可选的，docstring 本身也是如此。但请记得，编写代码始终比阅读代码更加容易。如果能使合作伙伴（包括未来的你！）更易读懂你的代码，那么应该尽可能地为他人、为自己提供便利。\n\n你可以在 https://www.python.org/dev/peps/pep-0257/ 上阅读更详细的 docstring 规定解释。",
              "instructor_notes": ""
            },
            {
              "id": 346970,
              "key": "33aa154a-dba7-45b1-be19-888ea9da4b55",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "一个不返回任何值的函数\n==================\n\n可以将函数想象为一台接收输入（参数），然后进行处理，最后输出结果（返回值）的小型机器。这是一个很好的比喻，但是不太确切。有一些函数根本不返回任何值，比如 `print`，：\n\n```python\n>>> return_value = print(\"I wish to register a complaint.\")\nI wish to register a complaint.\n>>> print(return_value)\nNone \n```\n`print` 在控制台上**显示**文本，但是我们看到的其**返回值**是 `None`。`None` 是 Python 中的一个特殊值，表示值的缺失。如果函数没有明确返回任何其他内容，则 `None` 是其默认返回值。\n\n我们来看一则示例。这是此前练习中用到的测试代码，我们将其编写为一组可复用的函数：\n\n```python\ndef print_testcase(expected_value, actual_value):\n    print(\"expected value: {}, actual value: {}\".format(expected_value, actual_value))\n```\n\n这个函数不像之前的示例，它没有返回语句，但它仍然是一个有效的函数。我们来试一下：\n\n```python\n>>> return_value = print_testcase(42, 42)\nexpected value: 42, actual value: 42\n```\n调用函数时，输出是 `print` 打印出的内容。但是给 `return_value` 的赋值是什么？我们可以用 `print` 打印\n `return_value` 来进行检查！\n\n```python\n>>> print(return_value)\nNone\n```",
              "instructor_notes": ""
            },
            {
              "id": 346971,
              "key": "f66f9f37-c14e-46d5-9be4-8272fe18cde9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "练习：`readable_timedelta`\n================\n\n请编写一个名为 `readable_timedelta` 的函数。该函数接收一个参数（一个整数型变量 `days`），并返回一个字符串，表示传入的天数有几星期零几天。例如，`readable_timedelta(10)` 应返回 `1 week(s) and 3 day(s).`。\n\n编写时请加上一个 docstring，用于说明该函数的目的。",
              "instructor_notes": ""
            },
            {
              "id": 346972,
              "key": "31d1c9c7-adbb-424f-b824-996e05842b5d",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "31d1c9c7-adbb-424f-b824-996e05842b5d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6468074837508096",
                "initial_code_files": [
                  {
                    "text": "# Write your code for readable_timedelta here.\n\n\n# Uncomment this function call to test it:\n# print(readable_timedelta(10))",
                    "name": "student.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 347262,
          "key": "a46a918c-cee7-4f8d-8831-766171b6efec",
          "title": "定义函数 III",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a46a918c-cee7-4f8d-8831-766171b6efec",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 346973,
              "key": "ed47f225-e73b-49e0-95d1-7f7df343dd71",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "练习解决方案：readable_timedelta\n==============\n\n```python\ndef readable_timedelta(days):\n    \"\"\"Print the number of weeks and days in a number of days.\"\"\"\n    #to get the number of weeks we use integer division\n    weeks = days // 7\n    #to get the number of days that remain we use %, the modulus operator\n    remainder = days % 7\n    return \"{} week(s) and {} day(s).\".format(weeks, remainder)\n```\n\n真棒！你编写出了你的第一个函数。接下来你将学习和编写更多的函数！",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 347296,
          "key": "25c1ebb2-9d7b-4c47-8bac-45c1bd4dfdf1",
          "title": "默认参数",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "25c1ebb2-9d7b-4c47-8bac-45c1bd4dfdf1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 347127,
              "key": "4b16a843-e7ee-4035-8bbc-ab177d0e48da",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "默认参数值\n=================\n现在我们来重新看看在前面的课程中（数据结构和循环 -> For循环）出现的 `starbox` 函数，不过这次我们作了一处修改。这个 `box` 函数可使用任何符号绘制方框，而不仅仅是`*`。\n\n```python\ndef box(width, height, symbol):\n    \"\"\"print a box made up of asterisks, or some other character.\n\n    width: width of box in characters, must be at least 2\n    height: height of box in lines, must be at least 2\n    symbol: a single character string used to draw the box edges\n    \"\"\"\n    print(symbol * width) # print top edge of box\n   \n    # print sides of box\n    for _ in range(height-2):\n        print(symbol + \" \" * (width-2) + symbol) \n\n    print(symbol * width) # print bottom edge of box\n```\n\n这个新增功能非常好，但是调用该函数时，你还必须多指定一个参数。如果你只想绘制一个方框，而不在乎使用什么符号，这个功能反倒有些累赘了。但幸好 Python 有一个功能，可使参数具有灵活性，也可以指定默认参数。\n\n我们可以通过对函数的第一行做出以下更改，来指定 `symbol` 参数的默认值：\n\n```python\ndef box(width, height, symbol='*'):\n```\n\n现在我们可以传入两个参数或三个参数来调用函数。如果第三个参数被省略，那么则使用 `*` 作为默认值。\n\n```python\n>>> box(7, 5)\n*******\n*     *\n*     *\n*     *\n*******\n\n>>> box(7, 5, '#')\n#######\n#     #\n#     #\n#     #\n#######\n```",
              "instructor_notes": ""
            },
            {
              "id": 347128,
              "key": "253e93d2-7312-427f-a496-6937a0473689",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "练习：默认参数\n===============\n在下面的练习中，`print_list` 函数以列表作为输入，并逐行打印列表内的元素，以数字编号或项目符号开头。该函数具有三个参数：\n- `l`：要打印的列表\n- `numbered`：设置为 `True` 时打印编号列表。\n- `bullet_character`：置于每个列表元素之前的项目符号。如果 `numbers` 为 `True`，则忽略。\n\n这样的函数在调用时很麻烦，即使用户想要的是一个以数字编号开头的序列，也仍然需要指定一个 `bullet_character` 参数。\n\n现在请你添加默认参数，使函数的使用更加简便。在默认情况下，该函数可以以项目符号开头打印列表中的元素，默认的项目符号应为 \"-\"。\n\n更改后，该函数的输出如下所示：\n\n```python\n>>> print_list([\"cats\", \"in\", \"space\"])\n- cats\n- in\n- space\n>>> print_list([\"cats\", \"in\", \"space\"], True)\n1: cats\n2: in\n3: space\n```",
              "instructor_notes": ""
            },
            {
              "id": 347129,
              "key": "aa6a786d-ebfb-4bf7-ba03-44e9657dd3b8",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "aa6a786d-ebfb-4bf7-ba03-44e9657dd3b8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6524326426836992",
                "initial_code_files": [
                  {
                    "text": "def print_list(l, numbered, bullet_character):\n    \"\"\"Prints a list on multiple lines, with numbers or bullets\n    \n    Arguments:\n    l: The list to print\n    numbered: set to True to print a numbered list\n    bullet_character: The symbol placed before each list element. This is\n                      ignored if numbered is True.\n    \"\"\"\n    for index, element in enumerate(l):\n        if numbered:\n            print(\"{}: {}\".format(index+1, element))\n        else:\n            print(\"{} {}\".format(bullet_character, element))\n",
                    "name": "list_printer.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 347130,
              "key": "272943a5-f22d-41dc-a31a-b157b48f2473",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "练习：可变默认参数\n=================\n\n默认参数是一个相当有用的功能，但在一种情况下例外。如果使用可变类型（如列表或字典）作为默认参数，在修改这个参数后可能会导致奇怪的结果。因此，你最好避免使用可变的默认参数。你可以在本地尝试以下代码以查看原因：\n\n有一个函数可将项目添加到待办事项列表。用户可以提供自己的待办事项列表，或将项目添加到默认列表中：\n```python\ndef todo_list(new_task, base_list=['wake up']):\n    base_list.append(new_task)\n    return base_list\n```\n\n我们可以像这样调用该函数：\n\n```python\n>>> todo_list(\"check the mail\")\n['wake up', 'check the mail']\n```",
              "instructor_notes": ""
            },
            {
              "id": 347131,
              "key": "f5a0b7a2-acea-4739-ae3e-d6e2a108af60",
              "title": " ",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f5a0b7a2-acea-4739-ae3e-d6e2a108af60",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "之后，一名宇航员调用该函数为自己创建一个待办事项列表：\n```python\n>>> todo_list(\"begin orbital transfer\")\n```\n\n`todo_list` 返回什么结果？",
                "answers": [
                  {
                    "id": "a1484094660128",
                    "text": "`['begin orbital transfer']`",
                    "is_correct": false
                  },
                  {
                    "id": "a1484094698148",
                    "text": "`['wake up', 'begin orbital transfer']`",
                    "is_correct": false
                  },
                  {
                    "id": "a1484094707384",
                    "text": "`['wake up', 'check the mail']`",
                    "is_correct": false
                  },
                  {
                    "id": "a1484094718173",
                    "text": "`['wake up', 'check the mail', 'begin orbital transfer']`",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 347295,
          "key": "9c190475-f615-4f8e-a9e0-a51b668a4460",
          "title": "变量作用域",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9c190475-f615-4f8e-a9e0-a51b668a4460",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 347132,
              "key": "ec17437b-eae3-4077-a170-f31b87808fc5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "在编程时，你可能会经常产生相似的想法。在计数、迭代和累加返回值等过程中，你都需要使用变量。为了编写可读性更高的代码，你可能会针对相似变量使用相似的名称。在将多段代码放在一起时（例如，单个脚本中的多个函数或函数调用），你可能会发现两个不同部分中的变量需要使用相同的名称。\n\n幸运的是，你并不需要想出无数个新名称。你可以将变量名称保留在不同的作用域（Scope）内，即可重复使用对象的名称。作用域是指变量可以被引用的程序部分。\n\n如果变量是在函数内被创建的，则只能在该函数内使用此变量。\n\n现在我们来看看下面两个函数 `word_count` 和 `nearest_square`。这两个函数都包含一个 `answer` 变量，但它们只存在在各自的函数中。\n\n```python\ndef word_count(document, search_term):\n    \"\"\" Count how many times search_term appears in document. \"\"\"\n    words = document.split()\t\n    answer = 0\n    for word in words:\n        if word == search_term:\n            answer += 1\n    return answer\n\ndef nearest_square(limit):\n    \"\"\" Find the largest square number smaller than limit. \"\"\"\n    answer = 0\n    while (answer+1)**2 < limit:\n        answer += 1\n    return answer**2\n```\n\n最好的做法是在所需的最小作用域内定义变量。虽然函数 *可以* 引用更大范围内定义的变量，但这并不是个好主意。",
              "instructor_notes": ""
            },
            {
              "id": 347133,
              "key": "80d445d4-17d9-4352-a1b4-c7afe05416d7",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "80d445d4-17d9-4352-a1b4-c7afe05416d7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "阅读以下代码段，\n\n```python\negg_count = 0\n\ndef buy_eggs():\n    egg_count += 12 # purchase a dozen eggs\n\nbuy_eggs()\n```\n\n这段代码的运行结果是什么？如果不确定，请尝试在自己的计算机上运行！",
                "answers": [
                  {
                    "id": "a1484098582574",
                    "text": "`egg_count` 等于零",
                    "is_correct": false
                  },
                  {
                    "id": "a1484098848319",
                    "text": "`egg_count` 等于 12",
                    "is_correct": false
                  },
                  {
                    "id": "a1484098849281",
                    "text": "发生错误",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 347300,
          "key": "a59361e3-daa2-4faa-a95a-c7ee89fb136f",
          "title": "标准库",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a59361e3-daa2-4faa-a95a-c7ee89fb136f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 347149,
              "key": "9bd0e3b7-b850-4262-b34c-cb1940a3af3d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Python 标准库简介\n======================\n到目前为止，我们已经在 Python 中使用了内置类型、函数和语法。你所看到的语法都可以在 Python 解释器中使用，也可以将代码放入 Python 脚本中运行。Python 不仅作用齐全，而且功能强大，只有你想不到的，没有它完不成的，只要编程能力高，就可以充分发挥 Python 的作用！\n\n程序员可以自己编写代码，而我们也有一些现成的代码可以解决常见的问题。我们将这些“现成的代码”称为 Python 标准库。\n\n\nPython 标准库是大量强大编程工具的集合，可为你在 Python 中编程提供帮助。从网络到数学统计，Python 标准库为一系列常见的专业任务提供新的对象类型和函数。其他程序员编写好的代码被放入有用的“模块”（module）中，以供你在自己的代码中访问和使用。使用 Python 标准库中的模块可轻松访问和使用现有代码，极大提升了你的编程能力！\n\n\n在本节中，我们将了解标准库及其使用方法，并分享我们最喜欢的模块。",
              "instructor_notes": ""
            },
            {
              "id": 347150,
              "key": "9c155dfd-ca69-4363-9e7a-8ba45618ccb9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "导入模块\n================\nPython 标准库的各组成部分被称为 `modules`（模块）。许多模块都只是 Python 文件，与你已经使用和编写过的 Python 脚本类似。为了使用模块中的代码，我们必须将其 `import` （导入）到交互式解释器或我们自己的 Python 脚本中。\n\n导入模块的语法很简单： `import package_name`。\n\n```python\n>>> import math\n```\n将导入语句放在文件的顶部（每个导入语句占一行）。导入模块即可运行该文件中的代码。其中通常包含很多定义，一般不显示任何输出。运行代码将使模块的所有函数和对象类型可用。\n\n例如，`math` 有一个 `factorial` （阶乘）函数。（该函数会得出一个正整数与所有小于该正整数的整数乘积；例如 4 的阶乘是 24，因为 4×3×2×1 = 24）\n在上方的代码块中，我们已经使用 `import math` 导入了 `math` 模块。现在，为了使用 `factorial` 函数，我们需调用它，以模块名称 `math` 开始，然后是一个点符号 (`.`)，最后是函数名 `factorial()`。\n\n```python\n>>> print(math.factorial(3))\n6\n```\n\nPython 标准库为其每个模块提供了详细的文档，在使用模块时，请先阅读对应的文档。[这里是 `math` 模块的文档链接](https://docs.python.org/3/library/math.html#module-math)。\n\n可以在 [Python 模块周刊](https://pymotw.com/3/) 中了解新模块。",
              "instructor_notes": ""
            },
            {
              "id": 347151,
              "key": "a5d955b0-0b6e-403d-9ec2-56a0fe8b5bf5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "练习：求幂\n=================\n\n现在你应该练习自己导入和使用 `math` 模块了。请在下方的练习中使用 `math` 模块来计算 `e` 的 3 次幂，并 `print` 答案。\n\n你可以参考 [math 模块文档](https://docs.python.org/3.6/library/math.html?highlight=math%20module#module-math)，查找自己需要的函数！",
              "instructor_notes": ""
            },
            {
              "id": 347152,
              "key": "cbbd60a2-3137-47e1-813a-56468a265a27",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "cbbd60a2-3137-47e1-813a-56468a265a27",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5487581417570304",
                "initial_code_files": [
                  {
                    "text": "# TODO: print e to the power of 3 using the math module",
                    "name": "expquiz.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 347153,
              "key": "718c7c90-8e94-4f7b-ab75-6ca11c76e95d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "了解标准库\n=============\n\n到目前为止，我们只见过 Python 标准库中的一个模块。这个模块十分实用，但我们还有很多其他模块。我们现在来看看整个 Python 标准库的文档，这是一个庞大的链接列表。在之前的课程内容中，我们探讨的大部分内容都与内置对象相关。（如你所知，使用前不需要 `import`）。\n\n在这个文档中，模块被根据用途分列成组。单击导航中的模块名称即可跳至对应的内容，文档中通常还包含示例代码，可供你随时进行测试。\n\n[可以点击此处浏览标准库文档。](https://docs.python.org/3/library/)\n\n在下面的练习中，请你输入解决每个问题的模块名称。请注意大小写！标准库中的每个模块都采用小写字母。",
              "instructor_notes": ""
            },
            {
              "id": 347154,
              "key": "eca6c29f-bf78-4999-a73a-8c8fa767b0a4",
              "title": "哪个模块？ 1",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "eca6c29f-bf78-4999-a73a-8c8fa767b0a4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "哪个模块可以提示当前时间和日期？",
                "matchers": [
                  {
                    "expression": "datetime"
                  },
                  {
                    "expression": "datetime\\.datetime"
                  }
                ]
              }
            },
            {
              "id": 347155,
              "key": "454ebc7a-64f3-4c45-91bd-ed2e7042dace",
              "title": "哪个模块？ 2",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "454ebc7a-64f3-4c45-91bd-ed2e7042dace",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "哪个模块具有更改当前工作目录的方法？",
                "matchers": [
                  {
                    "expression": "os"
                  }
                ]
              }
            },
            {
              "id": 347156,
              "key": "c0baf8e0-5f9b-4540-b64e-b0f629beff19",
              "title": "哪个模块？ 3",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c0baf8e0-5f9b-4540-b64e-b0f629beff19",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "哪个模块可以将数据从逗号分隔符 (.csv) 文件读取到 Python 字典的每一行？",
                "matchers": [
                  {
                    "expression": "csv"
                  }
                ]
              }
            },
            {
              "id": 347157,
              "key": "08346fcf-fe2a-4a35-92b4-993bed811e4e",
              "title": "哪个模块？ 4",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "08346fcf-fe2a-4a35-92b4-993bed811e4e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "哪个模块有助于从 zip 文件解压所有文件？",
                "matchers": [
                  {
                    "expression": "zipfile"
                  }
                ]
              }
            },
            {
              "id": 347158,
              "key": "028cf8c0-ff04-40e2-b1fb-a2d476ffa5a4",
              "title": "哪个模块？ 5",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "028cf8c0-ff04-40e2-b1fb-a2d476ffa5a4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "哪个模块可表示代码运行时长？\n",
                "matchers": [
                  {
                    "expression": "timeit"
                  },
                  {
                    "expression": "profile"
                  },
                  {
                    "expression": "cProfile"
                  },
                  {
                    "expression": "time"
                  }
                ]
              }
            },
            {
              "id": 347159,
              "key": "dee310e0-1589-4d41-9ffd-cf3dd4cd872a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "其他导入方法与命名\n===================\n\n到目前为止，我们已经学习了如何使用 `import module_name` 导入模块，并通过点符号获得该模块的所有函数和所有对象类。\n\n而我们还有其他一些常见的导入方法：\n\n### 如果你需要从模块中导入单个的函数或类，可使用：\n```python\n>>> from module_name import object_name\n```\n例如：\n```python\n>>> from collections import defaultdict\n```\n这**仅**可访问模块 `collections` 中的 `defaultdict`，并通过 `defaultdict` 自身的名称（前面不用加模块名称）对其进行访问，假如你试图访问 `collections`，或是调用 `collections.defaultdict()` 都会导致一个 NameError。\n\n```python\n>>> collections\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'collections' is not defined\n>>> collections.defaultdict()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'collections' is not defined\n>>> defaultdict()\ndefaultdict(None, {})\n```\n从模块导入单个对象意味着只需要使用所需内容，而不需要使用点符号进行访问。\n\n用逗号将对象隔开即可从模块中导入多个单独的对象：\n```python\n>>> from collections import defaultdict, namedtuple\n```\n这种方法常用于从大型库中导入对象的情况。\n\n### 导入一个模块并重新命名（通常取较短名称）\n如需重命名模块，可以使用 `as`：\n```python\n>>> import module_name as different_name\n```\n例如：\n```python\n>>> import multiprocessing as mp\n```\n如果模块的名称特别长，或与具有相同或相似名称的内容发生冲突，则可以重命名模块。请查看文档中的代码示例，因为这些代码通常拥有常用的标准缩写形式，如果你使用与其他人一致的缩写，会使代码更易读。\n\n然后你可以通过自己指定的备用名称和常用点符号从模块访问对象：\n\n```python\n>>> mp.cpu_count()\n4\n```\n\n### 从模块导入单个项目并重命名\n你可以组合前两个语法，从模块导入一个项目，**并**更改其名称：\n\n```python\nfrom module_name import object_name as different_name\n```\n例如：\n\n```python\nfrom csv import reader as csvreader\n```\n同样地，你可以仅通过新指定的名称直接访问该单独项目，而不需要点符号。如果你有多个对象，且其名称与命名空间中的不同包名称相同，这可能会派上用场。例如，你也许需要一个 csv reader 和一个 json reader —— 可以从它们各自的模块中导入这些 reader，并给出描述性的名称。\n\n\n### 一种**不应该**用于导入的方法\n\n你有可能会在别人的代码中发现一种导入方法，但你**不应该**使用这种方法：\n\n```python\nfrom module_name import *\n```\n例如\n```python\nfrom random import *\n```\n上面这段代码将单独从 `random` 模块导入**每个**对象，并允许你直接通过其名称进行访问。这里存在的问题是该模块可能包含很多对象，而每个对象都有一个名称。导入所有这些名称可能会覆盖你在程序中使用的其他名称，或可能被其他名称覆盖。`import *` 也使你的合作伙伴无法找到导入对象的定义位置。能够搜索函数定义的读写器，却无法确定它的位置，也无法确定是哪个 `import *` 语句引入了函数。这些问题将导致严重混乱。\n\n**请勿使用 `from module_name import *`进行导入！！**\n\n如果真的想使用 `random` 模块中的所有对象，请使用标准的 `import random` 语句，并通过点符号访问每个对象。",
              "instructor_notes": ""
            },
            {
              "id": 347160,
              "key": "94125fc5-9d88-487d-aef2-afd75d5f085e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "模块、包和名称\n==================\n某些 Python 标准库中有很多模块！为了更好地管理代码，它们被分解成包（package）中的子模块（sub-module）。一个包只是一个包含子模块的模块，并通过常见的点符号指定子模块。\n\n例如，`os` 模块（用于处理文件系统，对每个操作系统都起作用）具有一个子模块 os.path，该子模块专用于处理路径名。子模块由包名称指定，并通过点符号与子模块名称隔开。\n\n你可以使用代码 `os.path` 导入子模块，如：\n```python\n>>> import os.path\n```\n然后可以按常见方式使用子模块中的对象：\n```python\n>>> os.path.isdir('my_path')\nFalse\n```\n但是，该导入语法将**只**适用于子模块 —— 你不能以此种方式从模块导入函数。\n```python\n>>> import os.path.isdir\nImportError: No module named 'os.path.isdir'; 'os.path' is not a package\n```\n如果你想使用 os 模块的其他部分，你可以导入 `os`，这样就可以访问 `os.path` 中的所有内容。\n\n有时候在使用模块时，命名可能会出现混乱。例如，模块可能以其中一个重要的类或函数命名。在此种情况下，你需要仔细考虑导入语句：\n\n```python\n>>> from datetime import datetime\n```\n上方代码从 `datetime` 模块中导入了 `datetime` 类。请注意，在此之后，使用 `datetime` 将表示 `datetime` 类，而不是模块。",
              "instructor_notes": ""
            },
            {
              "id": 347161,
              "key": "661503be-107a-43bf-acd8-c95205b89586",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "从模块导入和访问\n===============\n在本练习中，你将使用不同的方法从 `random` 模块导入和使用 `random.randint()` 函数。你的任务是将导入语句与随后调用函数的方式进行匹配。\n你可以在自己的 Python 解释器中进行测试。但请注意，一旦导入语句，其将一直处于导入状态，直到通过 `exit()` 或 `ctrl-D`（或者如果在 Windows 上使用 `ctrl-Z`）退出交互式解释器。",
              "instructor_notes": ""
            },
            {
              "id": 347162,
              "key": "77505ebf-682e-4830-bf04-bb579ba00110",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "77505ebf-682e-4830-bf04-bb579ba00110",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "将导入语句与 `random.randint()` 的调用方式匹配。"
                },
                "concepts_label": "导入语句",
                "answers_label": "调用函数",
                "concepts": [
                  {
                    "text": "`import random`",
                    "correct_answer": {
                      "id": "a1484117753829",
                      "text": "`random.randint(0,10)`"
                    }
                  },
                  {
                    "text": "`from random import randint`",
                    "correct_answer": {
                      "id": "a1484117827419",
                      "text": "`randint(0,10)`"
                    }
                  },
                  {
                    "text": "`import random as rd`",
                    "correct_answer": {
                      "id": "a1484117843772",
                      "text": "`rd.randint(0,10)`"
                    }
                  },
                  {
                    "text": "`from random import randint as rint`",
                    "correct_answer": {
                      "id": "a1484117859785",
                      "text": "`rint(0,10)`"
                    }
                  },
                  {
                    "text": "`from random import *`",
                    "correct_answer": {
                      "id": "a1484117876417",
                      "text": "请勿使用该导入语句！"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1484117843772",
                    "text": "`rd.randint(0,10)`"
                  },
                  {
                    "id": "a1484117753829",
                    "text": "`random.randint(0,10)`"
                  },
                  {
                    "id": "a1484117876417",
                    "text": "请勿使用该导入语句！"
                  },
                  {
                    "id": "a1484117859785",
                    "text": "`rint(0,10)`"
                  },
                  {
                    "id": "a1484117827419",
                    "text": "`randint(0,10)`"
                  }
                ]
              }
            },
            {
              "id": 347163,
              "key": "013436ce-2008-454a-9fb6-ae56366414e6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "我们最喜欢的模块\n============\nPython 标准库的模块有很多！为了帮助大家熟悉可用模块，我们列出了一些实用的 Python 标准库模块，以及这些模块的简介：\n\n* [`csv`](https://docs.python.org/3/library/csv.html)：方便阅读和编写 csv 文件\n* [`collections`](https://docs.python.org/3/library/collections.html)：常用数据类型的有用扩展，包括 `OrderedDict`、`defaultdict` 与 `namedtuple`\n* [`random`](https://docs.python.org/3/library/random.html)：生成伪随机数，随机打乱顺序，选择随机项  \n* [`string`](https://docs.python.org/3/library/string.html)：字符串功能的拓展。此模块还包含诸如 `string.digits`（一个包含所有有效数字字符的字符串）的有用字母集合。\n* [`re`](https://docs.python.org/3/library/re.html)：通过正则表达式匹配字符串模式\n* [`math`](https://docs.python.org/3/library/math.html)：一些标准的数学函数\n* [`os`](https://docs.python.org/3/library/os.html)：与操作系统交互\n* [`os.path`](https://docs.python.org/3/library/os.path.html) ：操作路径名的 `os` 子模块\n* [`sys`](https://docs.python.org/3/library/sys.html)：直接使用 Python 解释器\n* [`json`](https://docs.python.org/3/library/json.html)：很适合阅读和编写 json 文件（适合网络工作）\n\n我们希望以上内容能为大家提供帮助！",
              "instructor_notes": ""
            },
            {
              "id": 347164,
              "key": "3323e128-a7b5-4aa5-b3e1-2c2aba1ce0b7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "练习：密码生成器\n================\n请编写一个名为 `generate_password()` 的函数，该函数从一个具有单词的文件中随机选出三个词，并将它们连成一个字符串。提供的初始代码中已经具有读取文件数据的代码，大家需要根据这些内容构建密码。",
              "instructor_notes": ""
            },
            {
              "id": 347165,
              "key": "1520997f-9dae-4451-8ca0-c344691700cd",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "1520997f-9dae-4451-8ca0-c344691700cd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6339134953226240",
                "initial_code_files": [
                  {
                    "text": "# Use an import statement at the top\n\nword_file = \"words.txt\"\nword_list = []\n\n#fill up the word_list\nwith open(word_file,'r') as words:\n\tfor line in words:\n\t\t# remove white space and make everything lowercase\n\t\tword = line.strip().lower()\n\t\t# don't include words that are too long or too short\n\t\tif 3 < len(word) < 8:\n\t\t\tword_list.append(word)\n\n# Add your function generate_password here\n# It should return a string consisting of three random words \n# concatenated together without spaces\n\n\n# test your function\nprint(generate_password())",
                    "name": "password_generator.py"
                  },
                  {
                    "text": "Alice\nwas\nbeginning\nto\nget\nvery\ntired\nof\nsitting\nby\nher\nsister\nbank\nhaving\nnothing\nOnce\ntwice\nshe\nhad\npeeped\ninto\nthe\nbook\nher\nsister\nwas\nreading\nbut\nit\nhad\nno\npictures\nor\nconversations\nin\nit\nand\nwhat\nis\nthe\nuse\nof\na\nbook\nthought\nAlice\nwithout\npictures\nor\nconversations",
                    "name": "words.txt"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 673358,
          "key": "12d61080-8571-4370-9fbe-ae11dc13b2b2",
          "title": "解决方案：标准库",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "12d61080-8571-4370-9fbe-ae11dc13b2b2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 673353,
              "key": "c2d0ac9f-04c1-4d25-a015-ab6a83426dd2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 解决方案: 求幂\n```\nimport math\nprint(math.exp(3))\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 673354,
              "key": "c8225007-4a9e-4632-8573-1b6c872edeea",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 解决方案: 那个模块 ?\n`datetime`\n\n`os`\n\n`csv`\n\n`zipfile`\n\n`time`",
              "instructor_notes": ""
            },
            {
              "id": 673355,
              "key": "de463952-1a5d-4341-a7b4-201a79d0b02d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 解决方案: 密码生成器 \n\n我们通过`import random`这个包来生成随机的数字密码，密码生成器的函数非常简单：\n\n```python\ndef generate_password():\n\treturn random.choice(word_list) + random.choice(word_list) + random.choice(word_list)\n```\n或者，我们可以使用`random.sample`这个函数和字符串的`.join`方法来生成随机文本密码：\n\n```python\ndef generate_password():\n    return ''.join(random.sample(word_list,3))\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 347301,
          "key": "572294be-1822-4e65-a091-ee08b80917ff",
          "title": "第三方库",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "572294be-1822-4e65-a091-ee08b80917ff",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 347167,
              "key": "112753d0-dd5a-4f20-bd7e-1904d15ee0e9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "第三方库和包管理器\n===================\n与大多数语言相比，Python 的标准库更加丰富。人们常说 Python “自带电池”，这是因为 Python 自带许多开展工作所需的库。但标准库并不具有你想要的一切，它不支持某些太专业化的任务。但好在独立开发人员编写了成千上万个第三方库。你可以浏览 [PyPi 排名中最受欢迎的第三方库列表](http://pypi-ranking.info/alltime)。\n\n既然 Python 本身不包含这些第三方库，那我们该如何获取呢？我们可以使用 [pip](https://pip.pypa.io/en/stable/) 来安装库，这是 Python 3 自带的一个包管理器。Python 2 用户也可以使用 pip，但是 Python 2 并没有自带这个管理器，因此必须单独安装。如果你同时安装了 Python 2 和 Python 3，并且每个都带有 pip，你可以使用命令 pip2 和 pip3 来进行区分。\n\npip 是 Python 的标准包管理器，但不是唯一的管理器。我们还可以使用 [Anaconda](https://www.continuum.io/anaconda-overview)，它专门为数据科学家和类似用户所设计。",
              "instructor_notes": ""
            },
            {
              "id": 347168,
              "key": "65d0c539-47e3-40d0-9991-298c442a22ca",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "使用 pip 安装包\n=============\n现在让我们使用 pip 来安装 pytz 库。为了确保我们使用的是与 Python 3 自带的 pip，我们将使用命令 `pip3`。pytz 是一个与时区相关的库，时区处理是[一项非常复杂的任务](http://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time)。\n\n我们可以使用 `pip3` 命令行安装 `pytz`：\n\n```shell\n$ pip3 install pytz\n```\n\n上面的命令将下载并安装 `pytz`，以便于我们将其导入程序。安装完成后，我们可以导入第三方库，方法与导入标准库相同。在这个示例中，我从标准库导入了 `pytz` 和 `datetime`。标准的做法是将导入第三方库的语句，放在导入标准库的语句后面。\n\n```python\nimport datetime\n\nimport pytz\n\nutc = pytz.utc # utc is Coordinated Universal Time\nist = pytz.timezone('Asia/Kolkata') #IST is Indian Standard Time\n\nnow = datetime.datetime.now(tz=utc) # this is the current time in UTC\nist_now = now.astimezone(ist) # this is the current time in IST.\n```\n\n该示例以 [协调世界时（Coordinated Universal Time）](https://zh.wikipedia.org/wiki/%E5%8D%8F%E8%B0%83%E4%B8%96%E7%95%8C%E6%97%B6) 表达方式在变量 `now` 中存储当前时间。然后将此时间转换为 [印度标准时间（Indian Standard Time）](https://zh.wikipedia.org/wiki/%E5%8D%B0%E5%BA%A6%E6%A8%99%E6%BA%96%E6%99%82%E9%96%93)，并将其存储在变量 `ist_now` 中。",
              "instructor_notes": ""
            },
            {
              "id": 347169,
              "key": "f1cf65a0-38bf-4a9e-b47d-2a5a700585be",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "有用的第三方包\n===============\n\n掌握安装和导入第三方库的技能很有用，但要成为一名高效的程序员，还需要知道哪些库可供自己使用。人们通常会通过网上推荐或同事推荐来了解有用的新库。如果你是一位刚刚入门不久的 Python 程序员，可能还不认识太多同事，所以我们推荐你从这里开启自己的程序员生涯，下面是很受 Udacity 工程师欢迎的包列表：\n\n\n* [IPython](https://ipython.org/) - 一个优秀的交互式 Python 解释器\n* [requests](http://docs.python-requests.org/) - 提供制作 Web 请求的简单方法，用于访问 Web API。\n* [Flask](http://flask.pocoo.org/) - 用于制作 Web 应用程序和 API 的轻量级框架。\n* [Django](https://www.djangoproject.com/) - 制作 Web 应用程序的特色框架。Django 特别适用于设计复杂、内容繁重的 Web 应用程序。  \n* [Beautiful Soup](https://www.crummy.com/software/BeautifulSoup/) - 用于解析 HTML 并从中提取信息。尤其适用于网络抓取。  \n* [pytest](http://doc.pytest.org/) - 扩展 Python 的内置断言（assertion）和 unittest 模块。  \n* [PyYAML](http://pyyaml.org/wiki/PyYAML) - 用于阅读和编写 [YAML](https://en.wikipedia.org/wiki/YAML) 文件。\n* [NumPy](http://www.numpy.org/) - 使用 Python 进行科学计算的基础包，除了其他功能之外，其还包含强大的 N 维数组对象和有用的线性代数功能。\n* [pandas](http://pandas.pydata.org/) - 一个包含高表现力、数据结构和数据分析工具的库。更值得一提的是，pandas 提供了 DataFrame 数据结构！  \n* [matplotlib](http://matplotlib.org/) - 一个 2D 绘图库，用于在交互式环境中生成各种硬拷贝格式的高质量图。  \n* [ggplot](http://ggplot.yhathq.com/) - 另一个 2D 绘图库，基于 R 的 ggplot2 库。  \n* [Pillow](https://python-pillow.org/) - Python 影像库使你的 Python 解释器新增图像处理功能。  \n* [pyglet](http://www.pyglet.org/) - 用于游戏开发的跨平台应用程序框架。  \n* [Pygame](http://www.pygame.org/) - 用于编写游戏的 Python 模块集合。  \n* [pytz](http://pytz.sourceforge.net/) -  Python 中的世界时区定义",
              "instructor_notes": ""
            },
            {
              "id": 347170,
              "key": "24d43774-bfb1-41f0-a988-24b323cc9055",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "`requirements.txt`\n======\n较大的 Python 程序可能依赖几十个第三方包。为了更容易共享这些程序，程序员通常会在一个名为 requirements.txt 的文件中列出项目的依赖项。这是一个 requirements.txt 文件的示例：\n\n```text\nbeautifulsoup4==4.5.1\nbs4==0.0.1\npytz==2016.7\nrequests==2.11.1\n```\n\n文件的每一行都包含一个包的名称及其版本号。版本号在技术上是可选的，但通常应该包含在内。库可能在不同版本之间略有改变（或大幅改变），因此在使用其他程序员编写好的程序时，选择相同版本的库非常重要。\n\n大家可以使用 pip，并通过以下命令一次安装项目的所有依赖项：\n\n```shell\n$ pip3 install -r requirements.txt\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 347302,
          "key": "cc9f5ff4-3f94-4b83-96c0-31a7d67cbdd5",
          "title": "使用在线资源",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cc9f5ff4-3f94-4b83-96c0-31a7d67cbdd5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 347171,
              "key": "0e285ff2-1115-4df6-8ed7-e450cfc72428",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "获取所需信息\n========\n\n成为一名熟练的程序员需要具备丰富的知识，包括掌握库、语法以及注意各种其他细节。更具挑战性的是，随着新技术和新工具的不断出现，整个技术格局也在一直发生变化。\n\n对于一个新程序员来说，学习所有这些细节和跟上新的发展步伐似乎是一个不可能完成的任务。确实如此！实际上哪怕是经验丰富的专家级程序员也无法把百科全书中的知识装入大脑。但是他们掌握了快速查找信息的方法。",
              "instructor_notes": ""
            },
            {
              "id": 347172,
              "key": "21cca1dc-619e-46e9-8ab3-fd3cef5887d9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "如何搜索\n=============\n以下是一些有用的网页搜索技巧：\n\n* 尝试使用 \"Python\" 或正在使用的库的名称作为查询的第一个关键词。这会提示搜索引擎优先考虑与你所使用工具明确相关的结果。\n* 可以多次尝试搜索，如果第一次搜索时未查找到有用的结果，请重试。\n* 尝试使用初次搜索时在页面上找到的关键词，以便于后续搜索时，引导搜索引擎给出关联度更高的结果。\n* 复制并粘贴错误消息，将其作为搜索关键词，这会找到错误解释和导致错误的原因。错误消息中可能还包含代码的特定行号。但在搜索时，仅使用行号前出现的错误消息部分即可。\n* 如果找不到问题的答案，请自己询问！像 Stackoverflow 这样的社区具有某些礼节规定，如果你想参与进去，就必须学习这些礼节，但不要让这些礼节影响大家对资源的使用。",
              "instructor_notes": ""
            },
            {
              "id": 347173,
              "key": "11a0da64-cda2-48fa-b161-89271bae44e2",
              "title": "练习：最佳搜索词",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "11a0da64-cda2-48fa-b161-89271bae44e2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "假如你在写代码时遇到以下错误信息：\n\n```python\nUnboundLocalError: local variable 'egg_count' referenced before assignment\n```\n\n用下面哪一个选项搜索，最有可能得出有用结果？",
                "answers": [
                  {
                    "id": "a1484171257859",
                    "text": "`egg_count` referenced before assignment（赋值前引用 `egg_count`）",
                    "is_correct": false
                  },
                  {
                    "id": "a1484171276909",
                    "text": "counting with Python（用 Python 计数）",
                    "is_correct": false
                  },
                  {
                    "id": "a1484171282022",
                    "text": "reference before assignment（赋值前引用）",
                    "is_correct": false
                  },
                  {
                    "id": "a1484171291216",
                    "text": "Python UnboundLocalError: local variable（Python UnboundLocalError：局部变量）",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 347174,
              "key": "15287696-1da5-473b-8166-18fa5a378ea9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "在线资源\n==================\n\n虽然关于编程的在线资源数不胜数，但并不是所有资源都一样可靠。在下面我们按可靠性为你列出了一些资源：\n\n1. ** [Python 教程](https://docs.python.org/3/tutorial/)**  - 这部分官方文档涉及 Python 语法和标准库的相关研究。文档中包含丰富的示例，并且的技术语言比主文档更少。请确保你阅读的是 Python3 对应的文档版本！\n2. ** [Python 语言和库引用](https://docs.python.org/3/index.html)** - 相对于 Python 教程而言，语言引用和库引用使用了更多技术性语言，但这才是最终的真理之源。随着你对 Python 越来越熟悉，你也应该开始充分利用这些资源。\n3. **第三方库文档** - 第三方库不仅会在自己的网站上发布文档，也会经常在 https://readthedocs.org/ 上发布。大家可以通过其文档的质量判断第三方库的质量。如果开发人员没有时间编写好的文档，那么他们可能也没有时间研究自己的库。\n4. **知名专家的网站和博客** - 之前的资源为主要资源，那些文档的作者都是代码编写人员。尽管主要资源相当可靠，但次要资源有时也极具价值。次要资源的缺点在于你需要确定来源的可信度。像 [Doug Hellmann](https://doughellmann.com/blog/) 和 [Eli Bendersky](http://eli.thegreenplace.net/) 都是非常优秀的开发人员。而一些不知名作者的博客可能极具价值，也可能毫无用处。\n5. **[Stackoverflow](http://stackoverflow.com/)** - 这个问答网站的访问量很大，所以有人可能提问过你想要问的问题，并得到了回答。然而，这些答案都由志愿者提供，因此质量也参差不齐。在参考答案中的代码之前，请务必了解相关解决方案。如果答案中没有任何解释，那么多半也并不可靠。你可以利用这个网站找到更多问题的解决方案或是搜索问题的关键词。\n6. ** Bug 跟踪器** - 有时你也会遇到一个非常罕见的或全新的问题，并且 Stackoverflow 上也没有人解决过这个问题。这时，你可能会在 GitHub 的错误报告中引用自己的错误。这些错误报告也许会有帮助，但为了解决这个问题，你还需要将之前的工作再重复一遍。\n7. **其它网络论坛**  - 有时搜索引擎也会将你引导至一些古早的论坛，它们可能早在2004年之后就不再运作了。如果这些论坛是解决问题的唯一资源，你或许应该重新考虑问题的解决方案了。",
              "instructor_notes": ""
            },
            {
              "id": 347175,
              "key": "596300da-d10f-46d2-b2ad-23f2ef758068",
              "title": "练习：为学员提供帮助",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "596300da-d10f-46d2-b2ad-23f2ef758068",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": null,
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "学习技能最好的方式之一是教导别人。你可以通过帮助其他学员理解代码中的错误来练习自己的调试和研究技能。设想一下，假如有一位学员在 [Udacity 论坛](https://discussions.youdaxue.com) 上发布了以下消息和代码。\n\n请你给学员写一则消息，解释他们发现的错误，并帮助他们掌握如何解决问题。\n\n> 嗨，我的代码出现了错误，但我不明白问题出在哪里？\n\n> 我列出了自己的 Facebook 好友，想从列表中选择第四个好友。\n> 这是我的代码：\n```\nfriends[\"3\"]\n```\n> 错误信息是：\n> `TypeError: list indices must be integers or slices, not str` （列表索引必须是整数或片段，而不是 str）"
              },
              "answer": {
                "text": "感谢大家考虑如何帮助学员。与他人共享知识是提高编程能力的好方法！\n\n### 我们为学员的问题提供以下答案：\n> 同学你好！感谢分享你的问题 —— 记录问题是第一步，做得不错。\n> 我在网上阅读并研究了你的错误信息。你的变量 `friends` 是指一个列表吗？如果要获取列表的元素，则需要使用索引的**整数**，**不是**一个字符串。（\"3\" 是一个字符串，与整数 `3` 不同。）\n\n### 通过研究，我们得出了结果\n我们看不到学员代码的回溯或其余部分，但错误消息含有很多信息。\n我在线搜索 \"python TypeError: list indices must be integers or slices, not str\"，这会出现一些不同的结果，包括一些不相关的结果，这起初让我很困惑。慢慢地，在 Stackoverflow 和其他网站上阅读了几个不同的答案后，我了解这个问题的种类，并忽略了不相关的部分。\n\n如果想要进行更多纠错练习，请随时回答真实学生参加此课程的相关问题。[浏览论坛，了解自己如何为他人提供帮助！](https://discussions.youdaxue.com）。",
                "video": null
              }
            },
            {
              "id": 347176,
              "key": "2c4d3d27-53da-421a-ae8e-73d9e87e6892",
              "title": "课程总结",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "8AOietAcOLk",
                "china_cdn_id": "8AOietAcOLk.mp4"
              }
            }
          ]
        },
        {
          "id": 673359,
          "key": "b744da7d-954e-46a7-92e7-ba02695b7335",
          "title": "数据分析中常用的包概述",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b744da7d-954e-46a7-92e7-ba02695b7335",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 673356,
              "key": "6adfebb8-1e65-43f4-9b1a-864d9b2fc304",
              "title": "Intro to Packages",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "sCQoQsmI3F0",
                "china_cdn_id": "sCQoQsmI3F0.mp4"
              }
            },
            {
              "id": 673357,
              "key": "f80edefe-837a-40d1-93cf-36682df3eff6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Python被作为数据科学的标准语言的最大原因之一是其功能强大的软件包。 NumPy，pandas和Matplotlib是数据分析的三个核心软件包，我们将会在数据分析（入门）纳米学位中进行学习。",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 431758,
          "key": "cfbd41b9-9b30-445f-8e1a-bfe5b20aaff7",
          "title": "包概述练习",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cfbd41b9-9b30-445f-8e1a-bfe5b20aaff7",
            "completed_at": "2019-03-16T11:31:43.705Z",
            "last_viewed_at": "2019-03-30T06:21:59.459Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 431553,
              "key": "28c538c9-346b-44a4-8e97-29df59e652e9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 包练习",
              "instructor_notes": ""
            },
            {
              "id": 431554,
              "key": "7d48fc99-3605-40de-b7cf-509c7469d3a8",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7d48fc99-3605-40de-b7cf-509c7469d3a8",
                "completed_at": "2019-03-16T11:31:55.779Z",
                "last_viewed_at": "2019-03-30T06:02:28.104Z",
                "unstructured": "{\"selected_ids\":[\"a1504106796082\",\"a1504106900814\",\"a1504107003106\"],\"is_correct\":true}"
              },
              "question": {
                "prompt": "以下关于 Python 包的陈述哪个是正确的？",
                "answers": [
                  {
                    "id": "a1504106796082",
                    "text": "你可以通过导入包来为代码添加函数和类",
                    "is_correct": true
                  },
                  {
                    "id": "a1504106878425",
                    "text": "如果不使用包，使用代码会更好",
                    "is_correct": false
                  },
                  {
                    "id": "a1504106900814",
                    "text": "软件包是人们编写的模块或 Python 文件的集合",
                    "is_correct": true
                  },
                  {
                    "id": "a1504107003106",
                    "text": "使用包可以简化和优化许多任务",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 431555,
              "key": "32dc061a-dfc9-4a08-b362-7cd4c05c23e7",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "32dc061a-dfc9-4a08-b362-7cd4c05c23e7",
                "completed_at": "2019-03-16T11:32:08.862Z",
                "last_viewed_at": "2019-03-30T06:02:31.490Z",
                "unstructured": "{\"selected_id\":\"a1504870544663\",\"is_correct\":true}"
              },
              "question": {
                "prompt": "这是使用来自包的函数的合理方式吗？\n```python\nimport some_package as sp\ndo_something()\n```",
                "answers": [
                  {
                    "id": "a1504870526423",
                    "text": "是",
                    "is_correct": false
                  },
                  {
                    "id": "a1504870544663",
                    "text": "否",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 431556,
              "key": "d17b50f9-4fd5-411b-8e30-bfa12f70e861",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d17b50f9-4fd5-411b-8e30-bfa12f70e861",
                "completed_at": "2019-03-16T11:32:11.590Z",
                "last_viewed_at": "2019-03-30T06:02:32.778Z",
                "unstructured": "{\"selected_id\":\"a1504869622864\",\"is_correct\":true}"
              },
              "question": {
                "prompt": "这是使用来自包的函数的合理方式吗？\n```python\nimport some_package as sp\nsp.do_something()\n```",
                "answers": [
                  {
                    "id": "a1504869622864",
                    "text": "是",
                    "is_correct": true
                  },
                  {
                    "id": "a1504869695881",
                    "text": "否",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 431557,
              "key": "3c48455e-d467-4098-973b-94f6d82df4af",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3c48455e-d467-4098-973b-94f6d82df4af",
                "completed_at": "2019-03-16T11:32:18.192Z",
                "last_viewed_at": "2019-03-30T06:02:35.983Z",
                "unstructured": "{\"selected_id\":\"a1504869829057\",\"is_correct\":true}"
              },
              "question": {
                "prompt": "这是使用来自包的函数的合理方式吗？\n```python\nimport some_package as sp\nsome_package.do_something()\n```",
                "answers": [
                  {
                    "id": "a1504869797614",
                    "text": "是",
                    "is_correct": false
                  },
                  {
                    "id": "a1504869829057",
                    "text": "否",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 431558,
              "key": "aa4c2ebb-e8d5-4877-802d-435d4d78cda7",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "aa4c2ebb-e8d5-4877-802d-435d4d78cda7",
                "completed_at": "2019-03-16T11:32:24.323Z",
                "last_viewed_at": "2019-03-30T06:02:38.922Z",
                "unstructured": "{\"selected_id\":\"a1504869730143\",\"is_correct\":true}"
              },
              "question": {
                "prompt": "这是使用来自包的函数的合理方式吗？\n```python\nimport some_package\nsome_package.do_something()\n```",
                "answers": [
                  {
                    "id": "a1504869730143",
                    "text": "是",
                    "is_correct": true
                  },
                  {
                    "id": "a1504869765553",
                    "text": "否",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 431559,
              "key": "86ed1571-91b8-456b-b244-5949243d1495",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "86ed1571-91b8-456b-b244-5949243d1495",
                "completed_at": "2019-03-16T11:32:30.293Z",
                "last_viewed_at": "2019-03-30T06:02:41.731Z",
                "unstructured": "{\"selected_id\":\"a1504869881509\",\"is_correct\":true}"
              },
              "question": {
                "prompt": "这是使用来自包的函数的合理方式吗？\n```python\nimport some_package as randomlongaliasthatmakesnosense\nrandomlongaliasthatmakesnosense.do_something()\n```",
                "answers": [
                  {
                    "id": "a1504869846583",
                    "text": "是",
                    "is_correct": false
                  },
                  {
                    "id": "a1504869881509",
                    "text": "否",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 431560,
              "key": "983f933d-991a-4f05-9ca4-68c8ef675fbb",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "983f933d-991a-4f05-9ca4-68c8ef675fbb",
                "completed_at": "2019-03-16T11:33:14.201Z",
                "last_viewed_at": "2019-03-30T06:02:49.408Z",
                "unstructured": "{\"selected_ids\":[\"a1504107295800\",\"a1504107363171\",\"a1504107380363\",\"a1504107383892\"],\"is_correct\":true}"
              },
              "question": {
                "prompt": "如果在使用新包时遇到错误，你可以通过什么方法解决问题？",
                "answers": [
                  {
                    "id": "a1504107295800",
                    "text": "通过 Google 搜索问题答案",
                    "is_correct": false
                  },
                  {
                    "id": "a1504107363171",
                    "text": "阅读函数的文档",
                    "is_correct": false
                  },
                  {
                    "id": "a1504107380363",
                    "text": "检查 Stack Overflow 是否有类似的错误/问题",
                    "is_correct": false
                  },
                  {
                    "id": "a1504107383892",
                    "text": "向他人求助",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 737466,
          "key": "8a105fc7-e221-4317-b5c1-fdf0915d6dcb",
          "title": "写在最后的话",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8a105fc7-e221-4317-b5c1-fdf0915d6dcb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 737467,
              "key": "e492793a-f350-416c-af92-94b35bdc9517",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "欢迎你！你终于挑战了自我，来到 7 天试学的最后一关了，快给自己鼓鼓掌，你可能已经无形中超越了很多同龄人！\n\n不过，只能稍微放松一下哦，如果你想抓住人才红利，高效成为一名真正的数据分析师，还需要继续前行，和我们一起快速系统性地完成整个学习路径！\n\n**正式班教什么：**\n\n在数据分析师（入门）中，我们会学到：\n\n* SQL 知识，了解如何从数据库中获取数据；\n* Python 的基础知识，掌握数据分析的脚本语言，也是最常用的工具；\n* 数据分析过程的流程，通过案例学习对数据的分析流程；\n* 统计学知识，学习假设检验，并学会使用 Python 来执行假设检验，并在真实场景中验证 A/B 测试的结论\n\n在数据分析师（进阶）中，我们会学到：\n\n* 复习统计学中的假设检验知识，并对著名心理学现象 “斯普特鲁效应” 进行分析；\n* 通过网页、API 爬取或下载原始数据，使用 Python 进行清理；\n* 对复杂的数据集进行探索性分析（EDA），挖掘信息或者是做出预测，这里我们也会学习使用 R 语言；\n* 学习可视化的设计原则，使用 Tableau 更优雅地展示数据中的信息\n\n透过数据，你可以：\n\n* 发现规律（早上 10:00 发送营销邮件打开率最高）\n* 解释现象（为什么新上线的产品功能导致次日留存 20% 的提升？）\n* 验证假设（100 万的外卖补贴应当分配 80% 在高校商圈，原因是这部分消费者对价格更加敏感）\n* 创造机会（CVS 的无糖酸奶销量连续 2 年上升，建议公司明年推出低糖款乳酸菌饮料）\n* 讲好故事（更优雅地说服老板、客户和同事）\n\n\n祝你接下来的学习一切顺利！我们正式课程中见！\n\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}