{
  "data": {
    "lesson": {
      "id": 615112,
      "key": "26983254-785a-4779-b11d-5aafb0f8478d",
      "title": "数据结构和循环（选学）",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "学习 Python 的数据结构“列表“以及查询方式。这部分不是必学，但学习后能更好地掌握和理解实战项目中的代码。",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": null,
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 347279,
          "key": "f580c0dc-123a-45be-b569-dbb7e01c9e38",
          "title": "列表",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f580c0dc-123a-45be-b569-dbb7e01c9e38",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 347032,
              "key": "49509fe1-5096-4d1f-896c-9925094ba8a7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "列表\n===\n到目前为止，我们一直在处理各种单独的数据，比如字符串和数字。但当我们使用数据集合时，还可以编写出更强大的程序。现在我们先介绍一下第一种数据集合：列表。\n\n```python\npython_versions = [1.0, 1.5, 1.6, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6]\n```\n\n上面这行代码定义了一个变量 `python_versions`，其中包含一系列浮点数。列表中的每个元素都表示 Python 的一个版本号（Python 的版本一直在升级，因此有很多不同的版本号）。列表使用方括号（`[` 和 `]`）定义，列表内的元素用逗号分开。\n\n我们可以通过索引来查找列表中的各个元素，比如针对上面这个列表，我们可以按照如下所示的方法查找版本号：\n\n```python\n>>> python_versions[0]\n1.0\n\n>>> python_versions[1]\n1.5\n\n>>> python_versions[7]\n2.4\n```\n\n请注意列表中的第一个元素 `1.0` 的索引编号为 0 ，而不是 1。有许多编程语言都遵循这个惯例，我们将其称为\"零索引\"。如果这种说法让你难以理解，你也可以这样理解：元素的索引编号代表元素与列表开头的距离。第一个元素距离开头有 0 个元素，第二个元素有一个元素，以此类推。\n\n当然，除了这种从列表开头进行索引的方法，我们也可以从列表的末尾进行索引。\n要从列表的末尾索引需要使用负索引。以我们在上方定义的列表为例，我们可以通过下面这种方法得到最新的 Python 版本：\n\n```python\n>>> python_versions[-1]\n3.6\n```\n索引 `-1` 是指列表的最后一个元素，`-2` 是倒数第二个，以此类推。",
              "instructor_notes": ""
            },
            {
              "id": 347033,
              "key": "42b026d6-71c2-4a30-a9cd-d2628d005a94",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "索引错误\n=========\n如果尝试索引列表中不存在的元素，将导致列表索引异常（List Index Exception）。这条信息表示 Python 提醒你正在尝试访问一个列表中不存在的元素。\n\n例如，我们定义以下列表：\n\n```python\n>>> my_list = ['a','b','c','d','e']\n```\n这个列表中有五个元素，索引编号分别是 0、1、2、3 和 4\n```python\n>>> my_list[4]\n'e'\n```\n如大家所见，`my_list [4]` 返回这个列表的最后一个元素。但是当我们尝试访问索引编号为 5 的元素时，会出现什么结果？\n\n```python\n>>> my_list[5]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: list index out of range\n```\n因为列表中只包含 5 个元素，尝试访问索引编号为 5 的元素其实是要求 Python 给出该列表中的第 6 个元素。由于这个元素并不存在，所以导致了一个 `IndexError`。\n\n索引错误十分常见，尤其是当你还不习惯在 Python 中进行索引的时候。刚开始你可能会经常收到这些错误信息，但在慢慢熟悉 Python 后，这样的错误就会很少出现了。导致索引错误最常见的一个原因是在进行索引时编号差 1（比如在上方的例子中，`my_list[5]` 会导致索引错误，因为列表中最后一个元素的编号实际上是 4），但也存在一些其他原因。因此我们建议你使用 `print` 函数来打印你想要索引的元素，以此进行纠错，这可以提醒你的索引是否有差，差是多少。",
              "instructor_notes": ""
            },
            {
              "id": 347034,
              "key": "6345f3ed-e3b8-4f6e-bdfd-94952a1a9f16",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "练习：列表索引\n==========\n\n请完成函数 `how_many_days`，其将输入一个表示月份的数字，并返回该月份的天数。我们定义的 `days_in_month` 是一个包含各月天数的列表。例如，`how_many_days(8)` 应该返回 31，因为第八个月，即八月，有 31 天。\n\n记住索引编号从零开始！\n\n（提示：目前函数还没有学过，你可以参考下一课：**函数** 来了解一些基本知识。本节中编程习题的解决方案可以在下一小节： **解决方案：列表** 中查看。）",
              "instructor_notes": ""
            },
            {
              "id": 347035,
              "key": "1b994ca7-6277-4762-bbf1-036918d66d2b",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "1b994ca7-6277-4762-bbf1-036918d66d2b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5605624130961408",
                "initial_code_files": [
                  {
                    "text": "def how_many_days(month_number):\n    \"\"\"Returns the number of days in a month.\n    WARNING: This function doesn't account for leap years!\n    \"\"\"\n    days_in_month = [31,28,31,30,31,30,31,31,30,31,30,31]\n    #todo: return the correct value\n    \n# This test case should print 31, the number of days in the eighth month, August\nprint(how_many_days(8))",
                    "name": "HowManyDays.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 347036,
              "key": "470e0a5c-dc98-43f7-8046-15d2b6ac7039",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "列表切片\n========\n\n除了从列表访问各个元素外，我们还可以使用 Python 的切片符号来访问列表的子序列。大家来看一下这个月份列表，\n```python\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n```\n\n我们可以从月份列表中切片出一年的第三季度，如下所示：\n```python\n>>> q3 = months[6:9]\n>>> print(q3)\n['July', 'August', 'September']\n>>> print(months)\n['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n```",
              "instructor_notes": ""
            },
            {
              "id": 347037,
              "key": "0e1ca001-c5dd-4461-9495-bb6bfb573928",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/5873d44b_slicing/slicing.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0e1ca001-c5dd-4461-9495-bb6bfb573928",
              "caption": "`q3 = months[6:9]`",
              "alt": null,
              "width": 507,
              "height": 235,
              "instructor_notes": null
            },
            {
              "id": 347038,
              "key": "ee06171f-6acd-4b32-add7-ce62b8b534a6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "冒号左侧的索引编号 6 是切片开始的位置。切片持续到第二个索引编号 9（请注意，切片不包括索引编号为 9 的元素，但包括编号为 6 的元素，以此类推）。",
              "instructor_notes": ""
            },
            {
              "id": 347039,
              "key": "30b8a355-67a1-4a25-9d27-710a5d42e780",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "切片简化方式\n===========\n\n当然我们也有一些简化切片代码的方法。如果你想获得一个从原始列表开头开始的子列表，或者一个在原始列表的末尾结束的子列表，可以采用如下所示的方法来快捷开始或结束索引：\n```python\n>>> first_half = months[:6]\n>>> print(first_half)\n['January', 'February', 'March', 'April', 'May', 'June']\n>>> second_half = months[6:]\n>>> print(second_half)\n['July', 'August', 'September', 'October', 'November', 'December']\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 347040,
              "key": "79848595-8989-4ce3-857c-28860339ac97",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "练习：列表切片\n==========\n\n请使用列表切片符号从下面这个列表中选择三个最近的日期。提示：负索引也适用于列表切片。",
              "instructor_notes": ""
            },
            {
              "id": 347041,
              "key": "affc5e21-063c-47a8-b69b-630787c27cad",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "affc5e21-063c-47a8-b69b-630787c27cad",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6005503906938880",
                "initial_code_files": [
                  {
                    "text": "eclipse_dates = ['June 21, 2001', 'December 4, 2002', 'November 23, 2003',\n                 'March 29, 2006', 'August 1, 2008', 'July 22, 2009',\n                 'July 11, 2010', 'November 13, 2012', 'March 20, 2015',\n                 'March 9, 2016']\n                 \n                 \n# TODO: Modify this line so it prints the last three elements of the list\nprint(eclipse_dates)",
                    "name": "slicing.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 347042,
              "key": "21359d9e-aec2-4614-adb5-96c495161a6f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "列表、字符串和可变性\n==================\n\n与 `string`、`float` 和 `int` 一样，`list` 也是一种类型。在我们看到的所有类型中，列表与字符串最为相似：这两种类型都支持索引、切片、`len` 函数和 `in` 运算符。\n\n```python\n>>> sample_string = \"And Now For Something Completely Different\"\n>>> sample_list = ['Graham', 'John', 'Terry', 'Eric', 'Terry', 'Michael']\n>>> sample_string[4]\n'N'\n>>> sample_list[4]\n'Terry'\n>>> sample_string[12:21]\n'Something'\n>>> sample_list[2:4]\n['Terry', 'Eric']\n>>> len(sample_string)\n42\n>>> len(sample_list)\n6\n>>> 'thing' in sample_string\nTrue\n>>> 'Rowan' in sample_list\nFalse\n```\n那么列表与字符串有什么不同？其中最明显的区别是字符串为字母序列，而列表的元素可以是**任何**类型的对象。更细微的区别是列表可以被修改，但字符串不能：\n\n```python\n>>> sample_list[3] = 'Eric'\n>>> print(sample_list)\n['Graham', 'John', 'Terry', 'Eric', 'Terry', 'Michael']\n>>> sample_string[8] = 'f'\nTypeError: 'str' object does not support item assignment\n```\n表示对象可否修改的术语是**可变性**（Mutability）。列表是可变的，而字符串不可变。接下来，我们将探讨可以在列表中使用的方法和函数，同时将在程序中利用列表的可变性。",
              "instructor_notes": ""
            },
            {
              "id": 347043,
              "key": "789515b1-3477-4d4e-8697-c3ebfc663e96",
              "title": "可变性匹配练习",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "789515b1-3477-4d4e-8697-c3ebfc663e96",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "假设我们有以下两个表达式，`sentence1` 和 `sentence2`：\n```python\nsentence1 = \"I wish to register a complaint.\"\nsentence2 = [\"I\", \"wish\", \"to\", \"register\", \"a\", \"complaint\", \".\"]\n```\n将下面的 python 代码与修改后的 `sentence1` 或 `sentence2` 值相匹配。如果代码导致错误，则与\n Error 匹配。"
                },
                "concepts_label": "Python code",
                "answers_label": "`sentence1` 或 `sentence2` 的值",
                "concepts": [
                  {
                    "text": "`sentence2[6]=\"!\"`",
                    "correct_answer": {
                      "id": "a1490730669503",
                      "text": "[\"I\", \"wish\", \"to\", \"register\", \"a\", \"complaint\", \"!\"]"
                    }
                  },
                  {
                    "text": "`sentence2[0]= \"Our Majesty\"`",
                    "correct_answer": {
                      "id": "a1490730709235",
                      "text": "[\"Our Majesty\", \"wish\", \"to\", \"register\", \"a\", \"complaint\", \".\"]"
                    }
                  },
                  {
                    "text": "`sentence1[30]=\"!\"`",
                    "correct_answer": {
                      "id": "a1490730802508",
                      "text": "Error"
                    }
                  },
                  {
                    "text": "`sentence2[0:2] = [\"We\", \"want\"]`",
                    "correct_answer": {
                      "id": "a1490730825330",
                      "text": "[\"We\", \"want\", \"to\", \"register\", \"a\", “complaint”, \".\"]"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1490730802508",
                    "text": "Error"
                  },
                  {
                    "id": "a1490730709235",
                    "text": "[\"Our Majesty\", \"wish\", \"to\", \"register\", \"a\", \"complaint\", \".\"]"
                  },
                  {
                    "id": "a1490730669503",
                    "text": "[\"I\", \"wish\", \"to\", \"register\", \"a\", \"complaint\", \"!\"]"
                  },
                  {
                    "id": "a1490730825330",
                    "text": "[\"We\", \"want\", \"to\", \"register\", \"a\", “complaint”, \".\"]"
                  },
                  {
                    "id": "a1490730849467",
                    "text": "“I wish to register a complaint！”"
                  }
                ]
              }
            },
            {
              "id": 347047,
              "key": "9b11e668-80ed-4dda-bd3e-56774e7ed37c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "保存列表的变量\n====================\n之前，当创建一个具有不可变对象的变量时，该不可变对象的值即被保存在内存中。例如在下面这个示例中，我们创建了一个值为 `\"Old Woman\"` 的变量 `name` ，并将其赋值给另一个变量 `person`。\n```\n>>> name = \"Old Woman\"\n>>> person = name\n>>> name = \"Dennis\"\n>>> print(name)\nDennis\n>>> print(person)\nOld Woman\n```\n在第二行代码中，字符串 \"Old Woman\" 已经为 `person` 赋值。因此当我们在后面为 `name` 重新赋值，将其更新为 `\"Dennis\"` 时，并不会影响到 `person` 的值。\n\n\n列表与字符串不同，它们是可变的。在下面这个示例中，我们创建了一个名为 `dish` 的列表，列表中包含了一家咖啡厅的菜肴。我们将这个列表赋值给变量 `mr_buns_order`。当我们由于一种食材不可用而更改（转变）列表 `dish` 时，会同时影响 `dish` 和 `mr_buns_order`：\n```\n>>> dish = [\"Spam\", \"Spam\", \"Spam\", \"Spam\", \"Spam\", \"Spam\", \"baked beans\", \"Spam\", \"Spam\", \"Spam\", \"Spam\"]\n>>> mr_buns_order = dish\n>>> print(dish)\n['Spam', 'Spam', 'Spam', 'Spam', 'Spam', 'Spam', 'baked beans', 'Spam', 'Spam', 'Spam', 'Spam']\n>>> print(mr_buns_order)\n['Spam', 'Spam', 'Spam', 'Spam', 'Spam', 'Spam', 'baked beans', 'Spam', 'Spam', 'Spam', 'Spam']\n>>> dish[6] = \"Spam\" #baked beans are off\n>>> print(mr_buns_order)\n['Spam', 'Spam', 'Spam', 'Spam', 'Spam', 'Spam', 'Spam', 'Spam', 'Spam', 'Spam', 'Spam']\n>>> print(dish)\n['Spam', 'Spam', 'Spam', 'Spam', 'Spam', 'Spam', 'Spam', 'Spam', 'Spam', 'Spam', 'Spam']\n```\n`dish` 和 `mr_buns_order`是同一底层列表的两个变量名，我们可以使用任一名称来访问和更改该列表。\n\n包含可变和不可变对象的变量运行方式非常不同，你必须十分注意这一点。\n你需要不断进行试验，通过 `print` 函数来检查你的代码，以确保程序可以正确处理数据。\n",
              "instructor_notes": ""
            },
            {
              "id": 347044,
              "key": "5a701d5b-d41d-44c0-840a-bb7568117d2b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "使用列表\n==============\n\n下面是一些可以与列表一起使用的函数：\n\n`len（some_list）`\n------------------------\n\n返回 `some_list` 中的元素个数\n\n`max(some_list)`\n------------------------\n返回列表中的最大元素。最大元素的确定取决于列表中的对象类型。数字列表中的最大元素是最大的数字：\n```python\n>>> batch_sizes = [15, 6, 89, 34, 65, 35]\n>>> max(batch_sizes)\n89\n```\n字符串列表的最大元素是首字母顺序排在最后的一个元素：\n```python\n>>> python_varieties = ['Burmese Python', 'African Rock Python', 'Ball Python', 'Reticulated Python', 'Angolan Python']\n>>> max(python_varieties)\n'Reticulated Python'\n```\n这是因为 `max` 函数采用比较运算符 `>` 定义。有许多非数字类型都可以使用`>` 运算符进行比较。如果正在处理的对象可以用 `>` 比较，那么在这类对象的列表中便可以使用 `max` 函数。对于字符串来说，比较标准是首字母顺序，因此上面示例中列表的最大值就是首字母顺序排在最后的元素。\n\n当一个列表中包含不同类型的元素，并且这些类型无法进行比较时，`max` 函数也将无法使用：\n```python\n>>> max([42, 'African Swallow'])\nTypeError: unorderable types: str() > int()\n``` \n这是因为 `max` 函数采用 `>` 定义，如果无法比较列表中的两个对象，则无法确定最大元素。\n\n`min(some_list)`\n------------------------\n返回列表中的最小元素。 `min` 与 `max` 相反。\n\n`sorted（some_list）`\n------------------------\n按从小到大的顺序返回 `some_list` 的副本，同时保持 `some_list` 不变。可以通过添加可选参数 `reverse = True` 按从大到小的顺序排序。\n```python\n>>> sorted(batch_sizes)\n[6, 15, 34, 35, 65, 89]\n>>> sorted(batch_sizes, reverse=True)\n[89, 65, 35, 34, 15, 6]\n>>> print(batch_sizes)\n[15, 6, 89, 34, 65, 35]\n```",
              "instructor_notes": ""
            },
            {
              "id": 347045,
              "key": "1025be33-e6b7-4132-9996-e47956ff0f75",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "连接列表\n========\n\n下面我们来介绍一个新的字符串方法`join`，使用示例如下：\n```python\n>>> nautical_directions = \"\\n\".join([\"fore\", \"aft\", \"starboard\", \"port\"])\n>>> print(nautical_directions)\nfore\naft\nstarboard\nport\n```\njoin 将一个列表作为参数，返回一个由分隔符字符串连接列表元素组成的字符串。在这个示例中，我们使用字符串 `\\n` 作为分隔符，以便使每个元素之间有一个换行符。",
              "instructor_notes": ""
            },
            {
              "id": 347046,
              "key": "0f1cedb9-f814-47a1-aa46-156ee76035fd",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/5873e61f_join/join.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0f1cedb9-f814-47a1-aa46-156ee76035fd",
              "caption": "",
              "alt": null,
              "width": 603,
              "height": 195,
              "instructor_notes": null
            },
            {
              "id": 347048,
              "key": "538b2464-8003-416e-b3db-a5228a142c55",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "我们也可以和 `.join` 配合使用其他字符串（而不是 `'\\n'`）。例如：\n```python\n>>> names = [\"García\", \"O'Kelly\", \"Davis\"]\n>>> \"-\".join(names)\n\"García-O'Kelly-Davis\"\n```\n注意，务必用逗号 (`,`) 隔开连接列表中的每个元素。如果忘记隔开，尽管不会导致错误，但也会使你无法获得理想的结果。下面的例子中，\"García” 和 \"O'Kelly” 之间没有逗号，所以出现了以下结果：\n```python\n>>> names = [\"García\" \"O'Kelly\", \"Davis\"]\n>>> \"-\".join(names)\n\"GarcíaO'Kelly-Davis\"\n```\n你有没有注意到 \"García\" 和 \"O'Kelly\" 之间的 '-' 分隔符消失了？这是因为 Python 默认按字符串的字面形式进行连接。如果 `.join` 返回的结果与你的预期不同，那么你最好检查是否丢失了逗号。\n\n你还要注意的是，如果你尝试在列表中加入字符串以外的其他任何内容，`join` 会触发错误。例如：\n```python\n>>> stuff = [\"thing\", 42, \"nope\"]\n>>> \" and \".join(stuff)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: sequence item 1: expected str instance, int found\n```",
              "instructor_notes": ""
            },
            {
              "id": 347049,
              "key": "84e01ac7-965d-45aa-b70d-a18a5ae8ad3f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "追加到列表\n==============\n\n列表对象的 `append` 方法在列表末尾添加一个元素。\n```python\n>>> python_varieties.append('Blood Python')\n>>> print(python_varieties)\n['Burmese Python', 'African Rock Python', 'Ball Python', 'Reticulated Python', 'Angolan Python', 'Blood Python']\n```",
              "instructor_notes": ""
            },
            {
              "id": 347050,
              "key": "2b5fc2c0-d4b0-4505-9c4d-5dc4be2c5c0b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "练习：前三名\n===========\n\n编写一个函数 `top_three`，该函数以列表为参数，返回三个最大元素的列表。例如，`top_three([2,3,5,6,8,4,2,1]) == [8, 6, 5]`",
              "instructor_notes": ""
            },
            {
              "id": 347051,
              "key": "03dc81ea-d062-4d82-883d-5755dc0f403d",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "03dc81ea-d062-4d82-883d-5755dc0f403d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5741180747907072",
                "initial_code_files": [
                  {
                    "text": "def top_three(input_list):\n    \"\"\"Returns a list of the three largest elements input_list in order from largest to smallest.\n\n    If input_list has fewer than three elements, return input_list element sorted largest to smallest/\n    \"\"\"\n    # TODO: implement this function",
                    "name": "top3.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 347052,
              "key": "70b279cf-7a83-4bf2-966e-9315f75c12be",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "练习：中位数（Median）\n=========\n\n此练习中的函数 `median` 返回输入列表的中值。但该函数只适用于具有奇数个元素的列表。现在请你修改函数，当为 `median` 输入具有偶数个元素的列表时，该函数可返回两个中心元素的平均值。练习中提供的用例可以使你测试预期结果。",
              "instructor_notes": ""
            },
            {
              "id": 347053,
              "key": "433d30f1-e615-46b6-b0a9-c1a4e2c6a2c8",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "433d30f1-e615-46b6-b0a9-c1a4e2c6a2c8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5596945310679040",
                "initial_code_files": [
                  {
                    "text": "def median(numbers):\n    numbers.sort() #The sort method sorts a list directly, rather than returning a new sorted list\n    middle_index = int(len(numbers)/2)\n    return numbers[middle_index]\n\ntest1 = median([1,2,3])\nprint(\"expected result: 2, actual result: {}\".format(test1))\n\ntest2 = median([1,2,3,4])\nprint(\"expected result: 2.5, actual result: {}\".format(test2))\n\ntest3 = median([53, 12, 65, 7, 420, 317, 88])\nprint(\"expected result: 65, actual result: {}\".format(test3))\n\n",
                    "name": "median.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 347054,
              "key": "e224eb6b-8445-4cf6-bd44-6e4b595cf243",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "单击“下一项”查看该练习的解决方案。",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 673346,
          "key": "91b96493-44c7-4802-8824-85d6ab31b2a5",
          "title": "解决方案: 列表",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "91b96493-44c7-4802-8824-85d6ab31b2a5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 673334,
              "key": "546403ba-b2b2-4ce6-9491-ec506ca029b0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 解决方案: 列表索引\n\n```\ndef how_many_days(month_number):\n    \"\"\"Returns the number of days in a month.\n    WARNING: This function doesn't account for leap years!\n    \"\"\"\n    days_in_month = [31,28,31,30,31,30,31,31,30,31,30,31]\n    #todo: return the correct value\n    return days_in_month[month_number - 1]\n\n# This test case should print 31, the number of days in the eighth month, August\nprint(how_many_days(8))\n```",
              "instructor_notes": ""
            },
            {
              "id": 673336,
              "key": "ed97fa3a-d4c1-4b83-aed3-34e45aa7d9c2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 解决方案: 列表切片\n```\neclipse_dates = ['June 21, 2001', 'December 4, 2002', 'November 23, 2003',\n                 'March 29, 2006', 'August 1, 2008', 'July 22, 2009',\n                 'July 11, 2010', 'November 13, 2012', 'March 20, 2015',\n                 'March 9, 2016']\n                 \n                 \n# TODO: Modify this line so it prints the last three elements of the list\nprint(eclipse_dates[-3:])\n```",
              "instructor_notes": ""
            },
            {
              "id": 673338,
              "key": "2fc54568-e0da-4de0-a709-19f66f994889",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 解决方案: 前三名\n\n```\ndef top_three(input_list):\n    return sorted(input_list, reverse = True)[:3]\n```",
              "instructor_notes": ""
            },
            {
              "id": 673337,
              "key": "3fa7a7af-5aaf-4649-affe-3329b9849160",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 解决方案: 中位数\n\n```\nThere are two cases the median function needs to handle: inputs with even lengths and inputs with odd lengths. I can use an if statement to determine whether the list's length is even or odd.\n\n```python\ndef median(numbers):\n    numbers.sort() \n    if len(numbers) % 2:\n        # if the list has an odd number of elements,\n        # the median is the middle element\n        middle_index = int(len(numbers)/2)\n        return numbers[middle_index]\n    else:\n        # if the list has an even number of elements,\n        # the median is the average of the middle two elements\n        right_of_middle = len(numbers)//2 \n        left_of_middle = right_of_middle - 1\n        return (numbers[right_of_middle] + numbers[left_of_middle])/2\n```\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 347281,
          "key": "06888cd6-6f49-4fcf-9f0a-829acdfac850",
          "title": "For 循环",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "06888cd6-6f49-4fcf-9f0a-829acdfac850",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 347057,
              "key": "e7dae03e-b4d8-4576-a3f7-c1a3ea2b1537",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "For 循环\n========\n\n在 Python 中，我们可以使用列表来存储数据序列，并使用 for 循环来遍历列表。下面的代码中包含一个循环，可以将列表中每个名字的首字母大写（将字符串的首字母大写可以通过字符串的[title()](https://www.tutorialspoint.com/python/string_title.htm)方法来实现），并打印：\n\n```python\nnames = ['charlotte hippopotamus turner', 'oliver st. john-mollusc',\n         'nigel incubator-jones', 'philip diplodocus mallory']\n\nfor name in names:\n    print(name.title())\n```\n\n运行该代码可输出：\n```text\nCharlotte Hippopotamus Turner\nOliver St. John-Mollusc\nNigel Incubator-Jones\nPhilip Diplodocus Mallory\n```\n\n现在我们来具体看看 for 循环的语法：",
              "instructor_notes": ""
            },
            {
              "id": 347058,
              "key": "4633cfec-e20e-4e4f-9cc2-36618616fb4e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/5873f13f_for-loop/for-loop.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4633cfec-e20e-4e4f-9cc2-36618616fb4e",
              "caption": "",
              "alt": null,
              "width": 1232,
              "height": 676,
              "instructor_notes": null
            },
            {
              "id": 347059,
              "key": "d15651c2-63bc-4167-a5b3-fced69d6a4dd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "1. 关键字 `for` 表示这是一个 for 循环。\n2. 该行的其余部分表示正在迭代的内容。`names` 是这个 for 循环迭代的列表。`name` 是该循环的迭代变量。针对 `names` 中的每个元素， for 循环的主体都会被执行一次，迭代变量 `name` 可用于循环体，从而指代循环当前处理的元素。\n3. for 循环的主体部分需要缩进四个空格，并针对列表中的每个元素执行一次。\n\n**关于命名的注释**：你可以采用自己喜欢的任何方式命名迭代变量。但是上面这个例子展现了一个常见模式，即列表 `names` 的名称是以 \"s\" 结尾的复数，而迭代变量是没有 \"s\" 的单数。以此模式命名列表和迭代变量，可以使其他程序员更轻松地了解不同的变量。",
              "instructor_notes": ""
            },
            {
              "id": 347060,
              "key": "7c7812b2-cb41-44b7-9d23-550c404b66f3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "练习：列表的总和\n==============\n\n请在下面的练习中定义一个函数 `list_sum`，该函数将一个列表作为参数，并返回列表中元素的总和。你可以使用 for 循环迭代列表。",
              "instructor_notes": ""
            },
            {
              "id": 347061,
              "key": "abee6df5-ed88-45f8-a951-371d3a4b732d",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "abee6df5-ed88-45f8-a951-371d3a4b732d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6379850437885952",
                "initial_code_files": [
                  {
                    "text": "def list_sum(input_list):\n    sum = 0\n    # todo: Write a for loop that adds the elements\n    # of input_list to the sum variable\n    \n    return sum\n\n\n\n#These test cases check that list_sum works correctly\ntest1 = list_sum([1, 2, 3])\nprint(\"expected result: 6, actual result: {}\".format(test1))\n\ntest2 = list_sum([-1, 0, 1])\nprint(\"expected result: 0, actual result: {}\".format(test2))\n",
                    "name": "sum.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 347062,
              "key": "3802073f-e33e-4dad-9a1f-12166187e0a5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "练习：XML 标签计数器\n================\n请在下面的练习中编写函数 `tag_count`，其参数以字符串列表的形式列出。该函数应该返回字符串中有多少个 [XML 标签](https://en.wikipedia.org/wiki/XML)。XML 是类似于 HTML 的数据语言，它以左尖括号 \"<\" 开始，以右尖括号 \">\" 结尾。你可以通过检查列表中的字符串是否以 \"<\" 开始，以 \">\" 结尾来判断它是否为 XML 标签。\n\n你可以假设作为输入的字符串列表不包含空字符串。",
              "instructor_notes": ""
            },
            {
              "id": 347063,
              "key": "3630b9ef-8994-4346-9f32-e1c4849d9ead",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "3630b9ef-8994-4346-9f32-e1c4849d9ead",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5933602765406208",
                "initial_code_files": [
                  {
                    "text": "\"\"\"Write a function, `tag_count`, that takes as its argument a list\nof strings. It should return a count of how many of those strings\nare XML tags. You can tell if a string is an XML tag if it begins\nwith a left angle bracket \"<\" and ends with a right angle bracket \">\".\n\"\"\"\n#TODO: Define the tag_count function\ndef tag_count(list1):\n    # Your code goes here!\n    return count\n\n# Test for the tag_count function:\nlist1 = ['<greeting>', 'Hello World!', '</greeting>']\ncount = tag_count(list1)\nprint(\"Expected result: 2, Actual result: {}\".format(count))",
                    "name": "XMLTagCounter.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 347064,
              "key": "6e4e0c88-40e3-41e9-bb3a-efddad8294b2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "使用循环构建列表\n====================\n\n除了利用循环从列表中提取信息之外，我们还可以使用 for 循环创建和修改列表。以我们在这一节开头看到的名单列表为例（注意所有首字母均为小写）：\n\n```python\nnames = ['charlotte hidppopotamus turner', 'oliver st. john-mollusc',\n         'nigel incubator-jones', 'philip diplodocus mallory']\n```\n\n通过下面的代码，我们可以使用循环生成一个首字母大写的名单：\n\n```python\n# create a new list of capitalized names without modifying the original list\ncapitalized_names = [] #create a new, empty list\nfor name in names:\n    capitalized_names.append(name.title()) #add elements to the new list\n```\n\n如果你不想保留首字母小写的名单列表，你也可以将其覆盖，而不是创建一个新列表。\n\n```python\n# modify the names list in place\nfor index in range(len(names)): # iterate over the index numbers of the names list\n    names[index] = names[index].title() # modify each element of names\n```\n\n如需创建一个新列表，可以从一个空列表 (`[]`) 开始，然后使用 `append` 方法添加新元素。修改列表更复杂一些，需要使用一个新的函数：`range`。`range` 函数需要一个参数，即整数 n，并返回一个从零到 n-1 的数字序列。\n\n```python\n>>> for number in range(4):\n>>>     print(number)\n0\n1\n2\n3\n```\n使用 range 函数为名单列表中的每个值生成索引。这样我们可以使用 `names[index]` 访问列表的元素，以便更新 `names` 列表中的值。",
              "instructor_notes": ""
            },
            {
              "id": 347065,
              "key": "e6247f34-df4f-4dc9-85ef-9b9d060294c6",
              "title": "Why `range`?",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e6247f34-df4f-4dc9-85ef-9b9d060294c6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "使用 `range` 生成索引以修改列表似乎相当于迂回，为什么这是必要的？试一试这个更简单的方法看看会出现什么结果：\n\n```python\nnames = ['charlotte hippopotamus turner', 'oliver st. john-mollusc', 'nigel incubator-jones', 'philip diplodocus mallory']\n\nfor name in names:\n    name = name.title()\n\nprint(names)\n```\n\n这段代码有什么用？",
                "answers": [
                  {
                    "id": "a1483994414451",
                    "text": "修改名单列表，使得每个名字都大写",
                    "is_correct": false
                  },
                  {
                    "id": "a1483994485416",
                    "text": "导致运行时错误",
                    "is_correct": false
                  },
                  {
                    "id": "a1483994486263",
                    "text": "代码没有任何作用",
                    "is_correct": true
                  },
                  {
                    "id": "a1483994487103",
                    "text": "删除列表",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 347066,
              "key": "e19a44d8-0025-42bf-b9cc-35f6919a2cf6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "练习：创建 HTML 列表\n=====================\n\n请在下面的练习中编写 `html_list` 函数。该函数需要一个参数，即一个字符串列表，并返回一个 HTML 列表形式的单个字符串。例如，如果为函数提供列表 `['first string', 'second string']` 作为参数，则该函数将返回以下字符串。\n```text\n<ul>\n<li>first string</li>\n<li>second string</li>\n</ul>\n```\n也就是说，字符串的第一行应该是开始标签 `<ul>`。继第一行之后是源列表中的两个元素（各占一行），前后带有 `<li>` 和 `</li>` 标签。字符串的最后一行应该是结束标签 `</ul>`。",
              "instructor_notes": ""
            },
            {
              "id": 347067,
              "key": "d7a1483d-f68a-4393-99b9-3503da19d2e6",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "d7a1483d-f68a-4393-99b9-3503da19d2e6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5147060371324928",
                "initial_code_files": [
                  {
                    "text": "#define the  html_list function\ndef html_list(list_of_strings):\n    # Your code goes here!\n    return\n\nprint(html_list(['First element', 'Second element', 'Third element']))",
                    "name": "htmllist.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 347068,
              "key": "480623c1-4e24-44ab-9020-246f3d4a90fd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "`range` 函数的其他应用\n=====================\n虽然 `range` 可以用于修改列表，但这并不是它的唯一用处。我们也可以使用该函数将某个操作重复一定次数。\n```python\n>>> for i in range(3):\n...     print(\"Camelot!\")\n... \nCamelot!\nCamelot!\nCamelot!\n>>> print(\"It's only a model.\")\nIt's only a model.\n```",
              "instructor_notes": ""
            },
            {
              "id": 347069,
              "key": "8e13c7fb-e714-410b-b07c-51ec2318bb72",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "练习：Starbox\n=========\n\n在下面的练习中，`starbox` 函数将打印出一个由星号组成的框。该函数有两个参数，即宽度和高度，其单位为字符数量。\n这个函数并不完整，尽管它打印了正确宽度的框，但忽略了参数高度。现在请你将函数补充完整，以便根据我们提供的两个测试用例打印出正确大小的框。**提示：**在这个练习中，`range` 函数也许可以派上用场！",
              "instructor_notes": ""
            },
            {
              "id": 347070,
              "key": "93fed313-af59-4c8d-ae7d-f58222d9094b",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "93fed313-af59-4c8d-ae7d-f58222d9094b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4642945396506624",
                "initial_code_files": [
                  {
                    "text": "def starbox(width, height):\n    \"\"\"print a box made up of asterisks.\n\n    width: width of box in characters, must be at least 2\n    height: height of box in lines, must be at least 2\n    \"\"\"\n    print(\"*\" * width) #print top edge of box\n   \n    # print sides of box\n    # todo: print this line height-2 times, instead of three times\n    print(\"*\" + \" \" * (width-2) + \"*\") \n    print(\"*\" + \" \" * (width-2) + \"*\")\n    print(\"*\" + \" \" * (width-2) + \"*\")\n\n    print(\"*\" * width) #print bottom edge of box\n\n# Test Cases\nprint(\"Test 1:\")\nstarbox(5, 5) # this prints correctly\n\nprint(\"Test 2:\")\nstarbox(2, 3)  # this currently prints two lines too tall - fix it!\n",
                    "name": "starbox.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 347071,
              "key": "a09c1568-1505-475c-a239-ea46128b1e61",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "单击“下一项”查看该练习的解决方案。",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 673347,
          "key": "415d439f-bb7c-4853-a371-14549287b484",
          "title": "解决方案: For 循环",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "415d439f-bb7c-4853-a371-14549287b484",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 673335,
              "key": "a4d93be4-934d-4597-9a9d-2b121fa7885b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 解决方案: 列表的总和\n\n\n```\ndef list_sum(input_list):\n    sum = 0\n    for element in input_list:\n        sum += element\n    return sum\n\n#These test cases check that list_sum works correctly\ntest1 = list_sum([1, 2, 3])\nprint(\"expected result: 6, actual result: {}\".format(test1))\n\ntest2 = list_sum([-1, 0, 1])\nprint(\"expected result: 0, actual result: {}\".format(test2))\n```",
              "instructor_notes": ""
            },
            {
              "id": 673341,
              "key": "c3455a91-4a92-469b-9039-c0f32f2c3032",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "`format`函数的说明可以参考 [这里](http://www.runoob.com/python/att-string-format.html)。",
              "instructor_notes": ""
            },
            {
              "id": 673342,
              "key": "53493616-f599-4623-8347-905ec6814bb6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 解决方案: XML 标签计数器\n\n```\ndef tag_count(list1):\n    count = 0\n    for element in list1:\n        if element[0] == '<' and element[-1] == '>':\n            count += 1\n    return count\n\n\n# Test for the tag_count function:\nlist1 = ['<greeting>', 'Hello World!', '</greeting>']\ncount = tag_count(list1)\nprint(\"Expected result: 2, Actual result: {}\".format(count))\n```",
              "instructor_notes": ""
            },
            {
              "id": 673340,
              "key": "5163d151-4e6a-4877-a3bf-a8d26fbdf5ad",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 解决方案：创建 HTML 列表\n```\ndef html_list(list_items):\n    HTML_string = \"<ul>\\n\"\n    for item in list_items:\n        HTML_string += \"<li>{}</li>\\n\".format(item)\n    HTML_string += \"</ul>\"\n    return HTML_string\n\nprint(html_list(['First element', 'Second element', 'Third element']))\n```",
              "instructor_notes": ""
            },
            {
              "id": 673339,
              "key": "dc493193-5bc1-4fef-97c5-014d0d73face",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "解决方案: Starbox\n==========\n\n我们可以通过下面的训话来打印正确的行数：\n\n```python\nfor _ in range(height-2):\n        print(\"*\" + \" \" * (width-2) + \"*\")\n```\n这个循环使用`range`作为一个简单的计数器，循环的主体部分执行了`height - 2`次。下划线`_`是一个无关变量，因为我们在循环计数中对它的实际值并不感兴趣。\n\n下面是完整解决方案：\n```python\ndef starbox(width, height):\n    \"\"\"print a box made up of asterisks.\n\n    width: width of box in characters, must be at least 2\n    height: height of box in lines, must be at least 2\n    \"\"\"\n    print(\"*\" * width) #print top edge of box\n   \n    # print sides of box\n    for _ in range(height-2):\n        print(\"*\" + \" \" * (width-2) + \"*\") \n\n    print(\"*\" * width) #print bottom edge of box\n```\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 347283,
          "key": "839460eb-f4af-47c1-a330-e2728c23ac8c",
          "title": "While 循环",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "839460eb-f4af-47c1-a330-e2728c23ac8c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 347073,
              "key": "e532c320-c2e6-4afe-8c66-5d5d9d0dc7c5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "While 循环\n======\nFor 循环是 \"定迭代\" 的一种，它表示循环主体将执行指定次数。列表的 for 循环针对列表中的每个元素执行一次主体。使用 `range` 函数的 for 循环，其执行次数将由 range 函数调用指定。\n这种迭代与 \"不定迭代\" 不同，后者指循环重复未知次数，直到满足某些条件时循环才会结束。下面这个示例将模拟二十一点发牌，使用 while 循环将卡片牌堆拖到手牌中，在手牌的值大于或等于 17 时停止。\n\n```python\ncard_deck = [4, 11, 8, 5, 13, 2, 8, 10]\nhand = []\n\nwhile sum(hand) <= 17:\n    hand.append(card_deck.pop())\n\nprint(hand)\n```\n这个示例中有一个新的函数 `sum` 和一个新的列表方法 `pop`。`sum` 非常直观，它用于计算列表中元素的总和。`pop` 方法与 `append` 方法相反，`pop` 从列表中移除一个元素并返回它。大家可以在[官方文档](https://docs.python.org/3/tutorial/datastructures.html#more-on-lists)中阅读更多关于 pop 方法的内容。\n\n\n下面我们来看一下 while 循环的语法：",
              "instructor_notes": ""
            },
            {
              "id": 347074,
              "key": "9c8164e8-a722-48a5-b11e-d0efcac1b6c2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/5873fbe3_screen-shot-2017-01-09-at-1.08.23-pm/screen-shot-2017-01-09-at-1.08.23-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9c8164e8-a722-48a5-b11e-d0efcac1b6c2",
              "caption": "",
              "alt": null,
              "width": 594,
              "height": 256,
              "instructor_notes": null
            },
            {
              "id": 347075,
              "key": "b5f092e8-316c-4837-8851-e58222560db6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "1. 关键字 `While` 表示这是一个 while 循环\n2. 接下来是一个测试表达式，在该示例中表达式为 `sum(hand) <= 21`。如果表达式为真，将执行循环主体，之后将再次判断该表达式是否为真。这一过程重复判断测试表达式的真假，并运行循环主体，直到表达式变为 false。\n3. 循环主体前需要缩进四个空格。循环主体应该以某种方式修改测试表达式中的变量。如果测试表达式的值没有改变，这将导致一个无限循环！在上面的示例中，循环主体将数字追加到了 `hand` 列表中，因此增加了 `sum(hand)` 的值。",
              "instructor_notes": ""
            },
            {
              "id": 347076,
              "key": "836ae6f1-8569-4252-89e4-7f721002119c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "练习：最大平方数\n===========\n请在下面的练习中完成 nearest_square 函数。该函数取一个整数参数 `limit`，并返回一个小于 `limit` 的最大平方数。平方数是整数乘以自身的乘积，例如 6*6 等于 36，所以 36 是一个平方数。\n\n这个代码有多种编写方法，但是我建议大家使用一个 while 循环！\n\n下面是一个测试用例，在函数编写完成后，你可以使用它来测试自己的代码。当然你也可以随意使用其他数据进行测试。\n\n```python\ntest1 = nearest_square(40)\nprint(\"expected result: 36, actual result: {}\".format(test1))\n```",
              "instructor_notes": ""
            },
            {
              "id": 347077,
              "key": "4cc1e26b-ac8c-4ccd-b600-9acce025105a",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "4cc1e26b-ac8c-4ccd-b600-9acce025105a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6289409835139072",
                "initial_code_files": [
                  {
                    "text": "#TODO: Implement the nearest_square function",
                    "name": "nearestsquare.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 347078,
              "key": "69f5c2d6-fa4e-4c33-bc48-dd73035a50f3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "`break` 停止\n================\n\nFor 循环迭代序列中的每个元素，而 while 循环在满足条件时停止迭代。在大多数情况下，这两种用法就已经足够了，但我们有时候需要更精确地控制循环何时结束。这时我们就需要使用关键字 `break` 了。\n\n循环在遇到 break 时便会立即停止。如果检测到已经满足某些条件，那么我们可以使用这些条件来结束循环。在 `for` 循环和 `while` 循环中，我们都可以使用`break`。\n\n我们将通过下面的示例学习如何使用 `break`。\n假设你想按照一个货物列表来装载货船。每个货物都具有一定的重量，但货船有最大载重限制。在理想情况下，我们希望能够装载所有货物，同时避免货船超载。因此，当货物达到货船的额定载重时，应停止装载。所以在这里我们将使用一个 `for` 循环，来记录装载的货物以及总重量。一旦所装载的货物达到了货船的最大载重，应使用 `break` 语句停止装载。\n\n**注意：**下方示例中的 `manifest` 是一个由列表组成的列表。我们以前接触过列表，也知道有些列表元素本身就是列表，而 `manifest` 变量就是这种情况。`manifest` 列表中的每个元素本身就是一个列表，它包含两个元素：货物名称和货物重量。\n\n```python\n# each item in the manifest is an item and its weight\nmanifest = [[\"bananas\", 15], [\"mattresses\", 34], [\"dog kennels\",42], [\"machine that goes ping!\", 120], [\"tea chests\", 10], [\"cheeses\", 0]]\n\ncargo_weight = 0\ncargo_hold = []\n\nfor cargo in manifest:\n    if cargo_weight >= 100:\n        break\n    else:\n        cargo_hold.append(cargo[0])\n        cargo_weight += cargo[1]\n```\n\n上方这段代码旨在避免船上货物的重量超过规定的限值 100。现在我们来检查一下装载在船上的货物重量。\n\n```python\n>>> print(cargo_weight)\n211\n>>> print(cargo_hold)\n['bananas', 'mattresses', 'dog kennels', 'machine that goes ping!']\n```\n上方的结果好像不太对劲，货船装载的货物严重超过了重量限制。尽管 break 语句阻止了我们将每一件货物都放在船上，但最后仍然超过了限制。\n\n单看上方的代码我们很难判断哪里出了问题。在这里我们可以在代码中使用 `print` 函数来查看问题出在哪里。这是一个非常方便的方法，因为随着代码的逐步运行，它可以让我们深入了解数据状态。如果打印的提示正确（并给出上下文），这可能有助于我们找到错误。\n\n我们在下方的代码中添加了调试语句：\n```python\ncargo_weight = 0\ncargo_hold = []\n\nfor cargo in manifest:\n    print(\"debug: the weight is currently: {}\".format(cargo_weight))\n    if cargo_weight >= 100:\n        print(\"debug: breaking loop now!\")\n        break\n    else:\n        print(\"debug: adding item: {}\".format(cargo[0]))\n        print(\"debug: with weight: {}\".format(cargo[1]))\n        cargo_hold.append(cargo[0])\n        cargo_weight += cargo[1]\n```\n\n以下是带标注循环的输出：\n```text\ndebug: the weight is currently: 0\ndebug: adding item: bananas\ndebug: with weight: 15\ndebug: the weight is currently: 15\ndebug: adding item: mattresses\ndebug: with weight: 34\ndebug: the weight is currently: 49\ndebug: adding item: dog kennels\ndebug: with weight: 42\ndebug: the weight is currently: 91\ndebug: adding item: machine that goes ping!\ndebug: with weight: 120\ndebug: the weight is currently: 211\ndebug: breaking loop now!\n```\n\n通过这些调试日志，我们可以看到循环正确地将货物添加到货船中，但是在满足重量限制之后，还增加了一个额外货物。",
              "instructor_notes": ""
            },
            {
              "id": 347079,
              "key": "4939a260-cabf-472b-aaec-e179e373954a",
              "title": "思考",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4939a260-cabf-472b-aaec-e179e373954a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": null,
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "大家知道为什么列表中添加了一个额外的货物吗？请告诉我们你的想法，并查看我们的想法。"
              },
              "answer": {
                "text": "感谢大家思考！问题是导致循环 `break` 的 `if` 条件只有在*当前*重量超过限制时才会触发。相反，应该检查添加下一个货物后的*新*重量是否超过限制。\n\n这段新代码将解决问题：\n```python\nfor cargo in manifest:\n    if cargo_weight + cargo[1] >= 100:\n        break\n    else:\n        cargo_hold.append(cargo[0])\n        cargo_weight += cargo[1]\n```\n可以再次添加 `print` 语句，并看看其如何运行。",
                "video": null
              }
            },
            {
              "id": 347080,
              "key": "79171ec8-2153-42af-ab3e-b3cc7dcc2586",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "练习：断开字符串\n==========\n\n请在下方的练习中使用 break 语句来编写自己的循环。你的任务是创建一个长度为 140 个字符的字符串 `news_ticker`。你可以从 `headlines` 列表添加标题，并在每个标题之间插入一个空格。当 `news_ticker` 的长度超过 140 个字符时，你可以从中间截断最后一个标题，使字符长度保持在 140。\n\n请记住，在 for 循环和 while 循环中均可使用 `break`。请在下方练习中使用你心目中最合适的循环，你也可以考虑在代码中添加 `print` 语句来帮助你解决错误。",
              "instructor_notes": ""
            },
            {
              "id": 347081,
              "key": "36a9b1c2-64eb-46ff-92a9-777077c69fce",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "36a9b1c2-64eb-46ff-92a9-777077c69fce",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5808871445757952",
                "initial_code_files": [
                  {
                    "text": "headlines = [\"Local Bear Eaten by Man\",\n             \"Legislature Announces New Laws\",\n             \"Peasant Discovers Violence Inherent in System\",\n             \"Cat Rescues Fireman Stuck in Tree\",\n             \"Brave Knight Runs Away\",\n             \"Papperbok Review: Totally Triffic\"]\n\nnews_ticker = \"\"\n# TODO: set news_ticker to a string that contains no more than 140 characters long.\n# HINT: modify the headlines list to verify your loop works with different inputs",
                    "name": "ticker.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 673345,
          "key": "fed74c1b-d9c9-43e2-bb5d-1511514cd380",
          "title": "解决方案: While 循环",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fed74c1b-d9c9-43e2-bb5d-1511514cd380",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 673343,
              "key": "93f2a3ab-e66b-42e4-a0c2-efaeb57e8b31",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 解决方案: 最大平方数\n```\ndef nearest_square(limit):\n    answer = 0\n    while (answer+1)**2 < limit:\n        answer += 1\n    return answer**2\n```",
              "instructor_notes": ""
            },
            {
              "id": 673344,
              "key": "b236b479-5f67-4877-a843-5f7e805a1979",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 解决方案: 断开字符串\n```\nfor headline in headlines:\n    news_ticker += headline + \" \"\n    if len(news_ticker) >= 140:\n        news_ticker = news_ticker[:140]\n        break\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 673349,
          "key": "1ab3b5d7-2779-412e-8d82-f9e1c01896a8",
          "title": "其他数据结构",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1ab3b5d7-2779-412e-8d82-f9e1c01896a8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 673348,
              "key": "12f0556e-2b58-49aa-afe3-28aed6dd891a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "除了上面提到的这些，Python 中还有一些其他的数据结构，比如集合、字典和复合数据结构。但是由于时间限制，这部分内容我们会在之后学习。\n\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}