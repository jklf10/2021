{
  "data": {
    "lesson": {
      "id": 869734,
      "key": "b699733a-4f57-4b81-9306-94043f5e9510",
      "title": "什么是版本控制",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "zh-cn",
      "summary": "",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/b699733a-4f57-4b81-9306-94043f5e9510/738094/1544291403649/What+is+Version+Control%3F+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/b699733a-4f57-4b81-9306-94043f5e9510/738094/1544291399234/What+is+Version+Control%3F+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 339067,
          "key": "06b0775b-b703-45ca-9935-939487706728",
          "title": "什么是版本控制",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "06b0775b-b703-45ca-9935-939487706728",
            "completed_at": "2019-05-07T07:04:58.377Z",
            "last_viewed_at": "2019-05-07T07:04:58.245Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 338731,
              "key": "aeacb2a2-ea5d-4ece-aaa5-f7d66b95d2da",
              "title": "Gitfinal L1 01 欢迎",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "lbR82UD5F0c",
                "china_cdn_id": "lbR82UD5F0c.mp4"
              }
            },
            {
              "id": 338732,
              "key": "4a347c1c-0515-4cbd-83e3-fab564aec592",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "我刚刚提到“版本控制”。因为你已经在学习这门课程，可能已经对版本控制有所了解。如果不了解的话，我可以教个小技巧：试着倒过来读，“版本控制”变成了“控制版本”！版本控制系统是帮助你控制（或管理）某个事物（通常是源代码）的不同版本。\n\n          \n### 深入研究\n        \n- [维基百科版本控制页面(英)](https://en.wikipedia.org/wiki/Version_control) <br>\n- [百度百科版本控制页面](https://baike.baidu.com/item/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/3311252?fr=aladdin)",
              "instructor_notes": ""
            },
            {
              "id": 338733,
              "key": "9ed8aa88-4de3-4fbb-a27f-95d55820e159",
              "title": "Gitfinal L1 03 版本控制系统",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "b7TjsVoTo3Q",
                "china_cdn_id": "b7TjsVoTo3Q.mp4"
              }
            },
            {
              "id": 338734,
              "key": "78def38a-3b8e-425a-8870-c85cb694651f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 版本控制系统信息\n\n \n<div style=\"display: none;\">[有很多版本控制系统可供我们选择](https://baike.baidu.com/item/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E8%BD%AF%E4%BB%B6) 。</div>[有很多版本控制系统可供我们选择](https://baike.baidu.com/item/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E8%BD%AF%E4%BB%B6)。单凭这一点就证明版本控制非常重要。以下是三大最热门的版本控制系统：\n         \n* [Git](https://git-scm.com/)\n          \n* [Subversion](https://subversion.apache.org/)\n          \n* [Mercurial](https://www.mercurial-scm.org/)\n\n         \n 版本控制系统模型包括两大主要类型：\n          \n* **集中式模型** - 所有用户都连接到一个中央的主仓库（master repository）\n          \n* **分布式模型** - 每个用户都在自己的计算机上拥有完整的仓库\n\n          \n### 深入研究\n         \n* [集中式与分布式版本控制系统的比较（Atlassian 博文 - 英）](http://blogs.atlassian.com/2012/02/version-control-centralized-dvcs/)   \n* 分布式版本控制：[维基百科链接](https://en.wikipedia.org/wiki/Distributed_version_control) | [百度百科链接](https://baike.baidu.com/item/DVCS/19310970)",
              "instructor_notes": ""
            },
            {
              "id": 338735,
              "key": "c17d1879-aed5-4310-a2f3-2a54e68b6154",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 小结\n          \n版本控制系统的主要目的是帮助你保留项目的详细历史记录，并且能够在不同的版本上进行工作。保留详细的项目历史记录很重要，因为这样可以看出一段时间内项目的进度。如果需要，你还可以回到项目的某个阶段，并恢复数据或文件。\n\t          \n在这门课程中，我们将使用分布式版本控制系统 Git。你可能很惊讶，其实你一直都在进行版本控制！",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339068,
          "key": "68d60539-7530-4c25-b038-41c81bc677c2",
          "title": "日常开发中的版本控制",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "68d60539-7530-4c25-b038-41c81bc677c2",
            "completed_at": "2019-05-07T07:05:13.860Z",
            "last_viewed_at": "2019-05-07T07:05:13.723Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 338736,
              "key": "791549b8-e4ae-4a5c-a52e-9bbce0f66698",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 版本控制随处可见\n\n我的工作是处理文档。我一直都在新建文档，并在文档中输入信息（希望是有用的信息！），然后编辑...编辑...编辑！你的工作也是这样吗？可能不是包含文字的文档，但是你可能处理的是某种形式的数据，并且这些数据会逐渐改变。\n\n你可能觉得，在处理文档时，你没有用到版本控制，在某种程度上，你是对的。你在编写文档时，没有经常保留不同的文档版本。但是这并不表明没有不同版本的文档。计算机一直在帮助你记录不同的版本！\n\n不相信我说的话？除了推测你是否表示怀疑的态度，我来证明下我的观点是正确的：\n\n* 打开你最喜欢的文本编辑器\n* 输入一些内容（不妨输入\"version control is dull!\"）\n* 更改其中一个单词（例如将 \"dull\" 改为 \"life-changing awesome\"）\n* 现在（到了精彩的部分了！）按下 `cmd` + `z` 或 `ctrl` + `z`\n\n💥 版本控制起作用啦！（对吧？我说了我没有撒谎）我猜你肯定一直使用撤销命令。反正我是经常用！\n\n实际上，我用到的每个应用都具有撤销功能。你可以将它看做一种版本控制形式，但是却是很简单的形式。我们来看看 Google 文档，了解一种更强大的版本控制形式。\n\n",
              "instructor_notes": ""
            },
            {
              "id": 338737,
              "key": "f340e851-4988-4b0b-994a-6691a2793d65",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a75370_ud123-l1-git-course-outline/ud123-l1-git-course-outline.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f340e851-4988-4b0b-994a-6691a2793d65",
              "caption": "_这门 Git 课程的 Google 文档大纲。_",
              "alt": "",
              "width": 2350,
              "height": 1612,
              "instructor_notes": null
            },
            {
              "id": 338738,
              "key": "0d824c71-5b73-45cd-987a-fdfc7c93e672",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "如果你用过 Google 文档的话，有没有注意到顶部的灰色小字，告诉你文档的状态？每当你输入内容时，它都在不断保存文档。当你输入完毕后，它会告诉你文档已保存。",
              "instructor_notes": ""
            },
            {
              "id": 338739,
              "key": "4905e8cf-e0d0-43b9-8989-c702b5f86f5b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a757b5_ud123-l1-google-docs-saving-progress/ud123-l1-google-docs-saving-progress.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4905e8cf-e0d0-43b9-8989-c702b5f86f5b",
              "caption": "_Google 文档的状态栏。当你正在编辑文档时，状态栏提示“正在保存…”，内容保存后，提示“所有更改都已保存到云端硬盘”。_",
              "alt": "",
              "width": 1064,
              "height": 696,
              "instructor_notes": null
            },
            {
              "id": 338740,
              "key": "c849f345-eae7-4775-8597-255ef7d1fcef",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "真正的问题是，你知道你可以点击这个链接吗？要不要点击看看？在你自己的 Google 文档中试试。\n    \n点击该链接将转到“版本历史记录（Revision history）”页面。（看到 Revision 一词了吗？Revision 和 Version\n 是同义词！表示：版本、修订）",
              "instructor_notes": ""
            },
            {
              "id": 338741,
              "key": "5ba91ff9-f3e4-4844-9aa9-2af3be2878db",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L1 11 Google 文档版本历史记录",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "GcvvbdKEchk",
                "china_cdn_id": "GcvvbdKEchk.mp4"
              }
            },
            {
              "id": 338742,
              "key": "1b2ee49b-20e2-46ae-b63b-28b3adcb436a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 版本历史记录并不足够强大\n          \nGoogle 文档的版本历史记录页面非常强大！我经常使用它，有时候输入了一些文字，然后删了，后来又意识到确实还要这些文字。\n          \n但是虽然功能很强大，但也并非十全十美。缺少了什么？我能想到的包括：\n          \n* 标记更改的功能\n\t         \n* 做出为何更改的详细描述的功能\n\t          \n* 在同一文档的不同版本之间切换的功能\n  \n* 撤消更改 A，编辑 B，然后回到更改 A 并且不影响编辑 B 的功能\n\t\n   \n版本控制工具 Git 可以实现以上所有功能，甚至更多！！！（猜测你没料到这一点吧！）我跟你提过 Git 非常强大吗？希望提过，因为我们将在下个部分详细了解 Git。 ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339069,
          "key": "5f703930-a95e-47f0-a56b-702ed3a93741",
          "title": "Git 和版本控制术语",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5f703930-a95e-47f0-a56b-702ed3a93741",
            "completed_at": "2019-05-07T07:05:16.752Z",
            "last_viewed_at": "2019-05-07T07:05:16.631Z",
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "Git Terms PDF",
                "uri": "http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58d31eb5_ud123-git-keyterms/ud123-git-keyterms.pdf"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 338743,
              "key": "5c1ef9e3-2b22-4539-a418-6890e5f4045b",
              "title": "Gitfinal L1 13 Git 术语",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "bf26adzeqMM",
                "china_cdn_id": "bf26adzeqMM.mp4"
              }
            },
            {
              "id": 338744,
              "key": "5191cec1-dfc6-4b44-94b4-70058a4cbef7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "你可以在课程资源面板中找到术语讲义。文件名称为“Git Terms PDF”，在辅助材料中也可以找到它。",
              "instructor_notes": ""
            },
            {
              "id": 338745,
              "key": "02d99b8b-b82c-4e15-8388-d96a0770a077",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 术语\n\n          \n## 版本控制系统 / 源代码管理器\n          \n**版本控制系统**（简称 **VCS**）是一个管理源代码不同版本的工具。**源代码管理器**（简称 **SCM**）是版本控制系统的另一个名称。\n\n          \nGit 是一个 SCM（因此也是 VCS！）。Git 网站的 URL 是 https://git-scm.com/ （注意它的域名中直接包含“SCM”！）。\n\n          \n## 提交（Commit）\n          \nGit 将数据看做微型文件系统的一组快照。每次 **commit**（在 Git 中保持项目状态），它都对文件当时的状况拍照，并存储对该快照的引用。你可以将其看做游戏中的保存点，它会保存项目的文件和关于文件的所有信息。\n\n          \n你在 Git 中的所有操作都是帮助你进行 commit，因此 commit 是 Git 中的基本单位。 \n\n          \n## 仓库（Repository / repo）\n          \n**仓库**是一个包含项目内容以及几个文件（在 Mac OS X 上默认地处于隐藏状态）的目录，用来与 Git 进行通信。仓库可以存储在本地，或作为远程副本存储在其他计算机上。仓库是由 commit 构成的。\n\n          \n## 工作目录 / 工作区（Working Directory）\n          \n**工作目录**是你在计算机的文件系统中看到的文件。当你在代码编辑器中打开项目文件时，你是在工作目录中处理文件。\n   \n与这些文件形成对比的是保持在仓库中（在 commit 中！）的文件。\n    \n在使用 Git 时，工作目录与命令行工具的 _current working directory_ （当前工作目录）不一样，后者是 shell 当前正在查看的目录。\n          \n## 检出（Checkout）\n          \n**检出**是指将仓库中的内容复制到工作目录下。\n\n          \n## 暂存区 / 暂存索引 / 索引（Staging Area / Staging Index / Index）\n          \nGit 目录下的一个文件，存储的是即将进入下个 commit 内容的信息。可以将**暂存区**看做准备工作台，Git 将在此区域获取下个 commit。暂存索引中的文件是准备添加到仓库中的文件。\n\n          \n## SHA\n          \n**SHA** 是每个 commit 的 ID 编号。以下是 commit 的 SHA 示例：`e2adf8ae3e2e4ed40add75cc44cf9d0a869afeb6`。\n\n          \n它是一个长 40 个字符的字符串（由 0–9 和 a–f 组成），并根据 Git 中的文件或目录结构的内容计算得出。SHA 的全称是\"Secure Hash Algorithm\"（安全哈希算法）。如果你想了解哈希算法，请参阅我们的[计算机科学入门课程](https://www.udacity.com/course/intro-to-computer-science--cs101)。\n\n\n          \n## 分支（Branch）\n          \n**分支**是从主开发流程中分支出来的新的开发流程。这种分支开发流程可以在不更改主流程的情况下继续延伸下去。\n\n          \n回到之前关于游戏保存点的示例，你可以将分支看做在游戏中设立保存点后，尝试一个有风险的招式。如果有风险的招式不奏效，则回到保存的位置。令分支非常强大的关键之处是你可以在一个分支上设定保存点，然后切换到另一个分支并继续设定保存点。 \n\n          \n了解这些术语后，我们将探寻使用版本控制的一般流程，从更高的层面了解如何使用 Git。",
              "instructor_notes": ""
            },
            {
              "id": 338746,
              "key": "a3a2cbe9-97a0-4718-afe1-97c6c083b179",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L1 15 Git 总体流程",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "dVil8e0yptQ",
                "china_cdn_id": "dVil8e0yptQ.mp4"
              }
            },
            {
              "id": 338747,
              "key": "d115f7e2-a001-4ca1-a201-6941a4b8ec95",
              "title": "什么被 Commit 了",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d115f7e2-a001-4ca1-a201-6941a4b8ec95",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "HTML 文件在暂存区具有 HTML 和 CSS 更改，并在工作目录中具有其他 HTML 更改。根据你现目前所学的 commit 工作原理知识，如果现在 commit 的话，会 commit 什么内容？",
                "answers": [
                  {
                    "id": "a1485546208838",
                    "text": "只有暂存区的 HTML 文件更改",
                    "is_correct": false
                  },
                  {
                    "id": "a1485546224180",
                    "text": "只有暂存区的 CSS 文件更改",
                    "is_correct": false
                  },
                  {
                    "id": "a1485546229305",
                    "text": "暂存区的 HTML 和 CSS 文件更改",
                    "is_correct": true
                  },
                  {
                    "id": "a1485546237338",
                    "text": "工作目录和暂存区的 HTML 文件更改",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 338748,
              "key": "7f9f44a7-d8c4-4b55-8968-49d77f20676d",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L1 17 总体流程 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rFtUkk-sCqw",
                "china_cdn_id": "rFtUkk-sCqw.mp4"
              }
            },
            {
              "id": 338749,
              "key": "0bbf17f7-de48-41a8-9a51-f9ef57c2be63",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L1 18 小结",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "xqD9ImXXXHk",
                "china_cdn_id": "xqD9ImXXXHk.mp4"
              }
            },
            {
              "id": 495613,
              "key": "ee0486ef-1e89-481f-9770-b2ae23d59852",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 资源\n\n[优达学城 Git 关键术语](https://udacity.github.io/frontend-nanodegree-styleguide-zh/udacity-git-keyterms.pdf) \n\n<p style=\"font-size: 12px;\">(↓英文原版请点击下方链接↓)</p>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339070,
          "key": "63a6f935-dea7-43c2-aaa3-61deea5070c8",
          "title": "Mac/Linux 设置",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63a6f935-dea7-43c2-aaa3-61deea5070c8",
            "completed_at": "2019-05-07T07:09:02.827Z",
            "last_viewed_at": "2019-05-07T07:09:02.101Z",
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "udacity-terminal-config.zip",
                "uri": "http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58d31ce3_ud123-udacity-terminal-config/ud123-udacity-terminal-config.zip"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 338750,
              "key": "8b2451b4-bb8f-4559-afeb-657c15e2e49a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 安装 Git\n     \nMac OS 实际上已经安装了 Git，但是我们可以重新安装，以便使用最新的版本：\n          \n1. 转到 https://git-scm.com/downloads\n          \n* 下载 Mac 版软件\n          \n* 安装 Git 并选择所有默认选项\n  \n安装完毕后，你应该能够在命令行工具中运行 `git`。如果显示了使用信息，则一切正常！\n\n如果遇到任何问题，请在论坛中告诉我们。",
              "instructor_notes": ""
            },
            {
              "id": 338751,
              "key": "92a9634c-3f0a-4335-b665-d26a012b1e51",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 配置 Mac 的终端\n        \n我们即将配置终端，以便当我们位于版本控制目录下时，可以显示有用的信息。_这是可选步骤！_你不需要重新配置终端，Git 就能运行。你可以完成整个课程而不用重新配置终端。但是，重新配置的话，使用起来更方便。\n        \n如果你选择配置终端，完毕后，看起来如下图所示。",
              "instructor_notes": ""
            },
            {
              "id": 338754,
              "key": "79f44c8c-6841-46e8-bb66-e9280a5cafe4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a76894_ud123-l1-terminal-config-mac/ud123-l1-terminal-config-mac.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/79f44c8c-6841-46e8-bb66-e9280a5cafe4",
              "caption": "_Mac OS 上的终端应用。终端已经过配置，可以显示版本控制信息。_",
              "alt": "",
              "width": 842,
              "height": 569,
              "instructor_notes": null
            },
            {
              "id": 338755,
              "key": "9d01aeac-8570-4018-9dc5-dfba363fccc9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 配置步骤\n      \n要配置终端，我们将执行以下步骤：\n          \n1. 下载 zip 文件\n          \n* 将目录 `udacity-terminal-config` 移到你的主目录下，并命名为 `.udacity-terminal-config`（注意前面有个点）\n          \n* 将 `bash_profile` 文件移到你的主目录下，并命名为 `.bash_profile`（注意前面有个点）\n            \n* 如果主目录下已经有 `.bash_profile` 文件，则将下载的 `bash_profile` 文件中的内容复制到现有的 `.bash_profile` 文件中\n\n下载课程资源面板中的 zip 文件即可开始。\n\n#### 提示\n对于 **Ubuntu** 用户，你需要把设置信息复制到 `.bashrc` 文件中，而不是 `.bash_profile`",
              "instructor_notes": ""
            },
            {
              "id": 338753,
              "key": "6d1a1dbf-d80b-42c3-a8c9-28023c62685e",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L1 23 配置终端",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "h00n9QLfbqU",
                "china_cdn_id": "h00n9QLfbqU.mp4"
              }
            },
            {
              "id": 338752,
              "key": "ad3d8275-5c17-42e4-9017-e0ac9c8e0a88",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 初次配置 Git\n          \n在开始使用 Git 之前，你需要配置 Git。在命令行工具中运行以下每行，确保所有选项都已被配置好。\n\n```bash\n# 设置你的 Git 用户名\ngit config --global user.name \"<Your-Full-Name>\"\n\n# 设置你的 Git 邮箱\ngit config --global user.email \"<your-email-address>\"\n\n# 确保 Git 输出内容带有颜色标记\ngit config --global color.ui auto\n\n# 对比显示原始状态\ngit config --global merge.conflictstyle diff3\n\ngit config --list\n```\n\n### Git 与代码编辑器\n最后一个配置步骤是让 Git 能与你的代码编辑器结合使用。以下是三个最热门的代码编辑器。如果你使用的是其他编辑器，则在 Google 中搜索“修改 Git 默认编辑器为 X 编辑器”（将 X 替换为你的代码编辑器的名称）。\n\n### Atom Editor 设置\n```bash\ngit config --global core.editor \"atom --wait\"\n```\n\n### Sublime Text 设置\n```bash\ngit config --global core.editor \"'/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl' -n -w\"\n```\n\n### VSCode 设置\n```bash\ngit config --global core.editor \"code --wait\"\n```\n\n如果你有任何问题，请发布到论坛上。",
              "instructor_notes": ""
            },
            {
              "id": 338756,
              "key": "63ec1410-2bf9-4fa9-9bb8-bcd8c24167cb",
              "title": "一切都已设置完毕",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "63ec1410-2bf9-4fa9-9bb8-bcd8c24167cb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "我已经安装 Git",
                "我已经设置了我的 Git 用户名",
                "我已经设置了我的 Git 邮箱",
                "我已经使用我所选的编辑器配置 Git"
              ],
              "positive_feedback": "很棒！",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 339075,
          "key": "8a5af628-7a18-49cf-bbc8-02691762f862",
          "title": "Windows 设置步骤",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8a5af628-7a18-49cf-bbc8-02691762f862",
            "completed_at": "2019-05-07T07:09:28.390Z",
            "last_viewed_at": "2019-05-07T07:09:27.676Z",
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "udacity-terminal-config.zip",
                "uri": "http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58d31ce3_ud123-udacity-terminal-config/ud123-udacity-terminal-config.zip"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 338785,
              "key": "e3c2d9b8-c130-4bf0-90fd-26732bff8d42",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 安装 Git\n\n          \n要下载 Git：\n          \n1. 转到 https://git-scm.com/downloads\n          \n* 下载 Windows 版软件\n          \n* 安装 Git 并选择所有默认选项\n\n         \n 安装完毕后，你应该能够在命令行工具中运行 `git`。如果显示了使用信息，则一切正常！\n\n          \n如果遇到任何问题，请在论坛中告诉我们。",
              "instructor_notes": ""
            },
            {
              "id": 338786,
              "key": "fa3446f7-6961-4703-8736-f55b294c017e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 在 Windows 上配置命令提示符\n        \n我们即将配置命令提示符，以便当我们位于版本控制目录下时，可以显示有用的信息。_这是可选步骤！_重新配置命令提示符并非 Git 运行的必要步骤。你可以在不重新配置命令提示符的情况下完成整个课程。但是，重新配置的话，使用起来更方便。\n\n如果你选择配置命令提示符，那么在你完成后的效果应该是这样的。",
              "instructor_notes": ""
            },
            {
              "id": 338787,
              "key": "23134e2a-ada3-4325-8f0e-90800390fbae",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a768b5_ud123-l1-terminal-config-windows/ud123-l1-terminal-config-windows.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/23134e2a-ada3-4325-8f0e-90800390fbae",
              "caption": "_Windows 上的命令提示符应用。命令提示符已经配置过，可直接显示版本控制信息。_",
              "alt": "",
              "width": 1806,
              "height": 990,
              "instructor_notes": null
            },
            {
              "id": 338788,
              "key": "8b6d8777-a73a-42c2-9be1-d25e9d637fbf",
              "title": "Nd016 WebND Ud123 Gitcourse BETAMOJITO L1 30 配置终端",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "CCYjHfBk9hw",
                "china_cdn_id": "CCYjHfBk9hw.mp4"
              }
            },
            {
              "id": 338789,
              "key": "4e9228e2-b4e9-440a-9a2b-ca8f1fbe69ad",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 初次配置 Git\n          \n在开始使用 Git 之前，你需要配置 Git。在命令行工具中运行以下每行，确保所有选项都已被配置好。\n\n```bash\n# 设置你的 Git 用户名\ngit config --global user.name \"<Your-Full-Name>\"\n\n# 设置你的 Git 邮箱\ngit config --global user.email \"<your-email-address>\"\n\n# 确保 Git 输出内容带有颜色标记\ngit config --global color.ui auto\n\n# 对比显示原始状态\ngit config --global merge.conflictstyle diff3\n\ngit config --list\n```\n\n### Git 与代码编辑器\n          \n最后一个配置步骤是让 Git 能与你的代码编辑器结合使用。以下是三个最热门的代码编辑器。如果你使用的是其他编辑器，则在 Google 中搜索“修改 Git 默认编辑器为 X 编辑器”（将 X 替换为你的代码编辑器的名称）。\n\n### Atom Editor 设置\n```bash\ngit config --global core.editor \"atom --wait\"\n```\n\n### Sublime Text 设置\n```bash\ngit config --global core.editor \"'C:/Program Files/Sublime Text 2/sublime_text.exe' -n -w\"\n```\n\n### VSCode 设置\n```bash\ngit config --global core.editor \"code --wait\"\n```\n\n如果你有任何问题，请发布到论坛上。",
              "instructor_notes": ""
            },
            {
              "id": 338790,
              "key": "9e019761-de2d-4096-b1e8-7f85805c3798",
              "title": "一切都已设置完毕",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "9e019761-de2d-4096-b1e8-7f85805c3798",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "我已经安装 Git",
                "我已经设置了我的 Git 用户名",
                "我已经设置了我的 Git 邮箱",
                "我已经使用我所选的编辑器配置 Git"
              ],
              "positive_feedback": "很棒！",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 339071,
          "key": "ed35219b-8119-4709-bc87-a554892d44fb",
          "title": "总结",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ed35219b-8119-4709-bc87-a554892d44fb",
            "completed_at": "2019-05-07T07:09:42.901Z",
            "last_viewed_at": "2019-05-07T07:09:41.914Z",
            "unstructured": null
          },
          "resources": {
            "files": [
              {
                "name": "Git Terms PDF",
                "uri": "http://video.udacity-data.com.s3.amazonaws.com/topher/2017/March/58d31eb5_ud123-git-keyterms/ud123-git-keyterms.pdf"
              }
            ],
            "google_plus_link": null,
            "career_resource_center_link": null,
            "coaching_appointments_link": null,
            "office_hours_link": null,
            "aws_provisioning_link": null
          },
          "atoms": [
            {
              "id": 338757,
              "key": "777c8126-919f-4e4c-bc25-e78a80ec82af",
              "title": "继续学习",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "### 资源\n\n[优达学城 Git 关键术语](https://udacity.github.io/frontend-nanodegree-styleguide-zh/udacity-git-keyterms.pdf) \n\n<p style=\"font-size: 12px;\">(↓英文原版请点击下方辅助材料↓)</p>",
              "video": {
                "youtube_id": "iXbMaTwfIJI",
                "china_cdn_id": "iXbMaTwfIJI.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}