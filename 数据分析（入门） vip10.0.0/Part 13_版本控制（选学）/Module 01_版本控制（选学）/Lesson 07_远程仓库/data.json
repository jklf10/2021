{
  "data": {
    "lesson": {
      "id": 869739,
      "key": "3e2a82db-df82-4cb7-8396-9ad7375f1953",
      "title": "远程仓库",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "zh-cn",
      "summary": "",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/3e2a82db-df82-4cb7-8396-9ad7375f1953/738096/1544291248855/Working+With+Remotes+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/3e2a82db-df82-4cb7-8396-9ad7375f1953/738096/1544291245332/Working+With+Remotes+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 339313,
          "key": "1ad9f705-8b0e-403e-a903-4a757d8ede17",
          "title": "简介",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1ad9f705-8b0e-403e-a903-4a757d8ede17",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339126,
              "key": "cc1d18ef-86c1-4628-b887-8f9682104289",
              "title": "简介",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "SBUOhyXcR1Q",
                "china_cdn_id": "SBUOhyXcR1Q.mp4"
              }
            },
            {
              "id": 339127,
              "key": "e19d9181-4427-4b72-9eee-50691ad1c9b8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 需要的知识\n\n* 使用 `git init` 和 `git clone` 创建仓库\n* 使用 `git status` 查看仓库\n* 使用 `git log` 和 `git show` 查看以往的 commit \n* 能够使用 `git add` 加入要提交的对象\n* 使用 `git commit` 提交至仓库\n* 你需要了解分支，合并分支，以及解决合并冲突\n* 能够在 Git 中撤销操作:\n    * `git commit --amend` 用于撤消最近的 commit ，或更改 commit 消息的措辞\n    * 以及 `git reset`\n如果你了解所有这些内容，那么你将很适合加入这门课程。\n\n如果你不熟悉版本控制或 Git，可查看[使用 Git 进行版本控制课程](https://classroom.udacity.com/courses/ud123/lessons/1b369991-f1ca-4d6a-ba8f-e8318d76322f/concepts/06b0775b-b703-45ca-9935-939487706728)。",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339314,
          "key": "1a7c8b4d-804b-465b-90cb-94c2fdef8f65",
          "title": "远程仓库",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1a7c8b4d-804b-465b-90cb-94c2fdef8f65",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339128,
              "key": "249489b5-19ee-4755-a96e-423704db0637",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 建立协作\n\n作为一名独立的开发者，你可能喜欢使用**本地**仓库。在此第一节课中，我们将了解**远程仓库**并与这些远程仓库进行交互。\n\n假设你有一个朋友，我们称她为 Farrin，有一天你们聚到了一起，你向她展示了你近期的工作成果。她提出她可以向此项目添加一些功能。但你不想把**自己**的电脑给她，让她来进行这些更改，你希望她使用她自己的电脑。另外，你不想在她添加这些功能的时候只是**等待**，而是继续开发项目，然后在她完成时将她的更改合并进来。我们如何做到这一点呢？\n\n以我的经验，通过来来回回的邮件传达项目的更改，会把后期的维护很快变成一场噩梦。你已经在使用 Git 跟踪项目，那么我们就用它来管理一切事务吧。\n\n所以，Farrin 会在一个特定的分支开发此项目，她会把所做的一些更改添加到该分支上。当她在她的分支上工作的同时，你也会在你自己的特定分支上继续开发此项目。最后，当你获得 Farrin 的分支时，便可以将这两个分支合并在一起。",
              "instructor_notes": ""
            },
            {
              "id": 339129,
              "key": "edd8c7b4-e7c0-4e46-b12f-6ed87af79bb6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": ">  ## 💡 始终使用特性分支\n\n> 记住，在具有描述性命名的**特性分支**上进行所有 commit 非常有用。分支有助于隔离不相关的更改。\n\n> 所以，当你与其他开发者协作时，请确保创建一个新的分支，并使用描述性的名称说明它所包含的更改。",
              "instructor_notes": ""
            },
            {
              "id": 339130,
              "key": "7bec0847-7e2c-4c90-b276-1b41fac21087",
              "title": "L1 - 远程仓库介绍",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "AnSlYftJnwA",
                "china_cdn_id": "AnSlYftJnwA.mp4"
              }
            },
            {
              "id": 339131,
              "key": "a77d0ab8-e98a-4634-93b8-2eb48137de80",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 什么是远程仓库？\n\nGit 是一个**分布式**版本控制系统，这意味着不存在**一个**主信息仓库。每位开发者使用的都是仓库的一个**副本**。因此，你可以拥有仓库的一个副本（它包含发布的 commit 和版本历史记录），并且你的朋友也可以拥有相同仓库的一个副本。每个仓库包含的信息与其他副本完全相同，没有哪一个是主要的。\n\n在此之前，你可能一直使用的都只是**本地**仓库。而**远程**仓库与你的本地 Git 仓库一样，只是它位于其他地方。",
              "instructor_notes": ""
            },
            {
              "id": 339132,
              "key": "17feefb5-7b5a-45ff-8cff-199fc93c6c72",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58ffbb45_ud456-l1-02-local-and-remote-repos/ud456-l1-02-local-and-remote-repos.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/17feefb5-7b5a-45ff-8cff-199fc93c6c72",
              "caption": "_本地仓库是位于你本地计算机上的仓库，而远程仓库位于其他地方（例如朋友的电脑、GitHub 等。）_",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 339133,
              "key": "989e2749-78b5-489c-9364-9a8f7e7994d0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 访问远程仓库的方式\n\n访问远程仓库的方式有多个:\n\n* 使用 URL\n* 使用系统文件的路径\n\n虽然你也可以在自己的文件系统上创建远程仓库，但这种做法极少见。到目前为止，访问远程仓库的最常见方式是通过位于 Web 上的仓库的 URL。\n\n我们与远程仓库交互和控制远程仓库的方式，是使用 Git 远程命令:\n\n```bash\n$ git remote\n```",
              "instructor_notes": ""
            },
            {
              "id": 339134,
              "key": "a2a7536b-8723-4406-907a-bd677f69a9df",
              "title": "L1 - 向远处仓库推送分支",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "414f0ukhOTY",
                "china_cdn_id": "414f0ukhOTY.mp4"
              }
            },
            {
              "id": 339135,
              "key": "88c49327-2290-4af7-8642-ef37f8328165",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "你并不限于使用一个远程仓库。你可以按需要添加尽可能多的远程仓库。",
              "instructor_notes": ""
            },
            {
              "id": 339136,
              "key": "fbbde604-5978-4814-b3ab-872d82dcfa30",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58ffbb5c_ud456-l1-02-multiple-remote-repos/ud456-l1-02-multiple-remote-repos.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/fbbde604-5978-4814-b3ab-872d82dcfa30",
              "caption": "_本地仓库可以连接到多个远程仓库。_",
              "alt": null,
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 339138,
              "key": "f3de33d7-b2f9-44d5-85bd-8851f1acee54",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 为何需要多个远程仓库？\n\n你为何要用多个远程仓库？我们稍后再谈这个，但简单来说，如果你跟多个开发者合作，那么你就需要在他们合并到 master 分支之前，在项目中获取**他们**在各自的分支上所做的更改。如果你想在决定实施自己的更改前，测试一下他们的更改，则需要这么做。\n\n另一个例子是，如果你有一个项目，其代码托管在 Github 上，但是又通过 Git 部署到 Heroku 平台上。你需要一个远端 `master` 用于管理 Github 上的代码，另一个远端 `depolyment` 用于代码部署。",
              "instructor_notes": ""
            },
            {
              "id": 339137,
              "key": "41f4069b-5a0c-42eb-96e6-a92dd4dd466c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 添加远程仓库\n\n现在我们已经了解了远程仓库的用途，我们来将一个远程仓库添加到我们自己的本地仓库。",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339315,
          "key": "27f11e0c-50d8-47d5-bf18-ac2eed717386",
          "title": "添加远程仓库",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "27f11e0c-50d8-47d5-bf18-ac2eed717386",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339139,
              "key": "78cf2d21-993a-4f74-9f94-de605ce56579",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## git remote 命令\n`git remote` 命令可以让你管理远程仓库和与之交互。\n\n```bash\n$ git remote\n```\n\n试着对你尚未与任何人分享过的本地仓库运行此命令。你会得到什么结果？",
              "instructor_notes": ""
            },
            {
              "id": 339140,
              "key": "4375cb37-a9d4-4716-bb89-f38da12ca225",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58f7d354_ud456-l1-git-remote-no-remote/ud456-l1-git-remote-no-remote.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4375cb37-a9d4-4716-bb89-f38da12ca225",
              "caption": "_终端在运行 `git remote` 命令。未显示任何输出，因为该仓库尚未连接到远程仓库。_",
              "alt": null,
              "width": 1972,
              "height": 1066,
              "instructor_notes": null
            },
            {
              "id": 339141,
              "key": "495c02c6-8d6a-49ab-9d4c-bfe551f70856",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "如果你尚未配置远程仓库，那么此名称将不会显示任何内容。需要注意的是在你**克隆**仓库后的情况。如果你克隆了，那么你将自动获得一个远程仓库，因为它是从你所提供的 URL 上的仓库克隆来的。我们来看一个被克隆的仓库。",
              "instructor_notes": ""
            },
            {
              "id": 339142,
              "key": "04bedc2f-ef89-4195-8a90-39974347a9ca",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58f7d44c_ud456-l1-git-remote-shortname/ud456-l1-git-remote-shortname.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/04bedc2f-ef89-4195-8a90-39974347a9ca",
              "caption": "_终端正在运行 `git remote` 命令。它输出了单词 `origin`。_",
              "alt": null,
              "width": 2512,
              "height": 1066,
              "instructor_notes": null
            },
            {
              "id": 339143,
              "key": "addb54ba-37bf-4e68-8cd7-695080c18172",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "我所克隆的项目是 Google 的一个名为 [Lighthouse](https://github.com/GoogleChrome/lighthouse) 的项目。项目克隆自 GitHub，用于提供审查、性能度量和渐进式网页应用最佳实践。",
              "instructor_notes": ""
            },
            {
              "id": 339144,
              "key": "2136905a-3b18-4677-8889-417cce5d724d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 远程仓库的简写名（Shortname）\n\n `git remote` 的输出只是一个单词 `origin`。这挺奇怪的。这里的 \"origin\" 一词称为\"简写名\"。简写名只是远程仓库所在位置的简略表示。简写名仅局部用于**当前**仓库（如在你的**本地**仓库中）。\"origin\" 一词是指代主远程仓库的专用名称。你也可以将它重命名为别的东西，但通常会被命名为 \"origin\"。\n\n我们为何关心引用远程仓库路径的简便性？这是因为，你很快会发现我们将在很多命令中，用到远程仓库的路径。而这时，只使用一个名称就比使用远程仓库的完整路径简单多了。\n\n举个例子，下列哪段描述更好理解：\n* 向北行驶大约四分之一英里，然后左转，沿那条路直行约 5 英里，然后右转，直行约 300 英尺，走过蓝色邮箱后，左转至杰克街，前进 50 英尺后再次左转至欧文路，这条路弯弯曲曲，但你最终会到达芬兰巷，然后左手边第三个建筑就是\n\n* 外婆家\n\n。可以看出，直接用简写名“外婆家”比写出从当前位置到那里的整个路线要简单得多。😉\n\n如果你想查看远程仓库的完整路径，只需使用 `-v` 选项即可：",
              "instructor_notes": ""
            },
            {
              "id": 339145,
              "key": "3b38f15b-6305-4fd6-8cf7-c5fc3b06d14e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58f7d42a_ud456-l1-git-remote-from-clone/ud456-l1-git-remote-from-clone.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3b38f15b-6305-4fd6-8cf7-c5fc3b06d14e",
              "caption": "\n_终端在运行 `git remote` 命令。输出包含简写名及其所指的完整 URL。_\n",
              "alt": null,
              "width": 2512,
              "height": 1066,
              "instructor_notes": null
            },
            {
              "id": 339146,
              "key": "e07e4e2e-55de-41b7-bfd1-d57557676be9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "在这里你可以看到，当使用 `origin` 一词时，实际上使用的是路径 `https://github.com/GoogleChrome/lighthouse.git`。这看起来可能有点奇怪：现在有**两个**远程仓库，都是 \"origin\" 且链接到相同的 URL。唯一的区别在结尾处：\n`(fetch)` 部分和 `(push)` 部分\n\n我们将在后面的部分详细说明 `fetch` 和 `push`。\n\n我们现在讲得差不多了。下面我们就来进行一些实际操作，创建一个简单的项目并将其推送到远程仓库！ ",
              "instructor_notes": ""
            },
            {
              "id": 339147,
              "key": "12614ca3-c939-49ca-986d-cb055724423a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 创建一个简单的项目\n在此课程中，我们需要一个使用示例项目以测试远程仓库的使用，向远程仓库推送更新，以及从远程仓库获取更改等操作。",
              "instructor_notes": ""
            },
            {
              "id": 339148,
              "key": "68ea1516-bf8c-49cd-a6b9-33a22b4facd1",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "68ea1516-bf8c-49cd-a6b9-33a22b4facd1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "如果你没有想要使用的项目，则可以跟着我操作！",
                "answers": [
                  {
                    "id": "a1492638392333",
                    "text": "为你的项目创建一个名为 `my-travel-plans` 的新目录",
                    "is_correct": true
                  },
                  {
                    "id": "a1492638431615",
                    "text": "使用 `git init` 将 `my-travel-plans` 目录转换成一个 Git 仓库",
                    "is_correct": true
                  },
                  {
                    "id": "a1492638437655",
                    "text": "创建一个 `README.md` 文件",
                    "is_correct": true
                  },
                  {
                    "id": "a1492638447432",
                    "text": "创建 `index.html`",
                    "is_correct": true
                  },
                  {
                    "id": "a1492638452460",
                    "text": "创建 `app.css`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 339149,
              "key": "ff72b822-5617-4e5a-bf27-7630bcff41e7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### README 文件内容\n\n```text\n# Travel Destinations\n\n这是一个简单的应用，用来跟踪我想去旅行的目的地。\n```",
              "instructor_notes": ""
            },
            {
              "id": 339150,
              "key": "81d74c62-54e7-4cb8-8198-9b4d83410b5b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### HTML 文件内容\n\n将以下内容添加到 index.html 文件:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>Travels</title>\n    <meta name=\"description\" content=\"\">\n    <link rel=\"stylesheet\" href=\"css/app.css\">\n</head>\n<body>\n\n    <div class=\"container\">\n        <div class=\"destination-container\">\n            <div class=\"destination\" id=\"florida\">\n                <h2>Florida</h2>\n            </div>\n\n            <div class=\"destination\" id=\"paris\">\n                <h2>Paris</h2>\n            </div>\n        </div>\n    </div>\n\n</body>\n</html>\n```",
              "instructor_notes": ""
            },
            {
              "id": 339151,
              "key": "4f44df16-7445-46cd-af85-000677595d15",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### CSS 文件内容\n将以下信息添加到 CSS 文件：\n\n```css\nhtml {\n    box-sizing: border-box;\n    height: 100%;\n}\n\n*,\n*::before,\n*::after {\n    box-sizing: inherit;\n}\n\nbody {\n    display: flex;\n    margin: 0;\n    height: 100%;\n}\n\n.container {\n    margin: auto;\n    padding: 1em;\n    width: 80%;\n}\n\n.destination-container {\n    display: flex;\n    flex-flow: wrap;\n    justify-content: center;\n}\n\n.destination {\n    background: #03a9f4;\n    box-shadow: 0 1px 9px 0 rgba(0, 0, 0, 0.4);\n    color: white;\n    margin: 0.5em;\n    min-height: 200px;\n    flex: 0 1 200px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n}\n\nh2 {\n    margin: 0;\n    transform: rotate(-45deg);\n    text-shadow: 0 0 5px #01579b;\n}\n\n#florida {\n    background-color: #03a9f4;\n}\n\n#paris {\n    background-color: #d32f2f;\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 339152,
              "key": "fa581d50-ecb9-49b4-b40c-730add0ebb52",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "目前，我的项目看起来是这样的，但记住你可以按照自己的意愿创建项目，只需要确保项目中有一些 commit 即可。",
              "instructor_notes": ""
            },
            {
              "id": 339153,
              "key": "e42e2b37-82fd-48e7-8d27-be453634be60",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58f7dce2_ud456-l1-my-travel-plans-project/ud456-l1-my-travel-plans-project.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e42e2b37-82fd-48e7-8d27-be453634be60",
              "caption": "_Chrome 浏览器中打开了显示我想去旅行的目的地（弗罗里达和巴黎）的简单网页应用。_",
              "alt": null,
              "width": 1920,
              "height": 1444,
              "instructor_notes": null
            },
            {
              "id": 339154,
              "key": "4f0b37b3-975e-4cb0-b398-823bb8c1e3fa",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4f0b37b3-975e-4cb0-b398-823bb8c1e3fa",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "让我们先确保你已经完成设置并准备继续。请勾掉下面这些中已完成的项：",
                "answers": [
                  {
                    "id": "a1492638982361",
                    "text": "我为我的项目创建了一个名为 `my-travel-plans` 的新目录",
                    "is_correct": true
                  },
                  {
                    "id": "a1492639054167",
                    "text": "我将项目转变成了 Git 仓库",
                    "is_correct": true
                  },
                  {
                    "id": "a1492639084428",
                    "text": "我至少将一个文件添加到了项目",
                    "is_correct": true
                  },
                  {
                    "id": "a1492639094139",
                    "text": "我使用 git commit 提交了文件（例如 `Initial commit`)",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 339155,
              "key": "53fc1c1e-3e8d-4d7e-b0bf-323071a1a0fc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 在 GitHub 上托管\n\n托管 Git 项目的方式有多种。但最受欢迎的托管网站被称为 [GitHub](https://github.com/)，你可能以前听说过。现在 GitHub 的问题是，这个名字与 Git 非常相似，有时候人们会将 Git 和 GitHub 混淆，认为它们是完全一样的，而事实上它们大相径庭。\n\n* Git 是一个版本控制工具\n* GitHub 是一个托管 Git 项目的服务\n\n如果你已熟悉 GitHub，知道如何在**不**初始化 README 的情况下创建一个仓库，你可以跳过此视频，并使用与示例项目相同的名称创建仓库，记住不要初始化 readme 文件。\n\n如果你还没有帐户，请在 [GitHub 的加入页面](https://github.com/) 注册一个帐户。可以注册的 GitHub 帐户类型有很多，但我们在此课程中需要的是免费的类型。反正大多数人使用的都是免费帐户。创建好帐户后，登录 GitHub，你将位于主页：",
              "instructor_notes": ""
            },
            {
              "id": 339156,
              "key": "a21d47ae-038b-4849-89d0-64ef5816b2df",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58f7df39_ud456-l1-github-homepage/ud456-l1-github-homepage.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a21d47ae-038b-4849-89d0-64ef5816b2df",
              "caption": "_这是我登录后在我的帐户显示的页面。根据你拥有的仓库的数量以及你关注的其他用户和仓库，你的信息将会有所不同。_",
              "alt": null,
              "width": 2660,
              "height": 1742,
              "instructor_notes": null
            },
            {
              "id": 339157,
              "key": "38e49bcc-5178-4712-b1db-10881aef7bdc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "与其他网站一样，GitHub 经常更新其界面，所以如果你看到的内容与上面显示的不同，不用担心，其中的重要功能还是一样的。",
              "instructor_notes": ""
            },
            {
              "id": 339158,
              "key": "1d55c1e7-e10a-43c7-bf58-a8d49d73cb3f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "现在我们要学习的重点是如何创建新的仓库。实际上，从主页创建仓库的方式有两种：\n\n1. 从导航栏创建\n* 页面右侧最下面的绿色\"New repository\"（新建仓库）按钮",
              "instructor_notes": ""
            },
            {
              "id": 339159,
              "key": "ceb7306e-79cb-4b89-84dc-bb9a5f7e25d1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58f7e399_ud456-l1-github-homepage-new-repo-button/ud456-l1-github-homepage-new-repo-button.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ceb7306e-79cb-4b89-84dc-bb9a5f7e25d1",
              "caption": "_GitHub 有两个可以创建新仓库的位置。位于页面标题中的加号图标和页面中间的\"New repository\"按钮。_",
              "alt": null,
              "width": 2660,
              "height": 1742,
              "instructor_notes": null
            },
            {
              "id": 339160,
              "key": "22b84e4f-94b8-4fc9-916b-594b675328f8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "我使用的是导航栏中的按钮，因为导航栏在每个页面上都可用，它使我们可以轻松创建新仓库链接。",
              "instructor_notes": ""
            },
            {
              "id": 339161,
              "key": "8aea6078-0d4a-407d-8d02-b811f599b752",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58f7e42a_ud456-l1-nav-bar-new-repo-link/ud456-l1-nav-bar-new-repo-link.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8aea6078-0d4a-407d-8d02-b811f599b752",
              "caption": "_点击 GitHub 标题中的加号图标会显示一个选项下拉列表，其中一个选项是\"New repository\"链接。_",
              "alt": null,
              "width": 908,
              "height": 484,
              "instructor_notes": null
            },
            {
              "id": 339162,
              "key": "4854707b-1315-4bf1-a29d-b3d9ca6005f3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "下拉列表中的 `New repository` 链接会将你转至仓库创建页面。我们只需填写此表中的一个字段 - Repository name（仓库名称）字段。",
              "instructor_notes": ""
            },
            {
              "id": 339163,
              "key": "01810fef-7294-473c-a732-5ad201ffa846",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58f7e4b3_ud456-l1-github-create-repo-page/ud456-l1-github-create-repo-page.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/01810fef-7294-473c-a732-5ad201ffa846",
              "caption": "_GitHub 的创建新仓库页面。唯一必填的字段为 `Repository name` 字段。_",
              "alt": null,
              "width": 2346,
              "height": 1854,
              "instructor_notes": null
            },
            {
              "id": 339164,
              "key": "07c451d6-4a89-4970-8dcb-2c7db833d886",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "通常情况下，你可以使用项目名称作为仓库的名称。创建、修改或删除仓库都非常容易，所以不必执着于在此页上赋予它一个完美的名称。我将创建一个名为 \"my-travel-plans\" 的仓库，与我创建的示例项目名称一样。\n\n你可以暂时将描述留白（如果你想，也可以添加描述）。由于我现在使用的是免费计划，我的仓库必须是 public（公开的，这意味着任何人都可以免费查看我的仓库和所有代码）。如果我想让它成为一个私有仓库，则要选择\"Private\"（私有），这时 GitHub 会向我索要信用卡信息，并将我升级至付费计划。\n\n我还要**取消勾选**\"Initialize this repository with the README\"（使用 README 初始化此仓库）选项，因为我不希望 GitHub 为我添加一个 README 文件。",
              "instructor_notes": ""
            },
            {
              "id": 339165,
              "key": "852a550b-9db8-4c4d-9a0e-bcceef533366",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### ⚠️ 不使用 README 初始化 ⚠️\n确保你**未勾选**\"Initialize this repository with the README\"选项。我们将提供自己的 README，所以不需要 GitHub 自动提供。\n\n另外，如果我们让 GitHub 自动为我们生成新的 README 文件，它将不会给我们提供要在终端运行的相关配置命令。我们仍然有办法获得该信息，但它会被默认隐藏。\n\n所以只需确保未勾选该字段，就没问题了！\n",
              "instructor_notes": ""
            },
            {
              "id": 339166,
              "key": "be16c111-ff7e-4db6-9e19-b3f93472270d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "现在，点击那个显眼的\"Create repository\"（创建仓库）按钮，以创建你的远程仓库！",
              "instructor_notes": ""
            },
            {
              "id": 339167,
              "key": "ba3ff4b1-6144-422e-92b7-121034171cad",
              "title": "L1 - GitHub 上的新建仓库命令",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "myuGLZLYpYY",
                "china_cdn_id": "myuGLZLYpYY.mp4"
              }
            },
            {
              "id": 339174,
              "key": "862d50f5-9004-4673-826c-3e3d9aede69e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "记住 `git remote` 命令用于创建和管理远程仓库。所以我将使用一个命令，在我的本地仓库与 GitHub 帐户上刚创建的远程仓库之间创建连接。\n\n```bash\n$ git remote add origin https://github.com/richardkalehoff/RichardsFantasticProject.git\n```",
              "instructor_notes": ""
            },
            {
              "id": 339168,
              "key": "26f19eac-1a8f-4f03-b756-6184a0ab671a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## ⚠️ 远程仓库与权限 ⚠️ \n\n警告：你需要使用**你**刚在**自己的** GitHub 帐户中创建的新仓库的 URL。请**不要**使用上面的那个，因此它是我在**自己的**账户上创建的项目。并且由于此项目在**我的**帐户上，会导致**你**无法访问并推送更改。\n\n所以确保使用你的项目中的 URL。",
              "instructor_notes": ""
            },
            {
              "id": 339169,
              "key": "351146c5-afdb-4d73-a028-cfc0993c7b61",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Kagure、Jack、Owen 和 Finn 这些朋友们都有自己的 `my-travel-plans` 项目，它们位于：\n\n\n* https://github.com/kagure/my-travel-plans.git\n* https://github.com/jack/my-travel-plans.git\n* https://github.com/owen/my-travel-plans.git\n* https://github.com/finn/my-travel-plans.git\n\n (注：上述列表中的链接都是虚拟链接，实际不存在)",
              "instructor_notes": ""
            },
            {
              "id": 339170,
              "key": "a06b102d-6e9f-4265-b8d3-1cc7a951e86d",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a06b102d-6e9f-4265-b8d3-1cc7a951e86d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "下面的命令中克隆了谁的仓库？\n\n```bash\n$ git clone https://github.com/owen/my-travel-plans.git\n```",
                "answers": [
                  {
                    "id": "a1492644108682",
                    "text": "Kagure 的",
                    "is_correct": false
                  },
                  {
                    "id": "a1492644126645",
                    "text": "Jack 的",
                    "is_correct": false
                  },
                  {
                    "id": "a1492644127187",
                    "text": "Owen 的",
                    "is_correct": true
                  },
                  {
                    "id": "a1492644127951",
                    "text": "Finn 的",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 339171,
              "key": "1fe260e4-4d36-45e4-aa7c-b2623f256165",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1fe260e4-4d36-45e4-aa7c-b2623f256165",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Jonathan 和 Allison 在一起开展项目。Jonathan 在 GitHub 上创建了一个项目，URL 为 `https://github.com/docsrus/brain-mapping.git`。\n\n如果 Allison 运行 `git clone https://github.com/docsrus/brain-mapping.git`，她有权限对 Jonathan 在 GitHub 上的项目做出更改吗？",
                "answers": [
                  {
                    "id": "a1492643594333",
                    "text": "是",
                    "is_correct": false
                  },
                  {
                    "id": "a1492643598300",
                    "text": "否",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 339172,
              "key": "db1302dd-930b-4c93-92c2-47b173e34948",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "对于你刚在命令行中运行的命令，有几点需要注意：\n1. 首先，这条命令包含一个子命令 `add`\n* 这里使用了 `origin` 一词，设置了我们之前所说的简写名\n    - 记住， `origin` 一词并没什么特殊性。\n    - 如果你想将它改为 `repo-on-GitHub`，那么只需（在运行命令之前）将 \"origin\" 改为 \"repo-on-GitHub\"：\n\n    `$ git remote add repo-on-GitHub https://github.com/richardkalehoff/RichardsFantasticProject.git`\n* 第三，添加了仓库的完整路径（即 Web 上的远程仓库 URL）\n\n现在，我要使用 `git remote -v` 来验证我已经正确添加了远程仓库：",
              "instructor_notes": ""
            },
            {
              "id": 339178,
              "key": "096bdfea-b444-492e-9d0b-c13884fd0098",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58fe4670_ud456-l1-git-remote-add-terminal/ud456-l1-git-remote-add-terminal.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/096bdfea-b444-492e-9d0b-c13884fd0098",
              "caption": "_`git remote add` 用于创建一个 `origin` 简写名，指向 GitHub 上的项目。运行 `git remote -v` 会显示简写名和 URL。_",
              "alt": null,
              "width": 2900,
              "height": 1266,
              "instructor_notes": null
            },
            {
              "id": 339173,
              "key": "08a89f38-e38c-4851-abdf-bf2c6ea2d97c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "棒极了！一切都很不错。我使用 `git remote add` 命令添加了一个远程仓库的链接，然后我用 `git remote -v` 检验是否一切正常。",
              "instructor_notes": ""
            },
            {
              "id": 339175,
              "key": "b5a4f6a0-bb17-4e27-8195-d7a8a1f496a0",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b5a4f6a0-bb17-4e27-8195-d7a8a1f496a0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "为了确保我们的步调一致，请确认你完成了以下所有操作：",
                "answers": [
                  {
                    "id": "a1492642338989",
                    "text": "我在 GitHub 上创建了我的远程仓库",
                    "is_correct": true
                  },
                  {
                    "id": "a1492642376776",
                    "text": "我使用 `git remote add` 在我的本地仓库与远程仓库之间建立了连接",
                    "is_correct": true
                  },
                  {
                    "id": "a1492642377462",
                    "text": "我使用 `git remote -v` 验证了简写名是否对应正确的 URL",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 339176,
              "key": "3fcd4c32-9eaf-4d59-95d2-df957ed9ae6c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 小结\n\n远程仓库与你使用的本地仓库一样，只是存储在不同的位置。要管理远程仓库，可使用 `git remote` 命令：\n\n```bash\n$ git remote\n```\n\n* 你可以连接到多个不同的远程仓库。\n* 简写名是用于指代远程仓库位置的名称。通常该位置为 URL，但也可能是同一台计算机上的文件路径。\n* `git remote add` 用于添加到新的远程仓库的连接。\n* `git remote -v` 用于查看远程仓库与连接之间的详细信息。\n\n### 进一步研究\n* [使用远程仓库](https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes#_showing_your_remotes)：来自 Gitbook (**英**)\n* [`git remote` 命令](https://git-scm.com/docs/git-remote)：来自 Git 文档 (**英**)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339316,
          "key": "b7334b54-ec80-4754-95cd-345b78f526ae",
          "title": "将更改推送到远程仓库",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b7334b54-ec80-4754-95cd-345b78f526ae",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339177,
              "key": "98f232cb-2a45-4b35-8c18-56060a67b1ab",
              "title": "L1 - Git Push 理论",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "21TvMEtMRys",
                "china_cdn_id": "21TvMEtMRys.mp4"
              }
            },
            {
              "id": 339180,
              "key": "2038390c-f73d-4a10-90d5-2c73a77cdab0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 查看 commit \n\n让我们来看看我的仓库中的 commit 。",
              "instructor_notes": ""
            },
            {
              "id": 339179,
              "key": "0038929e-bb61-4cf3-981b-eedec56d7aa6",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58fe47d8_ud456-l1-project-commits/ud456-l1-project-commits.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0038929e-bb61-4cf3-981b-eedec56d7aa6",
              "caption": "_终端正在显示项目 commit 的日志。_",
              "alt": null,
              "width": 1940,
              "height": 870,
              "instructor_notes": null
            },
            {
              "id": 339182,
              "key": "f2f047a7-29e4-49b7-bc9c-8c2f98c6ef90",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "我使用了以下 log 命令来显示这些 commit \n\n```bash\n$ git log --oneline --graph --decorate --all\n```\n\n不过这些 commit 仅位于本地仓库，还未推送到远程仓库。当 commit 推送到远程仓库后，日志中将出现远程分支指示符。由于日志中当前没有远程分支指示符，我们便可以说远程仓库中没有 commit 。但是为了百分百确定，我们来看看 GitHub 上的远程仓库，看看是否存在一些 commit 。",
              "instructor_notes": ""
            },
            {
              "id": 339181,
              "key": "9b4e71d4-b3f6-4eb1-a750-41a8e73de753",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58fe48af_ud456-l1-project-github-no-commits/ud456-l1-project-github-no-commits.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9b4e71d4-b3f6-4eb1-a750-41a8e73de753",
              "caption": "_远程仓库不包含任何 commit ，所以 GitHub 显示出仓库的设置页面。_",
              "alt": null,
              "width": 2436,
              "height": 1726,
              "instructor_notes": null
            },
            {
              "id": 339183,
              "key": "4bfc06d8-3797-46da-972b-1b2e059e0a9c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "由于我们还未向 GitHub 推送任何 commit 更新，它仍然在向我们显示设置屏幕，告诉我们如何将本地仓库连接到远程仓库并推送一些 commit 。由于我们看到的仍然是设置屏幕，因此可以知道远程仓库中没有 commit 。",
              "instructor_notes": ""
            },
            {
              "id": 339184,
              "key": "fad0f2c1-748a-419b-8bae-b59f659ae7a6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 推送 commits\n要将本地 commits 推送到远程仓库，你需要使用 `git push` 命令。你要提供远程仓库简写名以及用于容纳你的 commit 的分支名：\n\n```bash\n$ git push <remote-shortname> <branch>\n```\n\n我的远程仓库的简写名为 `origin`，并且我想推送的 commit 位于`master`分支上。那么，我要使用以下命令将我的 commit 推送到 GitHub 上的远程仓库：\n\n```bash\n$ git push origin master\n```",
              "instructor_notes": ""
            },
            {
              "id": 339185,
              "key": "fec03045-74b1-439e-89b2-ad9656616136",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58fe49db_ud456-l1-project-push-commits/ud456-l1-project-push-commits.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/fec03045-74b1-439e-89b2-ad9656616136",
              "caption": "_终端现在正在显示 `git push` 命令。它向我索取用户名、密码（不显示出来），然后显示关于它如何推送 commit 的信息。_",
              "alt": null,
              "width": 2292,
              "height": 1332,
              "instructor_notes": null
            },
            {
              "id": 339188,
              "key": "ebfaf91b-c774-4989-9f9a-d275106442d4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "有几点需要注意：\n* 你可能需要输入用户名和密码，这取决于你如何配置 GitHub 的以及使用的远程 URL 。\n    - 如果你使用的是 HTTP 版本（而不是 `ssh` 版本）的远程仓库，就需要提供用户名和密码。\n    - 如果你配置 GitHub 使用 SSH 协议，并提供过 SSH 密匙，就不需要执行上一步。如果你对使用 SSH 连接 GitHub 感兴趣，请参阅[使用 SSH 连接 GitHub 文档](https://help.github.com/articles/connecting-to-github-with-ssh/)。\n* 如果你要输入用户名和密码，用户名会在输入后显示出来，但密码不会显示。只需继续输入密码，完成后按 Enter 键即可。\n    - 如果你的密码出错，不用担心，它会让你重新输入\n* Git 会压缩文件使之变小，然后将其推送至远程仓库\n* 这里创建了一个新分支，在页面底部可看到`[new branch]`，后面是 `master  -> master`\n\n现在我们来看 GitHub:",
              "instructor_notes": ""
            },
            {
              "id": 339186,
              "key": "4b6737b3-5a85-4658-bdff-35b78a7b8a26",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58fe5790_ud456-l1-project-on-github/ud456-l1-project-on-github.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4b6737b3-5a85-4658-bdff-35b78a7b8a26",
              "caption": "_我的整个项目都位于 GitHub 上！_",
              "alt": null,
              "width": 1174,
              "height": 1053,
              "instructor_notes": null
            },
            {
              "id": 339187,
              "key": "890e4502-57ee-4538-8de5-275caa12f6b4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "我们的项目位于 GitHub 上 - 这太酷了，也让我们的工作变得很轻松！GitHub 有一个很棒的功能，即它会自动显示 README 文件的内容，这非常有用。\n\nGitHub 还会显示很多关于我们仓库的详细信息。现在它显示仓库中有：\n* 三个 commit \n* 一个分支 \n* 一名贡献者\n",
              "instructor_notes": ""
            },
            {
              "id": 339191,
              "key": "96d7758e-844c-459c-baa1-fb290b9adc4c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58fe585d_ud456-l1-project-on-github-focus/ud456-l1-project-on-github-focus.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/96d7758e-844c-459c-baa1-fb290b9adc4c",
              "caption": "_ GitHub 上的项目主页显示关于仓库的信息。_",
              "alt": null,
              "width": 1174,
              "height": 1053,
              "instructor_notes": null
            },
            {
              "id": 339189,
              "key": "a2f6fe92-d267-471b-a9f1-768abf533b9f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "在继续之前，我们来检查一下本地仓库，看看在推送更改后它有何变化。\n\n运行以下命令：\n\n```bash\n$ git log --oneline --graph --decorate --all\n```\n\n_注意：确认已包含 `--decorate` 和 `--all` 选项。_",
              "instructor_notes": ""
            },
            {
              "id": 339192,
              "key": "18c531d1-33a1-4ad4-82b1-23c156f74dac",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58fe591c_ud456-l1-04-commit-count-local/ud456-l1-04-commit-count-local.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/18c531d1-33a1-4ad4-82b1-23c156f74dac",
              "caption": "_终端显示运行 `git log --oneline --graph --decorate --all` 后的结果。现在出现了 `origin/master` 跟踪分支。_",
              "alt": null,
              "width": 2226,
              "height": 870,
              "instructor_notes": null
            },
            {
              "id": 339193,
              "key": "7c1aca25-91d1-407a-8705-6bcd555e3830",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "现在我们输出中有一个标记 (marker)！该标记为 `origin/master`，并被称为**跟踪分支**。跟踪分支的名称包含远程仓库的简写名及分支名称。所以跟踪分支 `origin/master` 告诉我们远程仓库 `origin` 有一个 `master` 分支，指向 commit  `9b7d28f`（并包含 `9b7d28f` 前的所有 commit ）。这非常有用，因为这意味着我们可以在本地仓库跟踪远程仓库的信息！\n\n需要**注意的一点**是，这个 `origin/master` 跟踪分支并不能实时表现被跟踪分支在远程仓库上的位置。如果我们之外的其他人对远程仓库做了更改，我们本地仓库中的 `origin/master` 跟踪分支不会移动。我们必须告诉它检查更新，**它才会**移动。我们将在下一部分介绍如何操作。",
              "instructor_notes": ""
            },
            {
              "id": 339194,
              "key": "52901036-ad22-493b-816a-02a49a8f71dd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 小结\n\n`git push` 命令用于从本地仓库向远程仓库推送 commit 。\n\n```bash\n$ git push origin master\n```\n\n`git push` 命令需要：\n\n* 你想向其推送 commit 的远程仓库的简写名\n* 包含你想推送的 commit 的分支",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339312,
          "key": "22364196-91e4-4da4-837b-0e71a8143350",
          "title": "从远程仓库拉取修改",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "22364196-91e4-4da4-837b-0e71a8143350",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339112,
              "key": "23163032-d028-43b0-abbc-08eb04789544",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 从远程仓库拉取修改\n\n假如说我们处于这样一种情况：**远程**仓库上存在一些 commit ，但我们的**本地**仓库上没有这些 commit 。这种情况的原因有多个：你参与了团队协作，有一名同事将新更改推送到了远程仓库。或者，你在不同的电脑上开展同一个项目 -- 例如，你有一个办公电脑和一个私人电脑，你在两个电脑上都向仓库做了贡献。如果你从办公电脑上向远程仓库推送更改，则个人电脑上的本地仓库就不会反映这些更改。我们如何将远程仓库上的更改同步到本地仓库呢？这正是我们接下来要看的。我们先来看看拉取远程仓库修改的方式，然后我们将实际操作！",
              "instructor_notes": ""
            },
            {
              "id": 339113,
              "key": "af1856a4-9a9c-4d37-b7df-438fd2c6ba2c",
              "title": "L1 - Git 拉取理论",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "MjNU2LTDVAA",
                "china_cdn_id": "MjNU2LTDVAA.mp4"
              }
            },
            {
              "id": 339114,
              "key": "8c5dccfe-5570-4cc9-838b-10fd24e264a1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "虽然我已经说过了，但我要再强调一次。**本地**仓库中出现的分支实际上在跟踪**远程**仓库中的一个分支（例如，本地仓库中的 `origin/master` 称为**跟踪分支**，因为它在跟踪远程仓库上简写名为 \"origin\" 的 `master` 分支）。",
              "instructor_notes": ""
            },
            {
              "id": 339115,
              "key": "a87789f9-430c-4277-8d23-95a85075629b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 添加远程更改\n\n由于我们的远程仓库中没有任何 commit ，且我们未与任何人协作，我们模拟协作环境。并通过 GitHub 的 Web 界面手动添加一些 commit 。\n\n下面是一个演练视频。使用下面的代码片段跟着视频一起操作。\n\n### 新的 CSS 内容\n\n添加以下新规则集：\n\n```css\n.destination:hover h2 {\n    transform: rotate(0deg);\n}\n```\n\n将 `transition: transform 0.5s;` 添加到 `h2` 规则集，现在它应该是：\n\n```css\nh2 {\n    margin: 0;\n    transform: rotate(-45deg);\n    transition: transform 0.5s;\n    text-shadow: 0 0 5px #01579b;\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 339116,
              "key": "a351f4ce-f2ce-4b35-a8a8-d0a5219a0ea0",
              "title": "L1 - 在 GitHub 上添加 commit",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "UBYxcTg6VLU",
                "china_cdn_id": "UBYxcTg6VLU.mp4"
              }
            },
            {
              "id": 339117,
              "key": "0ca81174-d0ba-457e-ae2d-cbe1d9b5aa36",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## ⚠️ 首选在本地工作 ⚠️ \n\n> 由于 GitHub 有一个 Web 界面，它允许你通过其界面手动添加 commit 。虽然你**可以**这么做，并不代表你**应该**这么做。我演示了用这种方式进行更改，是为了模拟远程仓库上的 commit ，而不是本地仓库上的 commit 。但是我建议你应该始终在本地开展项目工作，然后将更改推送到远程仓库。",
              "instructor_notes": ""
            },
            {
              "id": 339118,
              "key": "a3ee791c-6bac-4964-9494-9e0645dfb173",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 取回远程 commit \n\n现在我们比较本地仓库与远程仓库。我们的本地仓库中只有**三个** commit :",
              "instructor_notes": ""
            },
            {
              "id": 339119,
              "key": "8438cbdc-49fa-43b6-8ccf-430c6b537cee",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58fe591c_ud456-l1-04-commit-count-local/ud456-l1-04-commit-count-local.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8438cbdc-49fa-43b6-8ccf-430c6b537cee",
              "caption": "_我们的本地仓库中只有三个 commit。_",
              "alt": null,
              "width": 2226,
              "height": 870,
              "instructor_notes": null
            },
            {
              "id": 339120,
              "key": "7522865d-3a62-4223-8a74-2264ee1f5e55",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "但远程仓库中实际有**四个** commit：",
              "instructor_notes": ""
            },
            {
              "id": 339121,
              "key": "712c2845-d486-43df-ba06-6851c50146a5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58fe65d8_ud456-l1-04-commit-count-remote/ud456-l1-04-commit-count-remote.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/712c2845-d486-43df-ba06-6851c50146a5",
              "caption": "_GitHub 上的远程仓库中有四个 commit 。其中三个来自我们的本地仓库，一个是我们在 GitHub 上手动添加的。_",
              "alt": null,
              "width": 2386,
              "height": 1740,
              "instructor_notes": null
            },
            {
              "id": 339122,
              "key": "c8fe5d73-7dc7-4de5-aede-ad98bba73ccd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 使用 `git pull` 拉取更改\n\n本地 commit 在 `5a010d1` 处结束，而远程仓库有额外两个 commit  -  commit  `4b81b2a` 和 ` b847434`。\n\n另外，注意在我们的**本地**仓库中，当我们使用 `git log` 命令时，`origin/master` 分支仍然指向 commit `5a010d1`。\n\n记住，`origin/master` 分支不实时映射远程仓库 master 分支所在的位置。如果远程仓库的 `master` 分支移动，本地 `origin/master` 分支仍会待在原地。要更新此分支，我们需要同步两个仓库。\n\n`git push` 会同步**远程**仓库与**本地**仓库。要执行相反操作（将**本地仓库**与**远程仓库**同步），我们需要使用 `git pull`。`git pull` 的格式与 `git push` 的非常相似 - 提供远程仓库的简写名，以及你要拉取 commit 的分支名称。\n\n```bash\n$ git pull origin master\n```",
              "instructor_notes": ""
            },
            {
              "id": 339123,
              "key": "0b3fc747-6602-4b7e-a681-51a7d9da1430",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58fe665e_ud456-l1-04-git-pull/ud456-l1-04-git-pull.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0b3fc747-6602-4b7e-a681-51a7d9da1430",
              "caption": "_运行 `git pull origin master` 会检索 `origin` 远程仓库 `master` 分支中的 commit 。_",
              "alt": null,
              "width": 2226,
              "height": 1464,
              "instructor_notes": null
            },
            {
              "id": 339124,
              "key": "8831abeb-6d2c-4d05-9fcb-935be21dab53",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "运行此代码时需要注意几点：\n\n* 格式与 `git push` 非常相似 - 要对项目计数、压缩和打包\n* 它有一个短语 \"fast-forward\"，这意味着 Git 进行了快进合并（我们一会儿深入研究）\n * 它显示类似于 `git log --stat` 的信息，其中显示更改的文件以及添加或删除了多少行\n\n如果你不想自动将本地分支与跟踪分支合并，则不应使用 `git pull`，而是使用另一个命令 `git fetch`。当远程仓库包含你没有的 commit ，**但**本地仓库也包含远程仓库所没有的 commit 时，你可能想这么做。\n\n我们来看看 `git fetch`。",
              "instructor_notes": ""
            },
            {
              "id": 339125,
              "key": "bf6f5a77-4d08-4819-bffb-81382a74a705",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 小结\n\n如果你想在本地仓库中包含远程仓库中的更改，那么你要_拉取_这些更改。要使用 Git 这样做，你需要使用 `git pull` 命令。你告诉 Git 你想获取修改的远程仓库的简写名以及包含你需要的更改的分支：\n\n```bash\n$ git pull origin master\n```\n\n在运行 `git pull` 时，会发生以下活动：\n* 远程分支上的 commit 会被复制到本地仓库\n* 本地跟踪分支（`origin/master`）移到指向最新的 commit \n* 本地跟踪分支（`origin/master`）合并到本地分支（`master`）\n\n另外，可以在 GitHub 上手动添加更改（但不建议这样做，所以别这样做）。",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339317,
          "key": "daa45fbf-fccd-4648-b368-14e7a3de8bd1",
          "title": "Pull 与 Fetch",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "daa45fbf-fccd-4648-b368-14e7a3de8bd1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339190,
              "key": "e2d09bc4-9d91-4ee9-9034-f9ef474267ee",
              "title": "Pull 与 Fetch",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "kxXdk2HcOBo",
                "china_cdn_id": "kxXdk2HcOBo.mp4"
              }
            },
            {
              "id": 339195,
              "key": "f6bd1549-45b2-49f2-89a7-0062cc045d2a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "git fetch 用于从远程仓库分支检索 commit ，但**不会**在收到这些 commit 之后，自动将本地分支与远程跟踪分支合并。\n\n上面的段落有点密集，你可以多读几遍。\n\n你需要向 `git fetch` 提供和 `git pull` 完全相同的信息，也就是说要提供你想获取的远程仓库的简写名及其分支：\n\n```bash\n$ git fetch origin master\n```\n\n运行 `git fetch` 后，会发生以下活动：\n* 远程分支上的 commit 会复制到本地仓库\n* 本地跟踪分支（例如，`origin/master`）移到指向最新的 commit \n\n需要注意的一点是，本地分支完全不会被改变。\n\n你可以将 `git fetch` 想象成 `git pull` 它的一半操作，而 `git pull` 的另一半是合并。\n\n使用 `git fetch` 而不是 `git pull` 的一个主要情形是当你的远程分支和本地分支都拥有对方所没有的更改时。在这种情况下，你要获取远程更改，将它们存储到本地分支中，然后手动执行合并。最后，你可以将新的合并 commit 推送会远程仓库。\n\n我们来看看。",
              "instructor_notes": ""
            },
            {
              "id": 339196,
              "key": "edb855cd-f18f-4704-9d1e-48b42179a38d",
              "title": "L1 - 获取、合并和推送",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "jwyQUfE1Eqw",
                "china_cdn_id": "jwyQUfE1Eqw.mp4"
              }
            },
            {
              "id": 339197,
              "key": "d2408893-539f-45ca-9fbd-d9ec454c3113",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 小结\n\n你可以将 `git pull` 命令想象成执行两步操作：\n\n1. 获取远程更改（这会将 commit 添加到远程仓库，并移动跟踪分支指向它们）\n* 将本地分支与跟踪分支合并\n\n`git fetch` 命令只执行上面的第一步。它只检索 commit 和移动跟踪分支。它_不会_将本地分支与跟踪分支合并。提供给 `git pull` 的同样信息也要传递给 `git fetch`：\n\n* 远程仓库的简写名\n* 包含要取回的 commit 的分支\n\n```bash\n$ git fetch origin master\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339319,
          "key": "702f499e-44bc-4208-8b3e-f05db54629c3",
          "title": "总结",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "702f499e-44bc-4208-8b3e-f05db54629c3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339220,
              "key": "e1d5f2b4-303f-4c3f-bce3-03f8983a6f5d",
              "title": "课程总结",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "6Koa4nAu-04",
                "china_cdn_id": "6Koa4nAu-04.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}