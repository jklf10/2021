{
  "data": {
    "lesson": {
      "id": 869740,
      "key": "808faf70-1d31-4982-a4cb-17861cf81db8",
      "title": "协作",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "zh-cn",
      "summary": "",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/808faf70-1d31-4982-a4cb-17861cf81db8/738095/1544291014950/Working+On+Another+Developer%27s+Repository+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/808faf70-1d31-4982-a4cb-17861cf81db8/738095/1544291012105/Working+On+Another+Developer%27s+Repository+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 339318,
          "key": "f39041e9-6a05-45df-a3c8-a520304eb661",
          "title": "简介",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f39041e9-6a05-45df-a3c8-a520304eb661",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339221,
              "key": "26ca2cbf-70d8-408c-bc2a-a8e570fa2d40",
              "title": "简介",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "VkqtlJuZ9rs",
                "china_cdn_id": "VkqtlJuZ9rs.mp4"
              }
            }
          ]
        },
        {
          "id": 339321,
          "key": "9462fdee-18d9-4e88-9442-85fcc5e42b69",
          "title": "fork 仓库",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9462fdee-18d9-4e88-9442-85fcc5e42b69",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339222,
              "key": "57321f0b-861a-49f5-b737-95b2789b5974",
              "title": "fork 仓库 - 什么是 Fork？",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "z4mkVwqVztc",
                "china_cdn_id": "z4mkVwqVztc.mp4"
              }
            },
            {
              "id": 339223,
              "key": "5a5b4d1e-a4ae-43d2-8dda-90a991f8c7b9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "在版本控制术语中，如果你 \"fork\" 一个仓库，则是指**复制**它。特别是当你 fork 属于别人的仓库时，你将制作**他们**仓库的完全一样的副本，之后这个副本便变成**你的**。\n\n\"fork\" 的概念也不同于\"克隆\"。在克隆仓库时，你也会获得完全一样的仓库副本，但克隆发生在**本地**计算机上，并且克隆的是**远程**仓库。当你 fork 仓库时，会创建**远程**仓库的一份新副本。新副本也是一个**远程**仓库，但它现在属于你。",
              "instructor_notes": ""
            },
            {
              "id": 339224,
              "key": "adee76f6-7d16-43fc-9620-04f49bc7c301",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 有 `fork` 子命令吗？\n\nfork 不在命令行上执行；也不存在 `git fork` 命令。你可以尝试运行以下命令:\n\n```bash\n$ git fork\n```",
              "instructor_notes": ""
            },
            {
              "id": 339225,
              "key": "fd8a5dbe-3012-412e-8c7d-e9b5456e45f0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58fe6766_ud456-l2-02-git-fork-error/ud456-l2-02-git-fork-error.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/fd8a5dbe-3012-412e-8c7d-e9b5456e45f0",
              "caption": "_终端上正在运行`git fork`（不存在！）命令。Git 没有 `fork` 子命令，所以它的回应是建议使用替代命令。_",
              "alt": null,
              "width": 1970,
              "height": 936,
              "instructor_notes": null
            },
            {
              "id": 339226,
              "key": "bf124dd4-5141-4159-b2d5-797bfc605f90",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "如你所见，尝试运行 `git fork` 命令会产生错误。（另外，`fsck` 并不是粗话，它表示\"文件系统检测\"，指的是审核文件的一致性。）\n\n## 修改克隆的仓库 ",
              "instructor_notes": ""
            },
            {
              "id": 339228,
              "key": "4d4a375a-1e39-4cff-ab47-7ba2b2440a98",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4d4a375a-1e39-4cff-ab47-7ba2b2440a98",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "使用 `git clone` 克隆 Lam 的 my-travel-plans 项目",
                "至少对它进行一项修改",
                "提交更改",
                "使用 `git push` 将你的更改推送回 Lam 的项目"
              ],
              "positive_feedback": "很好，你完成了所有这些步骤！现在请回答下面的问题。",
              "video_feedback": null,
              "description": "请执行以下步骤并回答下面的问题。"
            },
            {
              "id": 339229,
              "key": "2b4dff1e-703c-4569-84af-6904b238e14f",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2b4dff1e-703c-4569-84af-6904b238e14f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "你能否成功将更改推送到了远程仓库？",
                "answers": [
                  {
                    "id": "a1492729065474",
                    "text": "是",
                    "is_correct": false
                  },
                  {
                    "id": "a1492729071965",
                    "text": "否",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 339230,
              "key": "392e635d-0ae0-4a3c-9f97-bbf8cd87b1a5",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "392e635d-0ae0-4a3c-9f97-bbf8cd87b1a5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "在你尝试推送后显示的输出行中，有一行包含 \"fatal\" 一词。那么，该词之后的内容是什么？",
                "answers": [
                  {
                    "id": "a1492729106475",
                    "text": "你没有正确的权限",
                    "is_correct": false
                  },
                  {
                    "id": "a1492729131365",
                    "text": "无法访问",
                    "is_correct": true
                  },
                  {
                    "id": "a1492729133018",
                    "text": "你是所有者吗？",
                    "is_correct": false
                  },
                  {
                    "id": "a1492729138160",
                    "text": "尝试使用其他帐户",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 339231,
              "key": "20e3e509-8937-4c3f-825a-493b6c882092",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "我们可以从这个小实验中看出，如果一个仓库不属于你的帐户，那么你便不具有修改它的权限。 \n\n这里 fork 就要派上用场了！你不能直接修改原仓库，但如果你将仓库 fork 到自己的帐户中，便拥有完全控制权了。\n\n\n### fork Lam 的项目\n我将自己克隆 Lam 的项目。我的帐户没有直接编辑她的仓库的权限，所以我要将此仓库 fork 到我自己的帐户。",
              "instructor_notes": ""
            },
            {
              "id": 339227,
              "key": "bfebd9e4-4223-4022-bbf8-8dc72e564fa0",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bfebd9e4-4223-4022-bbf8-8dc72e564fa0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "在你的浏览器中转至 [Lam 的 my-travel-plans 项目](https://github.com/udacity/course-collaboration-travel-plans)",
                "点击 fork 按钮将她的仓库复制到你的帐户",
                "确认现在你的仓库中列出了 Lam 的项目"
              ],
              "positive_feedback": "很好，你完成了所有这些步骤！",
              "video_feedback": null,
              "description": "请登录你的 GitHub 帐户，然后按以下步骤操作："
            },
            {
              "id": 339232,
              "key": "27b239d7-70a3-4d05-adac-0e938e0d8a67",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "我们来看看仓库的名称：",
              "instructor_notes": ""
            },
            {
              "id": 339233,
              "key": "f5997489-92f3-4a6f-b87b-4b57b11f4933",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58fe6893_ud456-l2-02-clone-linked-to-fork/ud456-l2-02-clone-linked-to-fork.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f5997489-92f3-4a6f-b87b-4b57b11f4933",
              "caption": "_fork 项目后你的 GitHub 配置文件名称旁边会显示新的项目名称。此外，名称下面还会说明原始项目所在的位置。_",
              "alt": null,
              "width": 1026,
              "height": 366,
              "instructor_notes": null
            },
            {
              "id": 339234,
              "key": "8a85072c-4d86-48cf-b45c-a44da22b3c76",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "可以看到我的帐户名 (richardkalehoff) 和仓库名称是如何显示的。并且，在仓库名称下，显示 \"forked from udacity/course-collaboration-travel-plans\"。这表明此项目在**我的**帐户中，但它与复制自的原始项目有联系。\n\n挺不错的，对吧！现在你可以 fork GitHub 上的任何公共仓库 - 即你可以将仓库复制到自己的帐户中，并对获得的副本拥有完全控制权。\n\n那么，不如你自己动手 fork 几个仓库练习一下吧！这里有几个你可以尝试：\n\n* https://github.com/udacity/course-git-blog-project\n* https://github.com/udacity/frontend-nanodegree-styleguide\n* https://github.com/GoogleChrome/lighthouse\n* https://github.com/jquery/jquery\n",
              "instructor_notes": ""
            },
            {
              "id": 339235,
              "key": "e76e97ba-ff40-4ff9-aa1d-e4b0c43c33b2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## fork 推送/拉取 \n\n因为 fork 仓库会使你在自己的帐户中拥有一份副本，所以你可以将其克隆到你的计算机，对其进行更改，然后将这些更改推送回 fork 的仓库。但记住，它会将更改推送回**你的**远程仓库，而不是被 fork 的**原始**远程仓库。",
              "instructor_notes": ""
            },
            {
              "id": 339236,
              "key": "75f337f6-642f-43a5-85fc-6b8a203e81a2",
              "title": "L2 - 推送到 Fork",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "WRgNpr19t48",
                "china_cdn_id": "WRgNpr19t48.mp4"
              }
            },
            {
              "id": 339237,
              "key": "6b4e30d6-e07f-47e1-9d65-bdfc5ab746c7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 小结\n\nfork 是一种在托管服务上完成的操作，如 GitHub。fork 仓库会创建与原始仓库完全相同的副本，并将该副本移动到你的帐户。你对 fork 的仓库拥有完全控制权。修改 fork 的仓库不会更改原始仓库。",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339322,
          "key": "5764b331-ef76-44f5-b627-a917fa97d870",
          "title": "查看现有工作",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5764b331-ef76-44f5-b627-a917fa97d870",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339238,
              "key": "53bb1d4a-8b42-4f5a-a175-0b137b6e130b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 查看现有工作\n\n当你是项目唯一的开发者时，很容易知道项目已经取得的进展，因为一切都由你自己完成。但如果是团队协作，事情会变得有点复杂 - 无论该团队在本地办公室，还是通过互联网一同进行开发。\n\n有时你可能很难看到其他开发者在项目中所做的工作，特别是当开发者位于多个不同的分支上时。我如何看到 Deepesh 所做的所有 commit？或者，如果 Christine 做了更改，并表示她的 commit 能解决我们的项目票跟踪系统中的 issue 47，我们如何在仓库中发现查明这些信息？\n\n我们可以使用非常强大的 `git log` 命令，查明其他开发者所做工作的详细信息。",
              "instructor_notes": ""
            },
            {
              "id": 339239,
              "key": "0904c1e8-e1c3-4624-bbcb-e6b664cc2f03",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 克隆 Lighthouse 项目\n\n我们首先需要下载一个正在进行多人协作的项目。让我们下载 Google 的 Lighthouse 项目，这是一个用于对渐进式网页应用进行审计、性能度量和提供最佳实践的应用。\n\n这是[GitHub 上的 Lighthouse 项目](https://github.com/GoogleChrome/lighthouse)。",
              "instructor_notes": ""
            },
            {
              "id": 339240,
              "key": "ee624f91-04f4-464a-b87d-4efb08eca80c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58f943c9_ud456-l2-03-clone-lighthouse-project/ud456-l2-03-clone-lighthouse-project.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ee624f91-04f4-464a-b87d-4efb08eca80c",
              "caption": "_从 GitHub 克隆 Google 的 Lighthouse 项目。_",
              "alt": null,
              "width": 2584,
              "height": 1238,
              "instructor_notes": null
            },
            {
              "id": 339241,
              "key": "48dd32c3-1695-47e9-871d-a19b42a50b5c",
              "title": "",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "48dd32c3-1695-47e9-871d-a19b42a50b5c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "克隆 [Lighthouse 项目](https://github.com/GoogleChrome/lighthouse)",
                "使用 `cd` 命令进入目录"
              ],
              "positive_feedback": "完美！让我们继续！",
              "video_feedback": null,
              "description": "为确保我们的步调一致，请完成："
            },
            {
              "id": 339242,
              "key": "130cad7f-45d7-472a-a0fc-820f3d550277",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 筛选协作者的 commit \n\n将 commit 的范围缩小到你需要的那些是一件麻烦事。我们来看看查明我们的协作者所完成工作的几种不同方式！\n\n### 按 commit 作者分组\n这不是一个巨大的项目，但仍有超过 1,000 个 commit 。要看到每位贡献者在此仓库中添加了多少 commit ，一个快捷的方法是使用 `git shortlog` 命令：\n\n```bash\n$ git shortlog\n```",
              "instructor_notes": ""
            },
            {
              "id": 339243,
              "key": "a87707b5-7590-4e89-9203-43e85417b07a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58f944d6_ud456-l2-03-git-shortlog/ud456-l2-03-git-shortlog.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a87707b5-7590-4e89-9203-43e85417b07a",
              "caption": "_终端正在显示运行 `git shortlog` 命令的结果。它显示了按作者排序的所有 commit 。_",
              "alt": null,
              "width": 2626,
              "height": 1342,
              "instructor_notes": null
            },
            {
              "id": 339244,
              "key": "c221b51b-d725-4ea3-baa8-183f785996d0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "在上面的截图中，我们可以看到：\n\n* Abby Armada 在仓库中添加了一个 commit \n* Addy Osmani 添加了七个 commit \n* Adriano Caheté 添加了一个 commit \n* André Cipriani Bandarra 添加了一个 commit \n\n`git shortlog` 显示了按字母顺序排序的人名列表，以及他们对应的提交说明。如果我们只想看到每个开发者的 commit 数量，我们可以添加几个选项：用 `-s` 仅显示 commit 的数量（而不是每个 commit 的消息），以及用 `-n` 来按数量排序（而不是按作者姓名的字母顺序）。\n\n```bash\n$ git shortlog -s -n\n```",
              "instructor_notes": ""
            },
            {
              "id": 339246,
              "key": "74cd45bc-ce98-4c5f-8262-e0ee38ded86b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58f94565_ud456-l2-03-git-shortlog-flags/ud456-l2-03-git-shortlog-flags.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/74cd45bc-ce98-4c5f-8262-e0ee38ded86b",
              "caption": "_使用 `git shortlog` 与 `-s -n` 选项，仅显示每位作者的 commit 数量，并按数量排序。_",
              "alt": null,
              "width": 2626,
              "height": 1342,
              "instructor_notes": null
            },
            {
              "id": 339245,
              "key": "f1505ec9-74fd-4329-851a-2002c84b3203",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "我们可以在上图中看到，Surma 向 Lighthouse 项目添加了五个 commit 。这五个分散在整个仓库中。如果我们只想看到 Surma 的这五个 commit 呢？\n\n### 按作者筛选\n\n另一种显示某个作者所有 commit 的方法是使用常规的 `git log` 命令，但包含 `--author` 选项来筛选所述作者的 commit 。\n\n```bash\n$ git log --author=Surma\n```",
              "instructor_notes": ""
            },
            {
              "id": 339247,
              "key": "16b91246-85ea-48d2-b172-3cfefe7a9841",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58f94e0b_ud456-l2-03-git-log-author/ud456-l2-03-git-log-author.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/16b91246-85ea-48d2-b172-3cfefe7a9841",
              "caption": "_终端应用显示了运行 `git log --author=Surma` 的结果。输出仅显示了 Surma 所做的 commit 。_",
              "alt": null,
              "width": 1702,
              "height": 1342,
              "instructor_notes": null
            },
            {
              "id": 339248,
              "key": "518b7761-9072-4432-be2d-70e7e5adffab",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "518b7761-9072-4432-be2d-70e7e5adffab",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "再次运行 `git shortlog -s -n`，你会看到 \"Paul Irish\" 和 \"Paul Lewis\"。那如果运行下面的命令：\n\n```bash\n$ git log --author=Paul\n```\n\n会显示什么呢？",
                "answers": [
                  {
                    "id": "a1492733508980",
                    "text": "仅 Paul Irish 的 commit",
                    "is_correct": false
                  },
                  {
                    "id": "a1492733586231",
                    "text": "仅 Paul Lewis 的 commit",
                    "is_correct": false
                  },
                  {
                    "id": "a1492733592058",
                    "text": "Paul Irish 和 Paul Lewis 的 commit 都有",
                    "is_correct": true
                  },
                  {
                    "id": "a1492733603770",
                    "text": "它会让你选择 Paul Irish 或 Paul Lewis",
                    "is_correct": false
                  },
                  {
                    "id": "a1492733623885",
                    "text": "什么都不会显示",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 339251,
              "key": "15b2607e-cc7d-4fd6-ab79-979ebdbf89de",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "如果我们只想看到 Paul Lewis 的 commit ，我们需要运行：\n\n```bash\n$ git log --author=\"Paul Lewis\"\n```",
              "instructor_notes": ""
            },
            {
              "id": 339252,
              "key": "60817766-ae94-4cc8-ae4f-026bc5ee7ca2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ### ⚠️ 引号很重要 ⚠️\n\n> 注意上一个命令中使用的引号。如果它**不加**引号，像 `git log --author=Paul Lewis`，就无法正常运行。如果**不加**引号，Git 会认为 `Lewis` 不是 \"author\" 选项的一部分，从而导致错误。",
              "instructor_notes": ""
            },
            {
              "id": 339253,
              "key": "785dbd11-5236-4883-a391-fac06669971c",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "785dbd11-5236-4883-a391-fac06669971c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Paul Lewis 在 Lighthouse 项目中的**第一个** commit ，其 SHA 的前七个字符是什么？",
                "matchers": [
                  {
                    "expression": "c09a442"
                  }
                ]
              }
            },
            {
              "id": 339249,
              "key": "1ba792ed-f554-442e-90bf-9ac587c7dbfc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 按搜索内容筛选 commit \n\n在讲解“按搜索内容筛选 commit”这部分之前，我认为我需要强调一下编写好的**描述性**提交说明的重要性。编写描述性提交说明，会使你之后能很轻松地搜索提交说明，找到你想要的东西。\n\n另外记住，如果提交说明不足以解释 commit 的内容，则你可以在描述区域中提供关于该 commit 用途的详细说明。\n\n我们以 commit `5966b66` 为例，来说明如何在 lighthouse 项目的 commit 中包含额外详细信息：\n\n```bash\n$ git show 5966b66\n```",
              "instructor_notes": ""
            },
            {
              "id": 519232,
              "key": "1be8684d-034f-4910-8d53-4c5818538a11",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58f9533a_ud456-l2-03-commit-with-description/ud456-l2-03-commit-with-description.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1be8684d-034f-4910-8d53-4c5818538a11",
              "caption": "_终端应用显示了 Lighthouse 项目中的 commit `5966b66`。作者提供了关于此 commit 的额外信息。_",
              "alt": "",
              "width": 2458,
              "height": 1342,
              "instructor_notes": null
            },
            {
              "id": 339254,
              "key": "ee8acf5e-888b-4b0a-b5c4-4155cde949ea",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "提交说明为“配置由白名单集成运行的 Lighthouse (#1830)”。但除此之外还有一些文本。在提交说明下面，你还会看到看到几行有关 commit 的其他信息。此部分提供了有关**为何**需要此 commit 的更多信息。\n\n那么这些详细信息为何重要呢？一方面，你将能更容易地回头查看对仓库所做的更改，其他人也更容易查看更改。另一方面是你将能根据当前说明或描述区域中的信息筛选 commit 。\n\n我们可以使用 `--grep` 选项筛选 commit 。\n\n我们再来尝试筛选提到 \"bug\" 一词的 commit ，使用下面任何一个命令都可以这么做：\n\n```bash\n$ git log --grep=bug\n$ git log --grep bug\n```",
              "instructor_notes": ""
            },
            {
              "id": 339255,
              "key": "d79620fb-b17b-49d4-8d5d-8e07dd5c5f07",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ### ⚠️ 注意空格 ⚠️\n\n> 注意，空格在这里也是一个问题。如果你尝试搜索包含多个词且单词之间有空格的内容，则需要将空格也包含在引号内。例如，要搜索 `unit tests`，你需要使用以下命令 `git log --grep=\"unit tests\"`。",
              "instructor_notes": ""
            },
            {
              "id": 339256,
              "key": "7e43dbff-9b2d-4d19-ac84-c8387230fb89",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ### 💡 `grep` 的更多说明 💡 \n\n> 如果你不知道 `grep` 是什么，那么 `--grep` 选项可能看起来不像是选项名称的合理选择。Grep 是一个模式匹配工具，它**不在**本课程教学范围内。但是简单介绍一下，如果你运行 `git log --grep \"fort\"`，那么 Git 将显示顺序包含字符 `f`、`o`、`r`、`t` 的 commit 。\n\n> 有关 Grep 的更多信息，请查看我们的 [Shell 讲习班课程](https://www.udacity.com/course/shell-workshop--ud206).",
              "instructor_notes": ""
            },
            {
              "id": 339257,
              "key": "efeb9d48-f926-4e7f-b584-7a11703baef9",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "efeb9d48-f926-4e7f-b584-7a11703baef9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "以下浏览器之一具有一个 CSS 错误，但使用一个 commit 修复了。使用 `git log` 和 `--grep` 选项找出哪个浏览器有错误。",
                "answers": [
                  {
                    "id": "a1492738454425",
                    "text": "Chrome",
                    "is_correct": false
                  },
                  {
                    "id": "a1492738460183",
                    "text": "Safari",
                    "is_correct": false
                  },
                  {
                    "id": "a1492738467326",
                    "text": "Firefox",
                    "is_correct": true
                  },
                  {
                    "id": "a1492738467856",
                    "text": "Edge",
                    "is_correct": false
                  },
                  {
                    "id": "a1492738468474",
                    "text": "Opera",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 339258,
              "key": "83b380a5-890f-4f34-8cba-09af45bf29a0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 小结\n\n`git log` 命令非常强大，你可以使用它来深入了解关于仓库的很多信息。而且，它在探索有关你与他人协作的仓库的信息这一方面很实用。你可以使用 `git log` 完成以下任务：\n\n* 使用 `git shortlog` 按作者对 commit 分组\n    ```bash\n    $ git shortlog\n    ```\n* 使用 `--author` 选项筛选 commit \n    ```bash\n    $ git log --author=\"Richard Kalehoff\"\n    ```\n\n* 使用 `--grep` 选项筛选 commit \n    ```bash\n    $ git log --grep=\"border radius issue in Safari\"\n    ```\n\ngrep 是一个复杂的话题，你可以[在此维基页面 - 英](https://en.wikipedia.org/wiki/Grep)|[百度百科 - 中](https://baike.baidu.com/item/GREP/5997841?fr=aladdin) 上找到关于它的更多信息，或参加我们的 [Shell 讲习班课程](https://www.udacity.com/course/shell-workshop--ud206)。",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339320,
          "key": "040ba8b2-066f-48fa-829d-1c66558c7e75",
          "title": "确定你的任务",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "040ba8b2-066f-48fa-829d-1c66558c7e75",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 339198,
              "key": "1d974471-8f89-49d0-a4c4-7ea5f1f6e9cd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 你的任务\n\n假设你正在使用某个第三方库构建一个项目。如果在使用此第三方库时遇到 bug 或拼写错误，该怎么办？虽然你有能力修复它，但你没有直接访问原库进行修改的权限。不过这不是问题，因为你知道 fork 其他开发者的仓库可以将其复制到你的帐户，使你可以全权对它执行 `git pull` 和 `git push`！\n\n但是，当你获得了其他开发者项目的副本，并拥有完全访问权限后，你应该做什么？我们将在下节课学习这一部分，但是如果你 fork 了一个项目，并且你的 fork 中包含原项目所没有的代码，则可以通过向原项目的维护者发送一个请求，将你的代码更改包含在其中，请求维护者将这些更改拉取到原项目中。这种请求称为“拉取请求”（Pull Request）。再次说明，我们将在下一课中介绍发送和使用“Pull Request”。所以，现在你知道如何将你的代码加入到原项目中的方法，并且你想帮助解决这个拼写/代码错误。那么你有任务在身啦！但是，你如何以原项目维护者能接受的方式实际对项目做出贡献，并使他最终合并你的更改？记住，你要做的第一件事，是在项目中寻找一个名为 `CONTRIBUTING.md` 的文件。",
              "instructor_notes": ""
            },
            {
              "id": 339199,
              "key": "149bc03c-3421-4319-992b-2e31757d1165",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## CONTRIBUTING.md 文件\n\n`CONTRIBUTING.md` 文件的名称特别采用全大写，以方便查找。你可能会从它的名称猜到文件的用途，此文件列出了你要为项目做出贡献时所应遵循的信息。在开始任何开发工作之前，应先找到此文件。          \n我们来看看 Lighthouse 项目的 CONTRIBUTING 文件： ",
              "instructor_notes": ""
            },
            {
              "id": 339200,
              "key": "f80b12ab-90d4-43ff-8c34-83caef87383a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58fe68e7_ud456-l2-04-lighthouse-contributing-file/ud456-l2-04-lighthouse-contributing-file.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f80b12ab-90d4-43ff-8c34-83caef87383a",
              "caption": "_Google 的 Lighthouse 项目的 CONTRIBUTING.md 文件。_",
              "alt": null,
              "width": 2416,
              "height": 1416,
              "instructor_notes": null
            },
            {
              "id": 339201,
              "key": "f53a568c-323b-4674-96bd-2a45ad5209e2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "你可以看到文件的顶行说：\n\n> 欢迎你提供帮助！本文档介绍了如何成为贡献者并向项目提交代码。\n\n本文件有两个主要部分：\n* \"For Contributors\" 面向贡献者的部分\n* \"For Maintainers\" 面向维护者的部分\n\n每部分都有各自的小节，指导读者如何加入此项目和做出贡献。\n\n我们来看看签署贡献者许可证的小节。以下是在制作此课程时此小节的显示内容：",
              "instructor_notes": ""
            },
            {
              "id": 339202,
              "key": "675363ca-039b-4804-a585-02b8c1b07f2d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58fe6919_ud456-l2-04-sign-contributor-license/ud456-l2-04-sign-contributor-license.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/675363ca-039b-4804-a585-02b8c1b07f2d",
              "caption": "_Google 的 Lighthouse 项目中 CONTRIBUTING.md 文件的“贡献者许可协议”（Contributor License Agreement）部分。_",
              "alt": null,
              "width": 2372,
              "height": 984,
              "instructor_notes": null
            },
            {
              "id": 339203,
              "key": "c3c8ef86-d61f-436e-8cd3-b8c756d0d932",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "可以看到，要为此项目做出贡献，你需要签署 Google 的“贡献者许可协议”。",
              "instructor_notes": ""
            },
            {
              "id": 339204,
              "key": "83306cdb-70f5-4748-9a66-d924450adf6d",
              "title": "",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "83306cdb-70f5-4748-9a66-d924450adf6d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "查看 [Lighthouse 项目的 CONTRIBUTING 文件](https://github.com/GoogleChrome/lighthouse/blob/master/CONTRIBUTING.md)。哪个文件包含有关 Lighthouse 项目的代码样式的信息？",
                "matchers": [
                  {
                    "expression": "\\.eslintrc"
                  }
                ]
              }
            },
            {
              "id": 339206,
              "key": "e0a95531-2b2e-4c22-a588-8e065595b422",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "可以看到，此贡献者文件中包含大量信息。所以当你想对一个项目做出贡献时，一定要查阅 CONTRIBUTING.md 文件。\n\n## GitHub Issues\n如果你的代码更改只是修改简单的拼写错误，那么你可以直接进行更改。但如果你要做涉及大量文件的重大修改，则你可能要在开始之前，先获得项目维护者的批准。你肯定不想花几个小时更改项目，最后却发现别人正在做同样的事情。到头来，花费了大量时间和精力做了重复工作。在 CONTRIBUTING.md 文件中，它解释了应该**如何**规范书写代码，以及你做出贡献的方式，但你如何知道应该贡献**什么**呢？你应该直接与项目维护人员交谈。GitHub 有一个非常赞的页面，使你能以公开的方式向项目维护者提问，让每个人都能看到项目的动态。\n\n这是 GitHub 的 Issues 界面：",
              "instructor_notes": ""
            },
            {
              "id": 339205,
              "key": "403c46f6-8d18-4ebc-9f9e-d2af5469b87a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58fe6978_ud456-l2-04-lighthouse-issues/ud456-l2-04-lighthouse-issues.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/403c46f6-8d18-4ebc-9f9e-d2af5469b87a",
              "caption": "_Lighthouse 项目的 Issues 页面。_",
              "alt": null,
              "width": 2468,
              "height": 1854,
              "instructor_notes": null
            },
            {
              "id": 339207,
              "key": "48ee2421-fdf6-42d5-ab61-251496f30738",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "注意，这里说的\"Issues（问题）\"并不代表实际存在错误，它可以是需要对项目进行的任何改变。GitHub 的问题跟踪器相当高级。每个问题都可以：\n\n* 应用一个或多个标签\n* 被分配给个人\n* 确定一个里程碑（例如问题将由下一个主要版本解决）\n\n但问题跟踪器最重要的一个方面在于，每个问题都可以有自己的评论区，使开发者围绕这个问题展开对话。\n\n查看这个有很多评论的[问题](https://github.com/GoogleChrome/lighthouse/issues/1842)：",
              "instructor_notes": ""
            },
            {
              "id": 339208,
              "key": "5e00f5e0-f3bb-4f96-b38c-a3cd4ce21de0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58fe699d_ud456-l2-04-issue-comments/ud456-l2-04-issue-comments.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5e00f5e0-f3bb-4f96-b38c-a3cd4ce21de0",
              "caption": "_关于此 Issue 的前几个评论在讨论解决 Chrome 兼容性和 Lighthouse 扩展的方法。_",
              "alt": null,
              "width": 2332,
              "height": 1942,
              "instructor_notes": null
            },
            {
              "id": 339209,
              "key": "6bbf074d-b153-402f-9f28-778582e3d3da",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Issue 的另一个很棒的功能在于：\n* 你可以订阅某个 Issue ，这样你便会获得新评论和代码更改的通知\n* 你可以就具体变更与项目维护者持续交流\n\n在向某个文件贡献任何内容之前，请查看 `CONTRIBUTING.md` 中的说明。然后查看项目的 Issue，看是否有哪些与你要贡献的内容类似。如果有，则订阅该 Issue 并阅读现有的对话，看你是否可以提供帮助。如果你查看了 Issues 列表，没有看到与你要做的事情类似的内容，那么你可以创建自己的新 Issue。在 GitHub 问题界面的每个页面上，都能找到“New Issue（新建问题）”按钮：",
              "instructor_notes": ""
            },
            {
              "id": 339212,
              "key": "7974fc9c-0037-4ac4-a72f-04f60656b629",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58fe69c2_ud456-l2-04-new-issue-button/ud456-l2-04-new-issue-button.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7974fc9c-0037-4ac4-a72f-04f60656b629",
              "caption": "_Lighthouse 项目问题页面上的 New Issue（新建问题）按钮。_",
              "alt": null,
              "width": 2266,
              "height": 1602,
              "instructor_notes": null
            },
            {
              "id": 339210,
              "key": "8c019c07-021e-4427-8f0b-5a2ea97ae8d3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "点击该按钮可以创建新问题",
              "instructor_notes": ""
            },
            {
              "id": 339214,
              "key": "2af57580-c97a-40e2-b59f-bb79e44e3b2a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/April/58fe69e0_ud456-l2-04-submit-new-issue/ud456-l2-04-submit-new-issue.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2af57580-c97a-40e2-b59f-bb79e44e3b2a",
              "caption": "_Lighthouse 项目的 New Issue 页。表格上方显示了要求参阅贡献准则的提醒。_",
              "alt": null,
              "width": 2458,
              "height": 1874,
              "instructor_notes": null
            },
            {
              "id": 339213,
              "key": "887920b3-2fbe-4d7a-a5a5-abe8d78fe3a8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## New Issue 页          \n\n新建问题页好的一点在于，如果项目有 CONTRIBUTING.md 文件，它会在页面顶部显示一个提醒，要求你查看有关如何为项目做贡献的准则。点击\"guidelines for contributing\"链接，可以转至 CONTRIBUTING.md 文件。 \n\nGitHub 问题页面支持 Markdown，所以当你创建了自己的问题后，可以使用 Markdown 编排格式，并通过包含链接、图像、项目符号列表和代码块按照你想要的方式进行编写。",
              "instructor_notes": ""
            },
            {
              "id": 339215,
              "key": "7814bdb0-e537-46f8-b07f-bf624d87d11b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ### 💡 学习 Markdown！ 💡 \n\n> 从 README 文件，到新建问题页面及评论，Markdown 都极其重要！如果你不熟悉 Markdown，请查看我们的课程[编写 README 文档](https://classroom.udacity.com/courses/ud777)，我们将会讲解关于 Markdown 的所有知识。该课程十分简短，有什么理由不花上一小时时间学习这项强大的技能！",
              "instructor_notes": ""
            },
            {
              "id": 339211,
              "key": "03a203f8-c28c-4b08-87a2-3b194fbe4788",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "与编写描述性的提交说明一样，你在创建问题时，要给它一个信息丰富的标题，简要说明你想要做的事情。然后，在评论部分，提供大量关于此更改的详细信息，可以是你为什么认为此更改有必要，也可以是它如何改进项目。\n\n通常情况下，项目的维护者都有全职工作，只在闲暇时间研究项目，因此，在你急着进行修改前，请给他们一些时间来回答你的问题。一旦项目维护者给予批准，你便可以开始应用想要贡献给项目的更改了。",
              "instructor_notes": ""
            },
            {
              "id": 339216,
              "key": "e2326bf9-c221-4694-8370-a864e4d75df0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 特性分支          \n组织你想贡献给项目的一系列 commit 或更改的最佳方法，是**将它们全部放在一个特性分支上**。我说的**特性分支**是什么意思呢？与主分支不同，主分支是保存整个项目的所有 commit 的默认分支，而特性分支仅保存单个概念或单个更改区域的 commit 。\n\n例如，如果登录某个网站的登录表单有问题，则解决此特定问题的分支名称可以叫做：\n\n* `login`\n* `login-bug`\n* `signup-bug`\n* `login-form-bug`\n* 等等。\n\n有很多名称可以用作特性分支的名称。你只需为分支提供一个清晰的描述性名称，以便在列出所有分支时，你可以立即根据名称确定要在分支中做哪些更改。",
              "instructor_notes": ""
            },
            {
              "id": 339217,
              "key": "d8766d99-dd23-4ef7-82e9-ca606a804e10",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d8766d99-dd23-4ef7-82e9-ca606a804e10",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Lighthouse 项目的一个分支名称为 `add-a11y-tests`。你认为这是一个用于特性分支的好名字吗？   （提示 - `a11y` 代表\"accessibility\"。在\"accessibility\" 中，`a` 和 `y` 之间有十一个字母，所以缩写为了 `a11y`！）",
                "answers": [
                  {
                    "id": "a1492989843579",
                    "text": "Yes",
                    "is_correct": true
                  },
                  {
                    "id": "a1492989849879",
                    "text": "No",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 339218,
              "key": "9333e338-a304-427e-bbca-11cc8862a369",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "要记住的一点是，有时项目会对特性分支的命名有特定要求。例如，如果一个分支将要解决错误修复，那么许多项目会要求添加一个 `bugfix-` 前缀。回到我们处理登录表单错误的分支，它得被命名为 `bugfix-login-form`。所以一定要阅读 CONTRIBUTING.md 文件，确定项目是否对特性分支的命名提供了特别说明。\n\n## 最佳实践          \n### 编写描述性的提交说明\n\n在谈论如何命名分支，以清晰描述分支会包含**哪些**更改的同时，我想另外提醒一下如何编写清晰、描述性的提交说明。你的分支名称和提交说明描述得越清楚，项目维护者用于询问你的代码的用途，或者自己去深入了解代码的时间就越少。项目维护者需要做的工作越少，将你的更改纳入项目的速度就越快。         \n### 创建短小而明确的 commit \n\n这一点我们之前已经强调了很多次，请确保在对项目 commit 更改时，使用短小的 commit。不要进行大量 commit，记录 10 多个文件和数百行代码的更改。最好频繁多次地进行小的 commit，只记录很少数量的文件和代码更改。 \n\n你可以这样想：如果开发者不喜欢你的大量 commit 中的**一部分**更改，他们不可能说\"我赞成 commit A，只是不赞成改变边栏背景颜色的那部分。\" 一个 commit 不能分解成几个小块，所以确保你的 commit 足够小，每个只集中解决一个更改。这样，维护者可以说“我赞成 commit A、B、C、D 和 F，但不赞成 commit E。 \n\n### 更新 README\n\n最后，如果你添加的任何代码更改会使项目发生极大的变化，则应更新 README 文件以向其他人说明此更改。 ",
              "instructor_notes": ""
            },
            {
              "id": 339219,
              "key": "a5a20709-64c8-4d80-962d-0f62cf4551f8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 小结\n在开始任何工作之前，确保阅读项目的 CONTRIBUTING.md 文件。\n\n接下来，查看项目的 GitHub 问题\n* 查看现有的问题，看是否有哪些内容类似于你想贡献的更改\n* 如有必要，创建一个新的 Issue\n* 与项目维护者交流你想要做出的更改\n\n当开始开发后，将所有工作 commit 到特性分支上：\n* 不要在主分支上工作\n* 确保给特性分支赋予一个清晰、描述性的名称\n\n以及编写 commit 的一般最佳实践\n* 频繁少量 commit \n* 使用清晰、具有描述性的提交说明\n* 必要情况下，更新 README 文件",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}