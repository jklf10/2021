{
  "data": {
    "lesson": {
      "id": 869736,
      "key": "950113cc-8d4b-4346-b03f-8872ded1c0a6",
      "title": "Git Commit",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "zh-cn",
      "summary": "",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/950113cc-8d4b-4346-b03f-8872ded1c0a6/738088/1544291159198/Add+Commits+to+A+Repo+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/950113cc-8d4b-4346-b03f-8872ded1c0a6/738088/1544291156876/Add+Commits+to+A+Repo+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 339085,
          "key": "c97e28fd-7fc6-435c-9953-4678b4728755",
          "title": "简介",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c97e28fd-7fc6-435c-9953-4678b4728755",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 338859,
              "key": "f84e8dd9-9445-412a-8c12-67b8e95680a7",
              "title": "Gitfinal L4 01 添加 commit - 简介",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "sLcOFQ4mGvo",
                "china_cdn_id": "sLcOFQ4mGvo.mp4"
              }
            }
          ]
        },
        {
          "id": 339086,
          "key": "85cd2f5e-a3a9-467f-9043-96d8b627787b",
          "title": "git add",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "85cd2f5e-a3a9-467f-9043-96d8b627787b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 338858,
              "key": "472d5167-ce9e-4838-bb1b-b63a4c48281b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 移至正确的项目\n          \n如果你一直跟着操作，那么现在你的计算机中，应该在两个目录下有 git 项目：\n          \n* new-git-project - 使用 `git init` 转换为 git 仓库的空目录\n          \n* course-git-blog-project - 使用 `git clone` 获得的现有博客项目\n        \n为了避免与已有的 commit 产生混淆，我们将向 new-git-project 仓库提交 commit。\n\n在终端上，确保使用 `cd` 命令转到 `new-git-project` 目录中。如果你没有 `new-git-project` 目录，现在创建一个。位于该目录中后，运行 `git init` 命令。如果你之前已经运行了 `git init`，没关系。多次运行 `git init` 不会导致任何问题，因为它只是重新初始化 Git 目录。\n     ",
              "instructor_notes": ""
            },
            {
              "id": 338860,
              "key": "cdcbff85-6406-4030-9c2c-3aa7f7d1dc9b",
              "title": "正确设置",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "cdcbff85-6406-4030-9c2c-3aa7f7d1dc9b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "我已经在终端上使用 `cd` 命令转到 `new-git-project` 目录中",
                "我已经运行 `git init` 创建了新的 git 仓库"
              ],
              "positive_feedback": "很棒！",
              "video_feedback": null,
              "description": "现在该确保我们的配置是一样的了："
            },
            {
              "id": 338861,
              "key": "2334d315-9ec4-4b88-a581-463c2f627551",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "你的终端应该如下图所示：",
              "instructor_notes": ""
            },
            {
              "id": 338862,
              "key": "eb679e04-a246-4c58-bd7c-0ab33282a732",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a384ae_ud123-l4-new-git-project/ud123-l4-new-git-project.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/eb679e04-a246-4c58-bd7c-0ab33282a732",
              "caption": "_位于 new-git-project 目录中的终端。_",
              "alt": "",
              "width": 2092,
              "height": 1174,
              "instructor_notes": null
            },
            {
              "id": 338863,
              "key": "c175bfbe-cef4-455f-8eeb-22c4659bfff2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 状态！状态！状态！\n\n          \n我已经多次提到，但是还是要提下，`git status` 命令在这节课将非常有用。你应该在任何一个其他 git 命令之前和之后运行 `git status` 命令。\n\n          \n我们立即运行该命令吧！",
              "instructor_notes": ""
            },
            {
              "id": 338864,
              "key": "a5241099-1c7f-4714-8edb-8b5e6f51824b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a384dc_ud123-l4-git-status/ud123-l4-git-status.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a5241099-1c7f-4714-8edb-8b5e6f51824b",
              "caption": "_终端显示了 `git status` 命令的输出结果。_",
              "alt": "",
              "width": 2122,
              "height": 1174,
              "instructor_notes": null
            },
            {
              "id": 338865,
              "key": "98c11094-7d9d-496f-af54-0b549ffbf578",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## git status 输出总结\n\n          \n以下是输出：\n\n```bash\nOn branch master\n\nInitial commit\n\nnothing to commit (create/copy files and use \"git add\" to track)\n```\n\n          \n注意最后一行 – `nothing to commit (create/copy files and use \"git add\" to track)`。注意到它推荐使用的 `git add` 命令了吗？这很有帮助！`git status` 的输出结果将给出下一步应该怎么做的建议或提示。\n\n          \n我们根据反馈的建议操作，并创建一些文件。",
              "instructor_notes": ""
            },
            {
              "id": 338866,
              "key": "7cdf1792-f445-49f3-851f-36e1de15fbff",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "##   创建 HTML 文件\n\n          \n首先，创建一个叫做 `index.html` 的文件，并添加一些起始代码：\n\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>Blog Project</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <meta name=\"description\" content=\"\">\n    <link rel=\"stylesheet\" href=\"css/app.css\">\n</head>\n<body>\n\n    <script src=\"js/app.js\"></script>\n</body>\n</html>\n```\n\n注意，代码引用了 CSS 文件和 JavaScript 文件。\n\n          \n现在创建这些 CSS 和 JavaScript 文件。你可以让这两个文件留空。稍后我们将向文件中添加内容。",
              "instructor_notes": ""
            },
            {
              "id": 338867,
              "key": "c83b76a7-f7a7-4434-a463-e62c7ff3840c",
              "title": "验证项目设置",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c83b76a7-f7a7-4434-a463-e62c7ff3840c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "我已经创建了 `index.html` 并加入了上述起始代码（并保存了文件）",
                "我已经创建了 `css` 文件夹并在其中创建了 `app.css`",
                "我已经创建了 `js` 文件夹并在其中创建了 `app.js`"
              ],
              "positive_feedback": "很棒！",
              "video_feedback": null,
              "description": "在继续之前，确保我们的设置相同。完成后请清点一下这些状态进行确认："
            },
            {
              "id": 338868,
              "key": "60e0ed30-db8d-437e-ae1d-7f09a0b99990",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 快速检查 git 状态\n\n          \n我们刚刚通过添加了文件和内容对仓库进行了几个更改。现在该快速检查下 git 的状态了：\n\n```bash\n          $ git status\n```\n\n          \n我的终端显示了以下内容：",
              "instructor_notes": ""
            },
            {
              "id": 338869,
              "key": "e0549d70-d19e-4b9f-b8b6-41a2e7b0d5b3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a38587_ud123-l4-git-status-with-untracked/ud123-l4-git-status-with-untracked.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e0549d70-d19e-4b9f-b8b6-41a2e7b0d5b3",
              "caption": "_终端在新加入的\"Untracked files\"部分显示了 index.html 文件，以及 css 与 js 文件夹。_",
              "alt": "",
              "width": 2400,
              "height": 1510,
              "instructor_notes": null
            },
            {
              "id": 338870,
              "key": "dbe8add5-c974-425d-9d0e-bc7133cf7e97",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 整体回顾\n\n          \n很酷吧？我们尚未对 git 执行任何特殊操作，但是它已经在观察这个目录（因为它是 git 项目），并且知道我们创建了几个新的文件。`git status` 命令的输出同样十分简洁地告诉我们 git 没有跟踪这些文件。\n\n         \n我们快速回顾一下正在进行的操作以及将要执行的操作：\n          \n* 我们新建了几个希望 git 开始跟踪的文件\n          \n* 为了让 git 能跟踪文件，需要将该文件提交到仓库中\n          \n* 要提交文件，需要将该文件放入暂存区\n          \n* 可以使用 `git add` 命令将文件从工作目录移到暂存区\n          \n* 工作目录中目前有三个未跟踪文件\n              \n* `index.html`\n              \n* `css` 目录下的 `app.css`\n              \n* `js` 目录下的 `app.js`\n\n          \n要将所有文件提交到仓库中，首先需要将这些文件从工作目录移到暂存区。我们将使用 `git add` 命令将这三个文件移到暂存区。\n     ",
              "instructor_notes": ""
            },
            {
              "id": 338871,
              "key": "e85d8a4f-a534-4a7d-853e-d45e3b1f1dd5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58ade4ac_ud123-l4-git-add-to-staging-recap/ud123-l4-git-add-to-staging-recap.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e85d8a4f-a534-4a7d-853e-d45e3b1f1dd5",
              "caption": "_未跟踪的 HTML、CSS 和 JavaScript 文件从工作目录添加到了暂存区。_",
              "alt": "",
              "width": 640,
              "height": 360,
              "instructor_notes": null
            },
            {
              "id": 338872,
              "key": "a252ccab-449b-4c7f-8312-924a932dd7b8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 暂存文件\n\n          \n是时候行动了！在终端上运行以下命令，使用 `git add` 将 `index.html` 添加到暂存区：\n\n```bash\n$ git add index.html\n```\n\n          \n注意：我们仅添加了 `index.html` 文件。稍后我们将添加 CSS 和 JavaScript 文件。",
              "instructor_notes": ""
            },
            {
              "id": 338873,
              "key": "86c7c16c-4ed3-4702-9405-352754f008e0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a386a6_ud123-l4-git-add/ud123-l4-git-add.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/86c7c16c-4ed3-4702-9405-352754f008e0",
              "caption": "_终端正在输入命令\"git add index.html\"以将该文件添加到暂存区。_",
              "alt": "",
              "width": 1228,
              "height": 654,
              "instructor_notes": null
            },
            {
              "id": 338874,
              "key": "8c0eb9a1-1fe5-4480-8fc8-ad86ce36eabf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "运行 `git add` 命令没有任何输出（同样也没有错误）。如何让 git 告诉我们它执行了什么操作以及添加的 `index.html` 文件发生了什么呢？`git status` 就可以告诉我们这些信息。你可能对我一直在强调 `git status` 命令的重要性开始感到厌烦了，但是它是非常重要的命令，特别是在你对版本控制/命令行工具不是非常熟练的时期，更要注重该命令。\n\n          \n我们来看看项目的状态：\n\n ```bash\n $ git status\n ```\n这是我获得的输出结果：",
              "instructor_notes": ""
            },
            {
              "id": 338875,
              "key": "5cc4793f-b50c-48b7-9961-74b9f87c58fb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a38755_ud123-l4-git-status-after-git-add/ud123-l4-git-status-after-git-add.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5cc4793f-b50c-48b7-9961-74b9f87c58fb",
              "caption": "_终端运行 `git status` 命令的结果如下。它显示 index.html 现在位于\"Changes to be committed\"分类下。_",
              "alt": "",
              "width": 2064,
              "height": 1510,
              "instructor_notes": null
            },
            {
              "id": 338876,
              "key": "a4572e82-3183-469c-ba4e-5146efc22dab",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Changes to be committed\n      \n输出结果中现在出现了全新的区域：\"Changes to be committed\"区域！这一新的\"Changes to be committed\"区域显示了位于暂存区的文件！目前只显示了 `index.html` 文件，因此暂存区只有这个文件。继续这一思路，如果我们现在提交 commit，则只有 index.html 文件会被提交。\n    ",
              "instructor_notes": ""
            },
            {
              "id": 338877,
              "key": "5b0009ad-9fa3-4b6f-b660-362433918777",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> 提示：你注意到\"Changes to be committed\"下方的帮助文本了吗？它提示 `(use \"git rm --cached <file>...\" to unstage)`，也就是当你不小心运行了 `git add` 并提供了错误文件，它会提示你应该怎么操作。\n\n          \n> 顺便提下，`git rm --cached` 与 shell 的 `rm` 命令不同。`git rm --cached` 不会破坏任何属于你的文件，它只是从暂存区删掉了文件。\n\n          \n> 此外，帮助文本中出现了\"unstage\"（撤消暂存）字眼。将文件从工作目录移到暂存区叫做\"staging\"（暂存）。如果已移动文件，则叫做\"staged\"（已暂存）。从暂存区将文件移回工作目录将\"unstage\"（撤消暂存）。如果你阅读的文档中提示“stage the following files”，则表明你应该使用 `git add` 命令。\n",
              "instructor_notes": ""
            },
            {
              "id": 338878,
              "key": "a499422b-df34-4fc0-9a55-6d6bc3dd6aeb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "    \n## 暂存剩余的文件\n\n          \n`index.html` 文件已暂存。我们再暂存另外两个文件。现在我们可以运行以下命令：\n\n```bash\n$ git add css/app.css js/app.js\n```\n\n         \n但是要输入的内容好多啊。我们可以使用一个特殊的命令行字符：\n\n          \n### 句点 `.`\n          \n句点指代当前目录，可以用来表示所有文件和目录（包括所有嵌套文件和目录！）。\n\n          ```bash\n          $ git add css/app.css js/app.js\n          # 等同于\n          $ git add .\n          ```\n          \n唯一要注意的是，你可能会不小心包含多余的文件。现在，我们希望同时暂存 `css/app.css` 和 `js/app.js`，因此运行该命令没问题。现在假设你向 `img` 目录添加了一些图片，但是暂时不想暂存这些图片。运行 `git add .` 将暂存这些图片。如果你暂存了不想暂存的文件，`git status` 会告诉你撤消暂存需要用到的命令。\n\n          \n## 暂存剩余的文件\n          \n我们使用以下简写命令暂存剩余的文件：\n\n```bash\n$ git add .\n```\n\n          \n然后运行 `git status`：",
              "instructor_notes": ""
            },
            {
              "id": 338879,
              "key": "ef5c6191-43a6-4c34-93d0-49d639235ccb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a38858_ud123-l4-git-status-all-files/ud123-l4-git-status-all-files.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/ef5c6191-43a6-4c34-93d0-49d639235ccb",
              "caption": "_终端显示 index.html、css/app.css 和 js/app.js 已被暂存。_",
              "alt": "",
              "width": 1812,
              "height": 1230,
              "instructor_notes": null
            },
            {
              "id": 338880,
              "key": "3abe780a-231e-4632-b28f-80c2d16dee61",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## git add 小结\n\n          \n`git add` 命令用于将文件从工作目录移到暂存区。\n\n```bash\n$ git add <file1> <file2> … <fileN>\n```\n\n          \n此命令：\n\n          \n* 可接受多个文件名（用空格分隔）\n          \n* 此外，可以使用句点 `.` 来代替文件列表，告诉 git 添加当前目录至暂存区（以及所有嵌套文件）",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339087,
          "key": "95564c00-5060-45e7-aa24-e26fb9039f90",
          "title": "git commit",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "95564c00-5060-45e7-aa24-e26fb9039f90",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 338881,
              "key": "636f709d-2359-4938-a881-cbe7b214845e",
              "title": "快速检测",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "636f709d-2359-4938-a881-cbe7b214845e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "`index.html` 文件存在，并包含起始代码",
                "`app.css` 文件存在于 `css` 文件夹中",
                "`app.js` 文件存在于 `js` 文件夹中",
                "所有三个文件都已暂存"
              ],
              "positive_feedback": "很棒！",
              "video_feedback": null,
              "description": "我们即将提交首个 commit，先进行以下验证以确保我们的项目设置相同："
            },
            {
              "id": 338882,
              "key": "97a3f8a1-7f78-4c1c-b14e-734d38ba447b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " ## 最后一次 git 状态检查\n\n         \n 如果你尚未向工作目录添加任何文件或修改任何现有文件，则不会有任何被修改内容，但是为了进行确认，我们需要在提交 commit 之前再次快速运行下 `git status`，以确保项目是我们预期的状态。\n",
              "instructor_notes": ""
            },
            {
              "id": 338883,
              "key": "bb91e468-2dcd-44da-9d23-befe9286dc90",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a38858_ud123-l4-git-status-all-files/ud123-l4-git-status-all-files.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/bb91e468-2dcd-44da-9d23-befe9286dc90",
              "caption": "_终端显示 index.html、css/app.css 和 js/app.js 已被暂存，并准备好被提交。_",
              "alt": "",
              "width": 1812,
              "height": 1230,
              "instructor_notes": null
            },
            {
              "id": 338884,
              "key": "02606695-24d9-42a3-a7d6-727d1826146e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 提交 Commit\n\n          \n我们开始提交吧！\n\n       \n要在 git 中提交 commit，你需要使用 `git commit` 命令，但是先别运行这条命令。运行这条命令将会打开你在第一节课配置的代码编辑器。如果你尚未运行以下命令：\n\n```bash\n$ git config --global core.editor <your-editor's-config-went-here>\n```\n\n         \n回到 git 配置步骤并让 git 使用你所选的编辑器。\n\n          \n如果你尚未执行这一步骤并且已经运行 `git commit`，那么 git 可能会默认使用 Vim 编辑器。Vim 很受 Unix 或 Linux 系统用户的欢迎，但是对新用户来说，并不太好用。这门课程肯定不推荐使用该编辑器。请参阅这篇关于[如何退出 Vim](https://discussions.udacity.com/t/escaping-from-vim-in-the-command-line/235917) 的帖子，了解如何回到普通的命令提示符界面。\n\n          \n如果你配置了编辑器，那么可以使用 `git commit` 命令提交 commit：\n\n```bash\n$ git commit\n```\n\n          \n注意，你的编辑器应该会打开并且会出现以下界面：",
              "instructor_notes": ""
            },
            {
              "id": 338885,
              "key": "6890ce36-79b4-40b1-93a5-48049165d5f2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a38a0b_ud123-l4-git-commit-editor/ud123-l4-git-commit-editor.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6890ce36-79b4-40b1-93a5-48049165d5f2",
              "caption": "_代码编辑器显示默认的 commit 消息内容，并等待提供提交说明。_",
              "alt": "",
              "width": 2786,
              "height": 1592,
              "instructor_notes": null
            },
            {
              "id": 338886,
              "key": "ac1179fd-a717-4e48-be4a-a8352da30a7f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 终端冻结了\n      \n如果你快速切回终端，会看到终端冻结了，并等待你在弹出的代码编辑器完成编辑。不用担心。当我们向代码编辑器添加必要的内容，并最终关闭代码编辑器窗口后，终端将不再冻结，并回到正常状况。\n",
              "instructor_notes": ""
            },
            {
              "id": 338887,
              "key": "05f90ef4-c48a-4820-8cff-b6af5c180276",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a38a39_ud123-l4-git-commit-terminal-hangs/ud123-l4-git-commit-terminal-hangs.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/05f90ef4-c48a-4820-8cff-b6af5c180276",
              "caption": "_终端显示 `git commit`，但是似乎被挂起并在等待中。_",
              "alt": "",
              "width": 1812,
              "height": 1230,
              "instructor_notes": null
            },
            {
              "id": 338888,
              "key": "39b9bce3-64d0-4789-86c8-e223f0d23217",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 代码编辑器 Commit 消息解释说明\n\n回到代码编辑器。我的编辑器显示了以下内容：\n\n```bash\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# On branch master\n#\n# Initial commit\n#\n# Changes to be committed:\n# new file:   css/app.css\n# new file:   index.html\n# new file:   js/app.js\n#\n```\n\n第一段精确地告诉了我们需要执行的操作 - 我们需要为该 commit 提供一条消息。此外 ，任何以字符 `#` 开头的行将被忽略。在后面还提示：这将是初始 commit。最后，给出了将提交 commit 的文件列表。\n\n因为这是存储库的第一个 commit，我们将使用 commit 消息 \"Initial commit\"。文本 \"Initial commit\" 并不特殊，只是第一个 commit 的常用消息。如果你想使用其他消息，完全可以！\n\n在代码编辑器的第一行输出 commit 消息：",
              "instructor_notes": ""
            },
            {
              "id": 338889,
              "key": "551511e6-b9c0-4846-8ad2-94038094637b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a38aab_ud123-l4-git-commit-initial-commit/ud123-l4-git-commit-initial-commit.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/551511e6-b9c0-4846-8ad2-94038094637b",
              "caption": "_在第一行输入了提交说明的代码编辑器。_",
              "alt": "",
              "width": 2786,
              "height": 1592,
              "instructor_notes": null
            },
            {
              "id": 338890,
              "key": "394f2a21-a2ec-4ba1-9707-7bd50d6a7d22",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 完成提交\n        \n现在保存文件并关闭编辑器窗口（只关闭面板/标签页还不够，你还需要关闭 `git commit` 命令打开的代码编辑器窗口）。\n          \n现在回到终端，你应该能看到类似于以下内容的界面：",
              "instructor_notes": ""
            },
            {
              "id": 338891,
              "key": "159ea814-3ac2-4364-af47-01289df4196d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a38ad8_ud123-l4-git-commit-finished/ud123-l4-git-commit-finished.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/159ea814-3ac2-4364-af47-01289df4196d",
              "caption": "_关闭代码编辑器后的终端。它显示了新 commit 的 SHA 以及关于该 commit 的信息，例如被添加的文件以及添加了多少行代码。_",
              "alt": "",
              "width": 1726,
              "height": 1230,
              "instructor_notes": null
            },
            {
              "id": 338892,
              "key": "1249b0ed-a6c8-4fc6-a357-33c76943a5ab",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 终于提交了第一个 commit，恭喜！\n\n你刚刚提交了第一个 commit - 哇！ 🙌🏼  有何感受？是不是有点虎头蛇尾的感觉。说实话，当我第一次提交 commit 时，我的感受就如同\n\n> “等等...就这样？只是把将要进行提交的文件添加到了暂存区，然后运行 'git commit'？”\n\n答案是 “是的”。是的，就这些内容。一开始，你会觉得版本控制是一个要克服的庞大障碍，然后才能成为真正的程序员/开发者/设计师等等。但是当你理解术语（我认为是最具挑战的部分）后，实际运用版本控制就不是那么可怕了。",
              "instructor_notes": ""
            },
            {
              "id": 338893,
              "key": "872ee194-e696-42f4-83b2-b78a5e3a4a8c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## 使用 `-m` 选项绕过编辑器\n\n          \n> 提示：如果你要编写的提交说明很简短，不想等打开代码编辑器后再输入信息，可以直接在命令行中使用 `-m` 选项传入信息：\n\n          \n> ```bash\n$ git commit -m \"Initial commit\"\n```\n\n          \n> 在上述示例中，文本`\"Initial commit\"`被作为提交说明信息。但是注意，不能为 commit 提供信息的描述（description），只能提供信息部分（message）。",
              "instructor_notes": ""
            },
            {
              "id": 338894,
              "key": "ef546837-787f-4573-8906-35a5b0124972",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 第二个 commit - 添加更改\n\n          \n我们已经短暂休息了一下，现在提交第二个 commit！将以下内容添加到 `index.html` 中的 `body` 标记中：\n\n```html\n<header>\n   <h1>Expedition</h1>\n</header>\n```\n\n          \n下一步是什么？没错，运行 `git status`！",
              "instructor_notes": ""
            },
            {
              "id": 338895,
              "key": "d31bec33-fc72-426f-b709-e341010b74e8",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a38bf1_ud123-l4-git-status-modified-files/ud123-l4-git-status-modified-files.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d31bec33-fc72-426f-b709-e341010b74e8",
              "caption": "_终端显示了 `git status` 命令的结果。它显示了\"Changes not staged for commit\"部分，其中包含修改后的\"index.html\"文件。_",
              "alt": "",
              "width": 2220,
              "height": 1230,
              "instructor_notes": null
            },
            {
              "id": 338896,
              "key": "838b6af1-580c-49d4-a681-4bef78d00a12",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": ">    提示：如果你运行了 `git status`，但是没有看到 `index.html` 已更改，确保文件已被保存。我经常在修改文件以后忘记保存文件！我觉得修改文件后是否记得保存是衡量真正的专业人士的标准。",
              "instructor_notes": ""
            },
            {
              "id": 338897,
              "key": "fe9c0d5c-3157-4693-a575-aea2ed88e7dc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 具有多个作用的 git add\n\n          \n我们修改了文件。git 看到该文件已被修改。到目前为止，一切正常。注意，要提交 commit，待提交的文件必须位于暂存区。要将文件从工作目录移到暂存区，我们应该使用哪个命令？答对了，是 `git add`！\n\n          \n我们使用 `git add` 向暂存区添加了新建的文件，同样的，我们也能使用同一命令将修改的文件暂存。\n\n          \n现在使用 `git add` 命令将文件移到暂存区，并使用 `git status` 验证文件是否位于暂存区。",
              "instructor_notes": ""
            },
            {
              "id": 338898,
              "key": "d89375e5-849a-462a-a7e6-177df294bbc5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 第二个 commit\n\n          \n现在我们的文件已经具有可以提交的更改，让我们提交第二个 commit 吧！使用 `git commit` 命令提交 commit，并添加提交说明 `Add header to blog`。\n\n          \n现在，你可能会问自己：“Richard 为何会这样书写提交说明？” 或 “何为好的提交说明？”。问的好，我们将在下一部分探讨这些问题！",
              "instructor_notes": ""
            },
            {
              "id": 338899,
              "key": "cfcde463-ce54-4f6c-a199-7a171c9ae9e4",
              "title": "会对文件进行 commit 吗？",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "cfcde463-ce54-4f6c-a199-7a171c9ae9e4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "假设你有一个个人博客，并且想要更改文章标题的颜色。\n* 你修改了 HTML 文件并为每个标题设定了一个类\n* 你修改了 CSS 文件，添加了新的类并为其设定了颜色\n* 你保存了所有文件\n* 你在终端运行了 `git commit`\n\n            \n用于输入提交说明的代码编辑器会打开吗？",
                "answers": [
                  {
                    "id": "a1487113380630",
                    "text": "是",
                    "is_correct": false
                  },
                  {
                    "id": "a1487113398908",
                    "text": "否",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 338900,
              "key": "f5bea4e9-d88f-4ebf-89c8-4fd131c1569c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## commit 中应该包含什么内容\n\n          \n我一直在告诉你要创建什么文件，提供需要要包含的内容，并告诉你何时应该进行 commit。但是你自己知道应该在 Commit 中包含什么内容，以及何时/多久进行 commit 吗？\n\n          \n**关键在于使每个 commit 都有其侧重点。**每个 commit 应该记录一项更改。这种说法可能比较主观（完全没问题），但是每个 commit 应该只对项目的一个方面做出更改。\n\n          \n这并不限制可以添加/删除多少行代码或添加/删除/修改多少个文件。假设你想更改侧栏，并向其中添加新的图片。你可能会：\n          \n* 向项目文件中添加新的图片\n          \n* 更改 HTML\n         \n* 添加/修改 CSS 以包含新图片\n\n          \n完全可以使用一个 commit 记录所有这些更改！\n         \n但是，一个 commit 不应包含不相关的更改，更改侧栏，然后重新描述脚注内容。这两项更改相互没有关系，不应包含在同一 commit 中。先进行一项更改，提交该更改，然后再进行第二项更改。这样的话，如果一个更改有 bug，你需要撤消该更改时，则不用同时撤消另一个更改。\n          \n我认为在判断应该在 commit 中包含什么内容时，最好的方法是思考下“如果该 commit 中的所有更改都清空了，会怎样？”。如果删除了某个 commit，应该只撤消一项更改。",
              "instructor_notes": ""
            },
            {
              "id": 338901,
              "key": "9799a70e-cbe3-44fe-9c4b-54e9be350dd7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> 别担心，commit 不会随机地被清除。        \n \n> 在后面的课程中，我们将学习使用 git 撤消 commit 中进行的更改，以及如何谨慎地手动删除最后提交的一个 commit。",
              "instructor_notes": ""
            },
            {
              "id": 338902,
              "key": "40fe3cce-61b4-4d64-bc63-9d73ede65a05",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## git commit 小结\n\n          \n`git commit` 命令会取出暂存区的文件并保存到仓库中。\n\n```bash\n$ git commit\n```\n\n          \n此命令：\n\n          \n* 将打开配置中指定的代码编辑器\n             \n* （请参阅第一节课中的 git 配置流程，了解如何配置编辑器）\n\n          \n在代码编辑器中：\n          \n* 必须提供提交说明\n          \n* 以 `#` 开头的行是注释，将不会被记录\n          \n* 添加提交说明后保存文件\n          \n* 关闭编辑器以进行提交\n\n          \n然后使用 `git log` 检查你刚刚提交的 commit！\n\n          \n### 深入研究\n          \n* [将文本编辑器与 git 相关联 - 英](https://help.github.com/articles/associating-text-editors-with-git/) GitHub 帮助文档\n          \n* 起步 - 初次运行 Git 前的配置 (git book)：[英](https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup) | [中](https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8C-Git-%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE) ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339088,
          "key": "0186fd0c-3929-4f0d-82bf-999ab24df61b",
          "title": "提交说明",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0186fd0c-3929-4f0d-82bf-999ab24df61b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 338904,
              "key": "7e790823-9da2-4a44-9022-e3770fbb6ebf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 良好的提交说明\n\n          \n我们来思考一个问题：\n\n          \n> 如何编写良好的提交说明？为何要编写好的提交说明？\n\n          \n问的好！花点时间编写良好的提交说明，再怎么强调这一点都不为过。\n\n          \n何为好的提交说明呢？问的好，很多人发表过关于这一问题的文章，比如： [如何编写 Git Commit Message - 英](https://chris.beams.io/posts/git-commit/)|[译文](https://www.jianshu.com/p/0117334c75fc) 、[Commit message 和 Change log 编写指南](http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html)。在编写好的提交说明时，需要注意以下几个事项：\n\n          \n**建议**\n          \n* 消息篇幅简短（少于 60 个字符）\n          \n* 解释提交的作用（不是如何更改或为何更改！）\n\n          \n**禁忌**\n          \n* 请勿解释为何做出了这些更改（下文会深入讲解这一点）\n          \n* 请勿解释如何进行了更改（这是 `git log -p` 的目的！）\n          \n* 请勿使用单词\"and\"\n              \n* 如果你必须使用 \"and\"，则你的提交说明可能进行了太多的更改，将这些更改拆分为独立的 commit\n              \n* 例如 \"make the background color pink _and_ increase the size of the sidebar\"\n\n          \n在编写提交说明时，我喜欢用以下短语造句：\"This commit will…\"。你可以补充完整该句子并作为提交说明使用。\n\n          \n最重要的是，在编写提交说明时**保持一致性**！",
              "instructor_notes": ""
            },
            {
              "id": 338903,
              "key": "14bfb55f-b1fb-4927-8f23-88b7fc2d88af",
              "title": "这是一条好的提交说明吗？",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "14bfb55f-b1fb-4927-8f23-88b7fc2d88af",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "根据如何书写好的提交说明的相关指南，判断以下提交说明是否符合规范？\n           \n\"Update the footer to copyright information\"",
                "answers": [
                  {
                    "id": "a1487113793808",
                    "text": "是",
                    "is_correct": true
                  },
                  {
                    "id": "a1487113803413",
                    "text": "否",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 338905,
              "key": "f57b9b57-6518-4a4c-8422-4e0965c94cd4",
              "title": "这是一条好的提交说明吗？2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f57b9b57-6518-4a4c-8422-4e0965c94cd4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "下面的提交说明符合规范吗？\n\n\"Add a <p> tag to the body\"",
                "answers": [
                  {
                    "id": "a1487113839649",
                    "text": "是",
                    "is_correct": false
                  },
                  {
                    "id": "a1487113848784",
                    "text": "否",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 338906,
              "key": "54bf050b-fd83-47c3-8ed9-cdb9a1732d28",
              "title": "这是一条好的提交说明吗？3",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "54bf050b-fd83-47c3-8ed9-cdb9a1732d28",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "下面的提交说明符合规范吗？\n\n\"Add changes to app.js\"",
                "answers": [
                  {
                    "id": "a1487113935491",
                    "text": "是",
                    "is_correct": false
                  },
                  {
                    "id": "a1487113941609",
                    "text": "否",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 338907,
              "key": "e2960abb-a9a4-4e20-9b40-926e00f49bdd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " ## 解释原因\n          \n如果你需要解释为何进行了提交，也可以！\n\n          \n在编写提交说明时，第一行是消息本身。消息之后空一行，然后输入正文或说明，包括关于为何需要该 commit 的原因详情（例如 URL 链接）。\n\n          \n以下是编辑提交说明时屏幕可能显示的内容：",
              "instructor_notes": ""
            },
            {
              "id": 338908,
              "key": "083d153f-78b8-4394-b3eb-847bd44bc4b4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a38f2f_ud123-l4-git-commit-details-section/ud123-l4-git-commit-details-section.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/083d153f-78b8-4394-b3eb-847bd44bc4b4",
              "caption": "_代码编辑器显示提交说明编辑窗口。输入了消息，接着空了一行，然后是对说明消息的描述。_",
              "alt": "",
              "width": 2740,
              "height": 1758,
              "instructor_notes": null
            },
            {
              "id": 338909,
              "key": "a522b2ca-1ddb-47b8-83ae-ac9639d03355",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n提交说明的详情描述部分包含在 `git log` 中。要查看带有详情描述的提交说明，请参阅博客项目仓库并查看 commit `8a11b3f`。\n\n          \n但是 `git log --oneline` 中仅包含了说明（第一行）！",
              "instructor_notes": ""
            },
            {
              "id": 338910,
              "key": "1a1b69c0-89e3-43f3-9119-657942c21fc4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " ## 优达学城的提交样式要求\n          \n正如我之前提到的，编写提交说明的方式有多种。如果你属于某个团队，他们可能已经制定了提交说明编写方式。在优达学城，我们也有自己的提交说明标准。你可以参阅我们的 [git 提交说明样式指南](https://github.com/udacity/frontend-nanodegree-styleguide-zh/blob/master/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%BA%B3%E7%B1%B3%E5%AD%A6%E4%BD%8D%E6%A0%B7%E5%BC%8F%E6%8C%87%E5%8D%97%20-%20Git.md)。\n\n          \n如果你没有选择某种提交说明样式，可以使用我们的样式。但是如果你正在处理现有的项目，则使用他们的现有样式。与实际团队保持一致比与我们保持一致更为重要！",
              "instructor_notes": ""
            },
            {
              "id": 338911,
              "key": "43b164a5-8a1d-4f6a-87cd-a6ad37fccff9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 下一个是 git diff！\n\n          \n在下一部分，我们将学习一个新的工具（具有相似的输出！）。此工具可以在进行提交之前告诉我们已对文件进行了什么样的更改！",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339089,
          "key": "60adab01-79c2-4bed-8ffc-384ad22a9e30",
          "title": "git diff",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "60adab01-79c2-4bed-8ffc-384ad22a9e30",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 338912,
              "key": "5d5452f2-1548-4cf7-aebb-fce6c20fe408",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " ## 为何需要该命令\n\n          \n你可能会像我一样，在晚上开始构建项目的下个功能，但是在完成之前就去睡觉了。也就是说，当我第二天开始工作的时候，有一些没有提交的更改。这很正常，因为我还没有完成新的功能，但是我不记得自上次 commit 起我到底完成了哪些代码。`git status` 将告诉我们哪些文件更改了，但是不会显示到底是什么样的更改。\n\n          \n`git diff` 命令可以用来查找此类信息！",
              "instructor_notes": ""
            },
            {
              "id": 338913,
              "key": "24cf4868-c4e0-4db0-a665-c2ed2c46b90f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `git diff`\n\n          \nThe `git diff` 命令可以用来查看已被加入但是尚未提交的更改。\n\n```bash\n$ git diff\n```\n\n          \n要查看 `git diff` 的实际运行效果，我们需要一些未经提交的更改！在 `index.html` 中，我们重新组织标题的措辞。将标题从\"Expedition\"改为\"Adventure\"。保存文件，然后在终端上运行 `git diff`。\n\n          \n你应该会看到以下结果：",
              "instructor_notes": ""
            },
            {
              "id": 338914,
              "key": "1a699aaa-b309-4a02-a4a1-5a67de6f61f7",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a3901f_ud123-l4-git-diff/ud123-l4-git-diff.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1a699aaa-b309-4a02-a4a1-5a67de6f61f7",
              "caption": "_终端显示了 `git diff` 命令的输出结果。_",
              "alt": "",
              "width": 2094,
              "height": 1280,
              "instructor_notes": null
            },
            {
              "id": 338915,
              "key": "334da9e2-fca0-46f3-9986-d72a7a48f62d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "哇，看起来是不是很熟悉啊？和运行 `git log -p` 的结果一样！告诉你个秘密，`git log -p` 其实就是在后台使用了 `git diff`。所以你实际上已经知道如何阅读 `git diff` 的输出结果！\n\n          \n如果你不知道每个部分都是什么内容，请参阅上节课中带注解的\"git log -p\"输出结果。",
              "instructor_notes": ""
            },
            {
              "id": 338916,
              "key": "451dd827-a9ee-4e85-8c02-a481a9516af1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## git diff 小结\n          \n总结下，`git diff` 命令用来查看已经执行但是尚未 commit 的更改：\n\n```bash\n$ git diff\n```\n       \n此命令会显示：\n\n          \n* 已经修改的文件\n         \n* 添加/删除的行所在的位置\n          \n* 执行的实际更改\n\n          \n### 深入研究\n          \n* [git diff](https://git-scm.com/docs/git-diff) git 文档 (**英**)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339090,
          "key": "d4275710-06eb-431c-bec6-13a202f1dfbb",
          "title": "让 git 忽略某些文件",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d4275710-06eb-431c-bec6-13a202f1dfbb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 338917,
              "key": "93fada20-d94d-4137-83b5-9cc8237788b6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " ## 为何要忽略文件\n\n          \n还记得在几个章节之前学习的 `git add` 吗？我们可以使用一个特殊的字符来表示当前目录和所有子目录，而不用一个个地添加文件。还记得是什么字符吗？\n\n          \n没错，是句点 (`.`)！\n\n          \n### 问题\n          \n假设你向项目所在目录添加了一个 Word 文档等文件，但是不希望将该文件添加到仓库中。git 会看到这个新文件，所以在你运行 `git status` 时，它将显示在文件列表中。",
              "instructor_notes": ""
            },
            {
              "id": 338918,
              "key": "e7b3dd79-fd1f-4754-a717-46464d4075c8",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a3936f_ud123-l4-git-ignore-word-doc/ud123-l4-git-ignore-word-doc.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e7b3dd79-fd1f-4754-a717-46464d4075c8",
              "caption": "_终端显示了 `git status` 命令的输出结果。git 的\"Untracked files\"部分显示了新的 Word 文档。_",
              "alt": "",
              "width": 2272,
              "height": 1280,
              "instructor_notes": null
            },
            {
              "id": 338919,
              "key": "5f548593-46f1-4947-a98a-15bb261a1bcf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "在项目中包含此文件存在的潜在问题是，因为 `git add .` 会添加所有文件，因此该 Word 文档可能会不小心 commit 到仓库。",
              "instructor_notes": ""
            },
            {
              "id": 338920,
              "key": "cdc3b9bc-fb03-4b0c-bb91-08b4ea59136c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## gitignore\n\n          \n如果你想将某个文件保留在项目的目录结构中，但是确保它不会意外地提交到项目中，可以使用名称特殊的文件 `.gitignore`（注意文件名开头的点，很重要！）。将此文件添加到 `new-git-project`项目根目录。你只需列出希望 git ignore（忽略，不跟踪）的文件名，git 将忽略这些文件。\n\n          \n我们用\"project.docx\"文件试一下。将以下行添加到 `.gitignore` 文件中：\n\n```bash\nproject.docx\n```\n\n          \n现在运行 `git status` 并查看输出结果：",
              "instructor_notes": ""
            },
            {
              "id": 338921,
              "key": "c06bf34c-6a58-4ed3-978a-7c7d5e9a1c78",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a39121_ud123-l4-git-gitignore/ud123-l4-git-gitignore.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c06bf34c-6a58-4ed3-978a-7c7d5e9a1c78",
              "caption": "_终端显示了 `git status` 的输出结果。Word 文档已不再列为未跟踪文件。但是列出了新的\".gitignore\"文件。_",
              "alt": "",
              "width": 2272,
              "height": 1280,
              "instructor_notes": null
            },
            {
              "id": 338922,
              "key": "935be67c-3f9f-427e-aa6c-6e3be2e0a2b7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "git 知道查看名称为 `.gitignore` 的文件的内容。因为它在其中看到\"project.docx\"，所以忽略了该文件，并且没有在 `git status` 的输出结果中显示该文件。",
              "instructor_notes": ""
            },
            {
              "id": 338923,
              "key": "4d7db4de-8021-48d6-bc86-a8377014777e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 通配符速成课程\n\n          \n假设你向项目中添加了 50 个图片，但是希望 git 忽略所有这些图片。这样的话，是否需要将每个文件名都列在 `.gitignore` 文件中呢？当然不用了，要不然太可怕了！相反，你可以采用一个叫做 **通配符([英](https://en.wikipedia.org/wiki/Glob_(programming)|[中](https://baike.baidu.com/item/%E9%80%9A%E9%85%8D%E7%AC%A6/92991?fr=aladdin))** 的概念。\n\n          \n通配符允许你使用特殊的字符来表示某些格式/字符。在 `.gitignore` 文件中，你可以使用：\n* 空白行作为空格\n* `#` - 将行标记为注释\n* `*` - 与 0 个或多个字符匹配\n* `?` - 与 1 个字符匹配\n* `[abc]` - 与 a、b 或 c 匹配\n* `**` - 与嵌套目录匹配 - `a/**/z` 与以下项匹配\n    * a/z\n    * a/b/z\n    * a/b/c/z\n\n          \n因此如果所有 50 个图片都是 JPEG 图片，并且位于\"samples\"文件夹中，那么我们可以向 `.gitignore` 中添加以下行，使 git 忽略所有这 50 个图片。\n\n```bash\nsamples/*.jpg\n```",
              "instructor_notes": ""
            },
            {
              "id": 338924,
              "key": "22075c4b-141c-4b3b-a388-709967aa1242",
              "title": "哪些文件将被忽略？",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "22075c4b-141c-4b3b-a388-709967aa1242",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "如果在 `.gitignore` 文件中输入 `*.png`，以下哪些文件将被忽略？",
                "answers": [
                  {
                    "id": "a1487114697919",
                    "text": "ocean.jpg",
                    "is_correct": false
                  },
                  {
                    "id": "a1487114706389",
                    "text": "trees.png",
                    "is_correct": true
                  },
                  {
                    "id": "a1487114706928",
                    "text": "png-format.pdf",
                    "is_correct": false
                  },
                  {
                    "id": "a1487114707413",
                    "text": "not-a-png.jpeg",
                    "is_correct": false
                  },
                  {
                    "id": "a1487114733254",
                    "text": "bg-pattern.png",
                    "is_correct": true
                  },
                  {
                    "id": "a1487114733827",
                    "text": "logo.gif",
                    "is_correct": false
                  },
                  {
                    "id": "a1487114747731",
                    "text": "LOUDFILE.PNG",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 338925,
              "key": "d4f08f01-3f4f-4de2-8ed6-a243783482cc",
              "title": "这个字符的作用是什么？",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d4f08f01-3f4f-4de2-8ed6-a243783482cc",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "如果你让 git 忽略\"be?rs”，那么会忽略下面的哪些文件名？",
                "answers": [
                  {
                    "id": "a1487114875523",
                    "text": "bears",
                    "is_correct": true
                  },
                  {
                    "id": "a1487114901980",
                    "text": "beavers",
                    "is_correct": false
                  },
                  {
                    "id": "a1487114902578",
                    "text": "BeArS",
                    "is_correct": false
                  },
                  {
                    "id": "a1487114903061",
                    "text": "beers",
                    "is_correct": true
                  },
                  {
                    "id": "a1487114918576",
                    "text": "boars",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 338926,
              "key": "400b8875-dcae-4105-b479-bccd3916847f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## gitignore 小结\n\n          \n总结下，`.gitignore` 文件用来告诉 git 不应跟踪的文件。该文件应该放在 `.git` 目录所在的目录。\n\n          \n### 深入研究\n\n          \n* [忽略文件 - 英](https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository#Ignoring-Files)|[中](https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%AE%B0%E5%BD%95%E6%AF%8F%E6%AC%A1%E6%9B%B4%E6%96%B0%E5%88%B0%E4%BB%93%E5%BA%93) git 图书\n          \n* [gitignore - 英](https://git-scm.com/docs/gitignore#_pattern_format) git 文档\n          \n* [忽略文件 - 英](https://help.github.com/articles/ignoring-files/) GitHub 文档\n          \n* [gitignore.io](https://www.gitignore.io/)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339091,
          "key": "bc28a6df-9181-44cc-b2ff-c0e4afe71130",
          "title": "总结",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bc28a6df-9181-44cc-b2ff-c0e4afe71130",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 338927,
              "key": "d4318258-db47-4e07-b864-e89461518c07",
              "title": "添加 commit - 总结",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "5eyvsMvAPYs",
                "china_cdn_id": "5eyvsMvAPYs.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}