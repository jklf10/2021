{
  "data": {
    "lesson": {
      "id": 869733,
      "key": "59288694-18d7-477e-948a-014fd2354293",
      "title": "创建仓库",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "zh-cn",
      "summary": "",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/59288694-18d7-477e-948a-014fd2354293/738089/1544291366060/Create+a+Git+Repo+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/59288694-18d7-477e-948a-014fd2354293/738089/1544291363859/Create+a+Git+Repo+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 339072,
          "key": "7f6f1abe-43b3-4af1-9ca0-a7414ff3120f",
          "title": "简介",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7f6f1abe-43b3-4af1-9ca0-a7414ff3120f",
            "completed_at": "2019-05-07T07:10:25.576Z",
            "last_viewed_at": "2019-05-07T07:10:25.458Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 338758,
              "key": "526463fe-194b-43c1-9ceb-7b823342f89c",
              "title": "新建仓库 - 简介",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "KT163BkqIeg",
                "china_cdn_id": "KT163BkqIeg.mp4"
              }
            }
          ]
        },
        {
          "id": 339073,
          "key": "fa8f761a-d0a2-4be1-a5b9-60116ea4ecd1",
          "title": "从头创建仓库",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fa8f761a-d0a2-4be1-a5b9-60116ea4ecd1",
            "completed_at": "2019-05-07T07:14:26.015Z",
            "last_viewed_at": "2019-05-07T07:14:25.882Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 338760,
              "key": "66159b9c-101e-4e78-8243-6c8e27bce7ac",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "在对 Git 仓库进行 commit 或执行任何其他操作之前，需要一个实际存在的仓库。要使用 Git 新建一个仓库，我们将使用 `git init` 命令。\n         \n`init` 子命令是\"initialize\"（初始化）的简称，这个命令很有用，因为它将进行所有仓库初始设置。稍后我们将了解它的作用。",
              "instructor_notes": ""
            },
            {
              "id": 338759,
              "key": "a0213f43-0555-4c08-b046-48a7864cf51d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ## 所需的命令\n          \n> 注意！我们将在这节课使用以下终端命令：\n   * `ls` - 用来列出文件和目录\n   * `mkdir` - 用来新建目录\n   * `cd` - 用来更改目录\n   * `rm` - 用来删除文件和目录\n          \n> \n          \n> 如果你不知道如何使用它们，请参阅我们的 [Linux 命令行基础](https://www.udacity.com/course/linux-command-line-basics--ud595) 课程！\n          \n> \n          \n> 我们还会涉及的一个概念是当前目录，即你的 shell 正在查看的目录。使用 cd 可以更改工作目录，使用 `ls`（单独使用）会列出工作目录下的文件。如果你忘记 shell 的当前工作目录，可以使用 `pwd` 命令（表示 print working directory 输出工作目录）输出该目录的名称。\n       ",
              "instructor_notes": ""
            },
            {
              "id": 338761,
              "key": "922f0d1a-dc7e-43e8-bf18-83da51c7e849",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 创建课程目录\n      \n我们将为本课程新建一个项目。因为我们都是专业人士，因此我们希望我们的项目具有条理性。如果你已经在计算机上有一个放置所有项目的文件夹，则可以继续这么做。我会将所有的工作文件存储在目录 `udacity-git-course` 下。\n\n          \n如果你想跟着我一起操作：\n         \n* 创建一个目录，叫做 `udacity-git-course`\n          \n* 在该目录中，创建另一个目录，叫做 `new-git-project`\n          \n* 使用 `cd` 命令移到 `new-git-project` 目录下\n\n          \n如果你和我一样喜欢复制粘贴，则在终端上运行以下命令：- `mkdir -p udacity-git-course/new-git-project && cd $_`（在运行此命令前，确保使用 `cd` 命令转到你想将这些文件存储到的位置。例如，如果你想将文件存储到桌面上，则使用 `cd` 转到桌面，然后再运行该命令。）\n\n          \n一切准备好后，你的终端应该位于 `new-git-project` 目录中，并看起来如下所示：",
              "instructor_notes": ""
            },
            {
              "id": 338762,
              "key": "0de30e40-bfd7-449d-b2a1-0e7810f6dbdf",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/588bb336_ud123-l2-new-git-project/ud123-l2-new-git-project.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0de30e40-bfd7-449d-b2a1-0e7810f6dbdf",
              "caption": "_位于 new-git-project 目录下的终端应用。_",
              "alt": "",
              "width": 2044,
              "height": 1160,
              "instructor_notes": null
            },
            {
              "id": 338763,
              "key": "1118d0f3-b578-4ad4-b410-3443afcb83be",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## git init\n        \n很棒！我们已经准备好，并且可以开始使用 `git init` 命令了！\n       \n这是最简单的命令之一。你只需在终端上运行 `git init`。就这么多内容，立即试试吧！",
              "instructor_notes": ""
            },
            {
              "id": 338764,
              "key": "58292ea6-c844-4ca3-8747-60237fb42a3f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/588bb53d_ud123-l2-git-init/ud123-l2-git-init.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/58292ea6-c844-4ca3-8747-60237fb42a3f",
              "caption": "_终端显示 `git init` 命令正在运行。该命令会在当前目录下初始化生成一个空的 Git 仓库。_",
              "alt": "",
              "width": 940,
              "height": 358,
              "instructor_notes": null
            },
            {
              "id": 338765,
              "key": "1b14b1dc-87e9-4ec8-b6e7-4110eb613580",
              "title": "提示符更改？",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1b14b1dc-87e9-4ec8-b6e7-4110eb613580",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "运行 `git init` 了吗？如果没有，现在就运行吧，因为这道练习会用到该命令！\n           \n运行 `git init` 之后，应该会出现一段文字：\"Initialized empty Git repository in\"，后面是一个路径。问题是，提示符有任何改变吗？如果有改变，是什么？",
                "answers": [
                  {
                    "id": "a1485550964594",
                    "text": "是的，我看到单词 master 了。",
                    "is_correct": true
                  },
                  {
                    "id": "a1485550981096",
                    "text": "没有，看起来完全一样。",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 338766,
              "key": "33aa1a0d-5fd4-45a1-b53d-4e7952f5b4d6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " ## git init 命令的作用\n          \n运行 `git init` 命令会初始化 Git 跟踪所有内容会用到的所有必要文件和目录。所有这些文件都存储在叫做 `.git`（注意开头有个 `.`，表示在 Mac/Linux 上，它将是一个隐藏目录）的目录下。这个 `.git` 目录是一个库！Git 会将所有 commit 记录在这里，并跟踪所有内容！\n        \n我们来大致了解下 `.git` 目录下的内容。",
              "instructor_notes": ""
            },
            {
              "id": 338767,
              "key": "edb6e24a-7ce7-49ee-b0b7-fa80d345013e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> 警告：请勿直接修改 `.git` 目录下的任何文件。这是仓库的核心。如果你更改了文件名或文件内容，Git 可能就无法跟踪你保存在仓库中的文件，你可能会丢失很多内容！可以查看这些文件，但是请勿编辑或删除这些文件。\n",
              "instructor_notes": ""
            },
            {
              "id": 338768,
              "key": "7921efd7-f050-42e2-8a70-e4f909554c05",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/588bb68e_ud123-l2-.git-directory/ud123-l2-.git-directory.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7921efd7-f050-42e2-8a70-e4f909554c05",
              "caption": "_Mac 的 Finder 窗口正在显示“.git”隐藏目录中的内容。_",
              "alt": "",
              "width": 1750,
              "height": 1048,
              "instructor_notes": null
            },
            {
              "id": 338769,
              "key": "f70c884e-9967-47b9-a95e-6a2b7ff6f997",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## .git 目录内容\n\n          \n_我们将查看 `.git` 目录…对这门课程来说，该目录并不重要，因此不用记住任何内容，你可以在此处深入了解 Git 背后的工作原理。_\n\n          \n下面简要概述了 `.git` 目录下的各项内容：\n\n         \n * **config 文件** - 存储了所有与项目有关的配置设置。<br>\n            \n摘自于 [Git Book - 英](https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration) | [中文点此处](https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-%E9%85%8D%E7%BD%AE-Git)：<br>\n          \n>Git 会查看 Git 目录下你当前所使用仓库对应的配置文件（.git/config）中的配置值。这些值仅适用于当前仓库。\n\n            \n例如，假设你将 Git 全局配置为使用你的个人电子邮箱。如果你想针对某个项目使用你的工作邮箱，则此项更改会被添加到该文件中。 \n\n         \n * **description 文件** - 此文件仅用于 GitWeb 程序，因此可以忽略\n\n         \n * **hooks 目录** - 我们会在此处放置客户端或服务器端脚本，以便用来连接到 Git 的不同生命周期事件\n\n\n         \n * **info 目录** - 包含全局排除文件\n\n\n          \n* **objects 目录** - 此目录将存储我们提交的所有 commit\n\n\n          \n* **refs 目录** - 此目录存储了指向 commit 的指针（通常是“分支”和“标签”） \n\n          \n注意，除了 hooks 目录，你应该不会对这里的其他内容有太多的困扰。hooks 目录可以用来连接到 Git 工作流的不同部分或事件，但是在这门课程中，我们不会对此作过多介绍。\n\n          \n### 深入研究\n          \n* Git 内部原理 - 底层命令和高层命令 : [英](https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain) | [中](https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-%E5%BA%95%E5%B1%82%E5%91%BD%E4%BB%A4%E5%92%8C%E9%AB%98%E5%B1%82%E5%91%BD%E4%BB%A4)（进阶内容——请将此网址添加到书签中，并在以后查看）\n          \n* [自定义 Git - Git Hooks - 英](https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks) | [中](https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90)",
              "instructor_notes": ""
            },
            {
              "id": 338770,
              "key": "c38f152c-eeef-4e3c-9453-8b67bab7c18e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## git init 小结\n\n         \n 使用 `git init` 命令可以在当前目录下创建新的空仓库。\n\n          \n```bash\n$ git init\n          \n```\n\n          \n运行此命令可以创建隐藏 `.git` 目录。此 `.git` 目录是仓库的核心/存储中心。它存储了所有的配置文件和目录，以及所有的 commit。\n\n          \n###  实用链接\n          \n* [Git 基础 - 获取 Git 仓库 - 英](https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository#Initializing-a-Repository-in-an-Existing-Directory) | [中](https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%8E%B7%E5%8F%96-Git-%E4%BB%93%E5%BA%93)\n          \n* [git init 文档 - 英](https://git-scm.com/docs/git-init)\n          \n* [git init 教程 - 英](https://www.atlassian.com/git/tutorials/setting-up-a-repository)\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339074,
          "key": "59082be0-c1af-4839-8ae5-0a182dc5bfe8",
          "title": "克隆现有仓库",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "59082be0-c1af-4839-8ae5-0a182dc5bfe8",
            "completed_at": "2019-05-07T07:21:16.672Z",
            "last_viewed_at": "2019-05-07T07:21:13.436Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 338771,
              "key": "b4e8a033-cb86-4a3d-a618-c39aee0cb976",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 为何要克隆？\n\n          \n首先，什么是克隆？\n       \n> 制作完全相同的副本\n          \n制作完全相同的副本有什么意义，这与 Git 和版本控制有何关系？\n         \n你为何要创建一个完全相同的副本？当我在创建新的 Web 项目时，我会执行以下步骤：\n          \n* 创建一个 `index.html` 文件\n          \n* 创建一个 `js` 目录\n          \n* 创建一个 `css` 目录\n        \n* 创建一个 `img` 目录\n         \n* 在 css 目录下创建 `app.css`\n         \n* 在 js 目录下创建 `app.js`\n         \n* 在 `index.html` 中添加起始 HTML 代码\n          \n* 为代码检查添加配置文件（验证代码语法）\n           \n- [HTML 代码检查](http://htmlhint.com/)\n            \n- [CSS 代码检查](https://stylelint.io/)\n           \n- [JavaScript 代码检查](http://eslint.org/)\n         \n* [配置我的代码编辑器](http://editorconfig.org/)\n\n         \n ...每次新建一个项目，我都执行这些步骤！其实花费了很多精力，我不想不断重复执行同一步骤，因此我最后一次执行了上述列出的所有步骤，并为我自己创建了一个起始项目。现在，当我新建项目时，我只需制作一个与起始项目完全相同的副本！ \n\n          \n在 Git 上进行克隆的方法是调用我们将在终端上运行的命令 `git clone`，然后传入要克隆的 Git 仓库的路径（通常是 URL）。\n\n          \n想要尝试克隆一个现有的项目？我们来看看如何使用 Git 的 `clone` 命令！",
              "instructor_notes": ""
            },
            {
              "id": 338772,
              "key": "057c5ac6-b395-4904-a59c-f6228dd64b54",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " > ## 验证终端位置       \n >     \n > 提示：在克隆任何内容之前，确保命令行工具已定位于正确的目录下。克隆项目会新建一个目录，并将克隆的 Git 仓库放在其中。问题是无法创建嵌套的 Git 仓库。因此，确保终端的当前工作目录没有位于 Git 仓库中。如果当前工作目录没有在 shell 的提示符中显示，输入 `pwd` 输出工作目录。",
              "instructor_notes": ""
            },
            {
              "id": 338773,
              "key": "aadb7ebe-6f15-4a5b-a261-77d5c4237f9c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 克隆 blog 仓库\n\n          \n准备好了？我们开始克隆吧！\n\n          \n输入命令 `git clone`，然后输入你要克隆的 Git 仓库的路径。我们将在这门课程中一直使用的项目位于以下 URL 上：https://github.com/udacity/course-git-blog-project 。因此，使用该 URL 克隆 Blog 项目的完整命令是：\n\n     \n\n```bash\n$ git clone https://github.com/udacity/course-git-blog-project\n```\n\n**温馨提醒：** 复制上述代码时，记得去掉 `$` 。",
              "instructor_notes": ""
            },
            {
              "id": 338774,
              "key": "7ec3894b-420f-42f2-8549-6ea9361e801e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/January/588bba64_ud123-l2-git-clone/ud123-l2-git-clone.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7ec3894b-420f-42f2-8549-6ea9361e801e",
              "caption": "_`git clone` 命令被用于将 blog 项目仓库复制到当前目录的 `course-git-blog-project` 文件夹中。_",
              "alt": "",
              "width": 1036,
              "height": 424,
              "instructor_notes": null
            },
            {
              "id": 338775,
              "key": "31a70ca0-795b-44df-8328-61ff5250206f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## git clone 输出结果的简要说明\n\n          \n我们简要地介绍下 `git clone` 显示的输出结果。\n\n          \n第一行是\"Cloning into 'course-git-blog-project'…\"。Git 正在创建一个目录（名称与我们要克隆的项目一样），并将仓库放在其中…很酷！\n\n          \n其余输出结果基本都是验证信息——也就是统计远程仓库的项目数，然后压缩并接收这些项目，并解压。",
              "instructor_notes": ""
            },
            {
              "id": 338776,
              "key": "7ffe99a1-fc8e-4a15-acac-d6134199f3c8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 克隆项目并使用不同的名称\n\n          \n你刚刚克隆了本课程的 blog 项目。很棒！\n\n          \n你在终端中运行的命令是：\n          \n```bash\n$ git clone https://github.com/udacity/course-git-blog-project\n          \n```          \n ...它创建了一个叫做 `course-git-blog-project` 的目录\n\n          \n如果你想使用除默认名外的其他名称呢？没问题，只需运行上述命令并在 Finder/Windows Explorer 中手动重命名或在终端上使用 `mv` 重命名即可。但是步骤还是太多了！我们希望一次性地克隆项目并使用不同的名称，如何实现呢？",
              "instructor_notes": ""
            },
            {
              "id": 338777,
              "key": "388d8a36-1d17-4d87-925f-eddf036b6c83",
              "title": "克隆项目并使用不同的名称",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "388d8a36-1d17-4d87-925f-eddf036b6c83",
                "completed_at": "2019-05-07T07:25:31.040Z",
                "last_viewed_at": "2019-05-07T07:25:50.746Z",
                "unstructured": "{\"selected_id\":\"a1485552381014\",\"is_correct\":true}"
              },
              "question": {
                "prompt": "请参阅 [`git clone` 文档 - 英](https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository#Cloning-an-Existing-Repository) | [中](https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%8E%B7%E5%8F%96-Git-%E4%BB%93%E5%BA%93) 并从以下选项中选择正确的答案。命令应该克隆 blog 项目仓库并将其存储在叫做 `blog-project` 的目录下。",
                "answers": [
                  {
                    "id": "a1485552281688",
                    "text": "git clone-new-dir https://github.com/udacity/course-git-blog-project blog-project",
                    "is_correct": false
                  },
                  {
                    "id": "a1485552364588",
                    "text": "git clone https://github.com/udacity/course-git-blog-project --out blog-project",
                    "is_correct": false
                  },
                  {
                    "id": "a1485552375996",
                    "text": "git clone https://github.com/udacity/course-git-blog-project --rename blog-project",
                    "is_correct": false
                  },
                  {
                    "id": "a1485552381014",
                    "text": "git clone https://github.com/udacity/course-git-blog-project blog-project",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 338778,
              "key": "f3757b38-288c-4be8-ab9a-feee293325f4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " > ## 不在 Git 仓库中？\n          >\n          > 警告：当你第一次使用 Git 时，经常会忽略一个非常重要的步骤。在使用 `git clone` 命令克隆仓库时，它会为仓库新建一个目录...你已经知道这一点。但是，它不会改变 shell 的工作目录。它会在当前工作目录下创建新的仓库，意味着当前工作目录依然不在这个新的 Git 仓库里！确保使用 `cd` 命令切换到新的仓库中。\n          > \n          > 注意，根据终端的提示符进行判断，如果你位于 Git 仓库目录下，提示符将包含一个用小括号括起来的名称。",
              "instructor_notes": ""
            },
            {
              "id": 338779,
              "key": "85c1ac0b-5115-4ffe-8b81-bf28de808c31",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/589a623e_ud123-l2-base-directory/ud123-l2-base-directory.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/85c1ac0b-5115-4ffe-8b81-bf28de808c31",
              "caption": "_Mac 的终端应用。终端显示了起始目录。_",
              "alt": "",
              "width": 1616,
              "height": 726,
              "instructor_notes": null
            },
            {
              "id": 338780,
              "key": "24975c7d-d8ff-4d8a-90c4-2de9f8a33621",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/589a625b_ud123-l2-base-directory-git-repo/ud123-l2-base-directory-git-repo.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/24975c7d-d8ff-4d8a-90c4-2de9f8a33621",
              "caption": "_Mac 的终端应用。终端使用 `cd` 命令从基础目录转移到 Git 仓库 course-git-blog-project 下。_",
              "alt": "",
              "width": 1616,
              "height": 726,
              "instructor_notes": null
            },
            {
              "id": 338781,
              "key": "b96eb396-bd4f-4cb0-a232-c496820fd10b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 查看项目\n          \n你已经将项目克隆到计算机上，并使用 `cd` 转移到该项目中。是不是该在浏览器中查看下该项目的外观了？\n          \n在你喜欢的浏览器中打开 `index.html` 文件。",
              "instructor_notes": ""
            },
            {
              "id": 338782,
              "key": "3fec3c5a-6c53-4bd4-be04-21a32e36db7b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/58a7513d_ud123-l2-course-git-blog-project-in-browser/ud123-l2-course-git-blog-project-in-browser.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3fec3c5a-6c53-4bd4-be04-21a32e36db7b",
              "caption": "_在 Chrome 中打开的 blog 项目。_",
              "alt": "",
              "width": 1300,
              "height": 886,
              "instructor_notes": null
            },
            {
              "id": 338783,
              "key": "c067fb70-c054-4dba-94b3-e5e0b5d6c833",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## git clone 小结\n          \n`git clone` 命令用于创建一个与现有仓库完全相同的副本。\n          \n```shell\n$ git clone <path-to-repository-to-clone>\n          \n```\n          \n该命令：\n          \n* 会获取现有仓库的路径\n          \n* 默认地将创建一个与被克隆的仓库名称相同的目录      \n* 可以提供第二个参数，作为该目录的名称     \n* 将在现有工作目录下创建一个新的仓库\n\n          \n## 实用链接\n         \n* [克隆现有仓库 - 英](https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository#Cloning-an-Existing-Repository) | [中](https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%8E%B7%E5%8F%96-Git-%E4%BB%93%E5%BA%93)\n          \n* [git 克隆文档 - 英](https://git-scm.com/docs/git-clone)\n          \n* [git 克隆教程 - 英](https://www.atlassian.com/git/tutorials/setting-up-a-repository)\n",
              "instructor_notes": ""
            },
            {
              "id": 338784,
              "key": "b2be22c1-57cf-416e-832a-ab24fc4b9756",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 状态更新\n       \n到目前为止，我们已经有了两个 Git 仓库：\n\n   * 使用 `git init` 命令创建的空仓库\n   * 使用 `git clone` 命令克隆的仓库\n        \n如何查找关于这些仓库的任何信息？Git 在管理着它们，但是如何了解 Git 知道多少关于这些仓库的信息？要了解仓库的状况，我们需要使用 `git status` 命令。知道 Git 仓库的状况非常重要，因此让我们进入下节内容：判断仓库的状态。",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339077,
          "key": "ce648229-7d6c-4ad3-805e-af6a77f38fd0",
          "title": "判断仓库的状态",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ce648229-7d6c-4ad3-805e-af6a77f38fd0",
            "completed_at": "2019-05-07T07:27:01.276Z",
            "last_viewed_at": "2019-05-07T07:27:01.082Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 338791,
              "key": "54621400-9189-4eda-adcc-ea1534681167",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "在命令行中使用 Git 可能会有点挑战，因为它有点类似于[黑箱 - 维基百科 - 英](https://en.wikipedia.org/wiki/Black_box) | [黑箱理论 - 百度百科 - 中](https://baike.baidu.com/item/%E9%BB%91%E7%AE%B1%E7%90%86%E8%AE%BA/7987518?fr=aladdin)。如何判断你是否需要运行某些 Git 命令？ Git 是否已经准备好运行某个命令？ 如果我运行了一个命令，但我认为它并未被执行，我该如何进行验证呢？ `git status` 命令可以回答所有这些问题！\n          \n```shell\n$ git status\n          \n```\n          \n`git status` 是了解 Git 的核心所在。它将告诉我们 Git 正在考虑什么，以及 Git 所看到的我们仓库的状态。当你第一次使用 Git 时，你应该一直都要使用 `git status` 命令！说真的，你应该习惯于运行任何其他命令之后，都运行下该命令。这样可以帮助你了解 Git 的工作原理，并避免你对文件 / 仓库状态做出不正确的推论。\n      ",
              "instructor_notes": ""
            },
            {
              "id": 338792,
              "key": "79dbc7bd-bcac-4b40-ac6f-ed61104fe534",
              "title": "克隆仓库的状态",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "79dbc7bd-bcac-4b40-ac6f-ed61104fe534",
                "completed_at": "2019-05-07T07:28:15.236Z",
                "last_viewed_at": "2019-05-07T07:28:19.692Z",
                "unstructured": "{\"selected_id\":\"a1486513057659\",\"is_correct\":true}"
              },
              "question": {
                "prompt": "回答这道练习题前，确保你已经使用 `cd` 命令转到 `course-git-blog-project` 项目中。如果你一直跟着这节课的步骤操作，并且没有向此项目添加任何文件，那么运行 `git status` 的显示结果是什么？",
                "answers": [
                  {
                    "id": "a1486513004009",
                    "text": "Status: good",
                    "is_correct": false
                  },
                  {
                    "id": "a1486513023571",
                    "text": "On branch master <br>Your branch is up-to-date with 'origin/master'.<br>Initial commit <br>nothing to commit (create/copy files and use \"git add\" to track)",
                    "is_correct": false
                  },
                  {
                    "id": "a1486513044449",
                    "text": "master branch  <br>Please commit some files",
                    "is_correct": false
                  },
                  {
                    "id": "a1486513057659",
                    "text": "On branch master <br>Your branch is up-to-date with 'origin/master'.<br>nothing to commit, working directory clean",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 338793,
              "key": "57149697-d6c2-41eb-91f7-7d9ac0ed7db8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## git status 输出结果\n          \n`git status` 命令将显示很多信息，具体取决于你的文件状态、工作目录和仓库。但是你不需要过于关心这些内容…只需运行 `git status`，它将显示你需要知道的信息。",
              "instructor_notes": ""
            },
            {
              "id": 338794,
              "key": "3b2f09ef-b39e-4aa3-a8cb-26e8c13773b2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/589a6434_ud123-l2-git-status-blog-project/ud123-l2-git-status-blog-project.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3b2f09ef-b39e-4aa3-a8cb-26e8c13773b2",
              "caption": "_终端应用的 GIF 动画。在 `course-git-blog-project` 项目中运行`git status` 命令。_",
              "alt": "",
              "width": 1036,
              "height": 522,
              "instructor_notes": null
            },
            {
              "id": 338795,
              "key": "869e3fde-3f9c-446a-a395-a70b64e58e7c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## git status 说明\n\n          \n正如你在上面的 GIF 中所看到的，在 `course-git-blog-project` 项目中运行 `git status` 将产生以下输出结果：\n\n          \n```shell\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nnothing to commit, working directory clean\n          \n```\n          \n输出结果告诉了我们两条信息：\n          \n1. `On branch master` – 这部分告诉我们 Git 位于 `master` 分支上。你已在术语表中获取了对分支的介绍，那么这是\"master\"分支（也就是默认分支）。我们将在第 5 节课深入了解分支。\n         \n* `Your branch is up-to-date with 'origin/master'.` – 因为我们使用 `git clone` 从另一台计算机上复制了此仓库，因此这部分告诉我们项目是否与所复制的仓库保持同步状态。我们不会在其他计算机上处理该项目，因此这一行可以忽略。\n          \n* `nothing to commit, working directory clean` – 表示没有任何待定的更改。\n        \n可以将这一输出结果看作“休息状态（resting state）”（这并不是官方解释，只是我喜欢这么理解！）。因为没有新的文件、没有对文件作出更改、暂存区没有任何需要 commit 的内容……没有更改或操作，因此我喜欢将其称为休息状态。 \n         \n这就是在已经具有 commit 的仓库中运行 `git status` 之后的状态。我们切换到 `new-git-project` 项目，看看 `git status` 输出结果是什么。",
              "instructor_notes": ""
            },
            {
              "id": 338796,
              "key": "065c1844-da87-46c7-b85d-819fc1330ad3",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "065c1844-da87-46c7-b85d-819fc1330ad3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "回答这道练习题前，确保你已经使用 `cd` 命令转到 `new-git-project` 项目。\n\n            \n如果你一直跟着这节课的步骤操作，并且没有向此项目添加任何文件，则运行 `git status` 会显示什么？",
                "answers": [
                  {
                    "id": "a1486766973483",
                    "text": "Status: good",
                    "is_correct": false
                  },
                  {
                    "id": "a1486767002437",
                    "text": "On branch master <br>Initial commit <br>nothing to commit (create/copy files and use \"git add\" to track)",
                    "is_correct": true
                  },
                  {
                    "id": "a1486767003147",
                    "text": "master branch <br>Please commit some files",
                    "is_correct": false
                  },
                  {
                    "id": "a1486767003798",
                    "text": "On branch master <br>nothing to commit, working directory clean",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 338797,
              "key": "02a6d897-7cba-4523-b44e-0f20c3372a20",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/February/589e4494_ud123-l2-git-status-new-project/ud123-l2-git-status-new-project.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/02a6d897-7cba-4523-b44e-0f20c3372a20",
              "caption": "_终端应用的 GIF 动画。`git status` 命令在 `new-git-project` 项目中运行。_",
              "alt": "",
              "width": 1036,
              "height": 390,
              "instructor_notes": null
            },
            {
              "id": 439984,
              "key": "7b32e61d-1ef9-4e1e-8daf-91f1a32012d0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> ### 💡 Git v2.14 版本的改变 💡 \n\n> 在 Git version 2.14 版本中，在一个空目录中运行 `git status` 命令的结果中，将 \"Inital commit\"（初始提交）的用词，改为更清晰明了的 \"No commits yet\"（尚未有任何提交），所以输出将会是：\n\n> ```bash\n> On branch master\n>\n> No commits yet\n>\n> nothing to commit (create/copy files and use \"git add\" to track)\n```",
              "instructor_notes": ""
            },
            {
              "id": 338798,
              "key": "73ed0f88-4071-4604-84c0-96c4edfc4dc2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 新仓库中的 git status 说明\n\n          \n这是在 `new-git-project` 项目中运行 `git status` 后的输出结果：\n        \n```bash\n$ git status\nOn branch master\n\nInitial commit\n\nnothing to commit (create/copy files and use \"git add\" to track)\n          \n```\n          \n澄清一下，我尚未在我的项目中提交任何 commit。如果你提交了 commit，那么你的输出结果应该看起来和 course-git-blog-project 项目中的完全一样。\n\n          \n如果你将此结果与 course-git-blog-project 项目的 `git status` 输出结果进行对比，你会发现它们很相似。不同之处在于这个输出结果包含 `Initial commit`。这有点让人困惑，因为此仓库中尚无任何 commit！我们还未学习如何进行 commit，但是当我们进行学习时，我们将能够提交初始 commit。\n\n         \n想要提前了解下下节课的内容，同时证明此仓库尚无任何 commit？我就知道你想试试！试着运行命令 `git log`，并查看其输出结果：\n          \n```bash\n$ git log\nfatal: your current branch 'master' does not have any commits yet\n          \n```          \n看起来有点可怕。“Fatal(致命)”？幸运的是，这仅仅意味着 Git 程序正在退出，因为它没有任何需要完成的任务。Git 将此情况视为错误，但这并不是一个问题。因为我们知道自己尚未在此仓库中提交任何 commit。\n\n          \n从输出结果可以清晰地看出没有任何 commit！\n\n          \n我们刚刚简单地了解了 `git status` 命令。`git status` 的输出结果将有所不同，具体取决于文件是否被添加/删除/修改、暂存索引的情况，以及仓库的状态。我们将在整个课程中持续使用 `git status` 命令，因此请熟练掌握该命令！\n      ",
              "instructor_notes": ""
            },
            {
              "id": 338799,
              "key": "3a95cc86-763d-40f1-9acf-aac41af6eeca",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## git status 小结\n\n          \n`git status` 命令将显示仓库的当前状态。\n\n          \n```bash\n$ git status\n          \n```\n\n          \n我一直在强调这个命令非常的重要，因为这是你第一次使用 Git。该命令将：\n          \n* 告诉我们已在工作目录中被创建但 Git 尚未开始跟踪的新文件\n          \n* Git 正在跟踪的已修改文件\n         \n* 以及我们将在这门课程的后续阶段学习的很多其他信息 ;-)。\n\n         \n ## 拓展链接\n          \n* [查看文件的状态 - 英](https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository#Checking-the-Status-of-Your-Files) | [中](https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%AE%B0%E5%BD%95%E6%AF%8F%E6%AC%A1%E6%9B%B4%E6%96%B0%E5%88%B0%E4%BB%93%E5%BA%93)\n          \n* [git status 文档 - 英](https://git-scm.com/docs/git-status)\n          \n* [git status 教程 - 英](https://www.atlassian.com/git/tutorials/inspecting-a-repository/git-status)\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 339076,
          "key": "f545f8d7-7039-4d46-a12c-69325c899fb0",
          "title": "总结",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f545f8d7-7039-4d46-a12c-69325c899fb0",
            "completed_at": "2019-05-07T07:28:53.635Z",
            "last_viewed_at": "2019-05-07T07:28:53.511Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 338800,
              "key": "2b9246ec-94e7-4050-a5dd-50fff5d095a2",
              "title": "创建仓库 - 总结",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "h7j4STDFCjs",
                "china_cdn_id": "h7j4STDFCjs.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}