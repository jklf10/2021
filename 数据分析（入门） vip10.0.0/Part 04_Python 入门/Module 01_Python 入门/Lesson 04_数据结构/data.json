{
  "data": {
    "lesson": {
      "id": 869725,
      "key": "fda5a375-cb01-4b7c-bf66-5de5feef9f27",
      "title": "数据结构",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "zh-cn",
      "summary": "",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/fda5a375-cb01-4b7c-bf66-5de5feef9f27/738081/1556178270010/Data+Structures+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/fda5a375-cb01-4b7c-bf66-5de5feef9f27/738081/1556178262185/Data+Structures+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 868930,
          "key": "d8e75e1a-a609-4236-aa2b-bbda0166625d",
          "title": "简介",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d8e75e1a-a609-4236-aa2b-bbda0166625d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 866926,
              "key": "631731a1-0e77-4e28-abed-a28cb4dfb209",
              "title": "PDSND Intro Juno V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ulPqwSfK8j0",
                "china_cdn_id": "ulPqwSfK8j0.mp4"
              }
            },
            {
              "id": 866927,
              "key": "71ba08c7-282a-4ab6-8464-0b173f5ed02e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 数据结构\n欢迎来到数据结构课程！你将在本课中学习：\n\n- 数据结构的类型：列表，元组，集，字典，复合数据结构\n- 运算符: 成员运算符, 身份运算符  \n- 内置函数或方法\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 868931,
          "key": "9f46a018-d86f-4942-83d9-61abf2a9871e",
          "title": "列表和成员运算符",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9f46a018-d86f-4942-83d9-61abf2a9871e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 866928,
              "key": "14831225-045f-4c90-8e60-e3850db7c0a5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 列表和成员运算符\n\n此页面包含三个视频。请观看这些视频并查看其他帮助提醒！",
              "instructor_notes": ""
            },
            {
              "id": 866929,
              "key": "0cd1f41b-98d6-4779-a6a5-bf647d8c3a24",
              "title": "L2 16a Listgs And Membership Operators V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Tg58Z58m2Lo",
                "china_cdn_id": "Tg58Z58m2Lo.mp4"
              }
            },
            {
              "id": 866931,
              "key": "def7b6e8-f779-4696-b652-742c809ccb42",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 列表！\n\n__数据结构__是以不同方式组织和分组数据类型的容器。 __list__是 Python 中最常见和最基本的数据结构之一。\n\n你在本视频中发现，你可以使用方括号创建列表。列表可以包含我们到目前为止所学的任何数据类型并且可以混合到一起。\n\n\n```\nlst_of_random_things = [1, 3.4, 'a string', True]\n```\n\n这是一个包含 4 个元素的类别。在 python 中，所有有序容器（例如列表）的起始索引都是 0。因此，要从上述列表中获取第一个值，我们可以编写以下代码：\n\n```\n>>> lst_of_random_things[0]\n1\n```\n\n似乎你可以使用以下代码获取最后一个元素，但实际上不可行：\n\n```\n>>> lst_of_random_things[len(lst_of_random_things)] \n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\n<ipython-input-34-f88b03e5c60e> in <module>()\n----> 1 list[len(list)]\n\nIndexError: list index out of range\n```\n\n但是，你可以通过使索引减一获取最后一个元素。因此，你可以执行以下操作：\n\n```\n>>> lst_of_random_things[len(lst_of_random_things) - 1] \nTrue\n```\n此外，你可以使用负数从列表的末尾开始编制索引，其中 -1 表示最后一个元素，-2 表示倒数第二个元素，等等。\n```\n>>> lst_of_random_things[-1] \nTrue\n>>> lst_of_random_things[-2] \na string\n\n```\n\n",
              "instructor_notes": ""
            },
            {
              "id": 866932,
              "key": "33c3da6f-7179-4144-926a-af78590f5ae2",
              "title": "L2 16b Lists And Membership Operators V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "f4OF9XtXUR8",
                "china_cdn_id": "f4OF9XtXUR8.mp4"
              }
            },
            {
              "id": 866930,
              "key": "0b806356-2e37-4795-832c-2d9ed34249d5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 列表切片\n\n你发现，我们可以使用**切片功能**从列表中提取多个值。在使用切片功能时，务必注意，`起始`索引`包含在内`，`终止`索引`排除在外`。（即，在上述视频示例中，6 是起始索引，9是终止索引）\n\n因此：\n\n```\n>>> lst_of_random_things = [1, 3.4, 'a string', True]\n>>> lst_of_random_things[1:2]\n[3.4]\n```\n\n仅返回列表中的 **3.4**。注意，这与单个元素索引依然不同，因为你通过这种索引获得了一个列表。冒号表示从冒号左侧的起始值开始，到右侧的元素（不含）结束。\n\n如果你要从列表的开头开始，也可以省略起始值。\n\n```\n>>> lst_of_random_things[:2]\n[1, 3.4]\n```\n或者你要返回到列表结尾的所有值，可以忽略最后一个元素。\n\n```\n>>> lst_of_random_things[1:]\n[3.4, 'a string', True]\n```\n\n这种索引和字符串索引完全一样，返回的值将是字符串。\n\n# `在`列表里还是`不在`列表里？\n\n你发现，我们还可以使用 `in` 和 `not in` 返回一个**布尔值**，表示某个元素是否存在于列表中，或者某个字符串是否为另一个字符串的子字符串。\n\n```python\n>>> 'this' in 'this is a string'\nTrue\n>>> 'in' in 'this is a string'\nTrue\n>>> 'isa' in 'this is a string'\nFalse\n>>> 5 not in [1, 2, 3, 4, 6]\nTrue\n>>> 5 in [1, 2, 3, 4, 6]\nFalse\n```",
              "instructor_notes": ""
            },
            {
              "id": 866934,
              "key": "c3aebef1-d615-4d38-874f-643fb5bc320a",
              "title": "L2 16c Lists And Membership Operators II V4",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "dVsJ9yzbSHE",
                "china_cdn_id": "dVsJ9yzbSHE.mp4"
              }
            },
            {
              "id": 866935,
              "key": "4376d3c3-fa27-442f-b003-795731673de3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 可变性和顺序\n\n**可变性**是指对象创建完毕后，我们是否可以更改该对象。如果对象（例如列表）可以更改，则是**可变的**。但是，如果无法更改对象以创建全新的对象（例如字符串），则该对象是**不可变的**。\n\n```\n>>> my_lst = [1, 2, 3, 4, 5]\n>>> my_lst[0] = 'one'\n>>> print(my_lst)\n['one', 2, 3, 4, 5]\n```\n\n正如上述代码所显示的，你可以将上述列表中的 1 替换为 'one。这是因为，列表是**可变的**。\n\n但是，以下代码不可行：\n\n```\n>>> greeting = \"Hello there\"\n>>> greeting[0] = 'M'\n```\n\n这是因为，字符串是**不可变的**。意味着如果要更改该字符串，你需要创建一个全新的字符串。\n\n对于你要使用的每种数据类型，你都需要注意两个事项：\n\n1. **可变**吗？\n2. **有序**吗？\n\n字符串和列表都是有序的。但是，你将在后续部分看到某些数据类型是无序的。对于接下来要遇到的每种数据类型，有必要理解如何设定索引，可变吗，有序吗。了解数据结构的这些信息很有用！  \n\n此外，你将发现每种数据类型有不同的方法，因此为何使用一种数据类型（而不是另一种）在很大程度上取决于这些特性，以及如何轻松地利用这些特性！\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 534405,
          "key": "2aa94895-d620-4d00-9d91-43771844cdcf",
          "title": "练习：列表和成员运算符",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2aa94895-d620-4d00-9d91-43771844cdcf",
            "completed_at": "2018-08-01T08:13:42.500Z",
            "last_viewed_at": "2018-08-02T04:44:12.151Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 534304,
              "key": "9e95767f-e954-4960-bb43-a7380e3100f6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 练习：列表索引\n\n请使用列表索引根据整型变量 `month` 判断特定月份有多少天，并将该值存储在整型变量 `num_days` 中。例如，如果 `month` 是 8，`num_days` 应该设为 31，因为第八个月份八月应该有 31 天。\n\n请记得索引以 0 开始！",
              "instructor_notes": ""
            },
            {
              "id": 534311,
              "key": "5fb219a3-c37d-4b1c-84b4-aa88a58a74e8",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5fb219a3-c37d-4b1c-84b4-aa88a58a74e8",
                "completed_at": "2018-08-01T08:16:28.388Z",
                "last_viewed_at": "2018-08-01T08:16:31.182Z",
                "unstructured": "{\"HowManyDays.py\":\"month = 8\\ndays_in_month = [31,28,31,30,31,30,31,31,30,31,30,31]\\n\\n# use list indexing to determine the number of days in month\\n\\n\\nnum_days = days_in_month[month - 1]\\nprint(num_days)\"}"
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5332051021135872",
                "initial_code_files": [
                  {
                    "text": "month = 8\ndays_in_month = [31,28,31,30,31,30,31,31,30,31,30,31]\n\n# use list indexing to determine the number of days in month\n\n\nprint(num_days)",
                    "name": "HowManyDays.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 534313,
              "key": "782acf46-c6ee-434b-a892-2a10a3f243a7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 练习：列表切片\n\n请使用列表切片记法从此列表中选择列表中的最后三个元素。提示：切片可以使用负索引！",
              "instructor_notes": ""
            },
            {
              "id": 534314,
              "key": "0bcee82d-4675-41f4-ab01-7089b143cd9c",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "0bcee82d-4675-41f4-ab01-7089b143cd9c",
                "completed_at": "2018-08-01T08:17:55.230Z",
                "last_viewed_at": "2018-08-01T08:20:33.196Z",
                "unstructured": "{\"slicing.py\":\"eclipse_dates = ['June 21, 2001', 'December 4, 2002', 'November 23, 2003',\\n                 'March 29, 2006', 'August 1, 2008', 'July 22, 2009',\\n                 'July 11, 2010', 'November 13, 2012', 'March 20, 2015',\\n                 'March 9, 2016']\\n                 \\n                 \\n# TODO: Modify this line so it prints the last three elements of the list\\neclipse_dates = eclipse_dates[7:10]\\nprint(eclipse_dates)\"}"
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6670217070116864",
                "initial_code_files": [
                  {
                    "text": "eclipse_dates = ['June 21, 2001', 'December 4, 2002', 'November 23, 2003',\n                 'March 29, 2006', 'August 1, 2008', 'July 22, 2009',\n                 'July 11, 2010', 'November 13, 2012', 'March 20, 2015',\n                 'March 9, 2016']\n                 \n                 \n# TODO: Modify this line so it prints the last three elements of the list\nprint(eclipse_dates)",
                    "name": "slicing.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 534315,
              "key": "8bb64e5e-9326-45eb-83f4-bee95af63d54",
              "title": "可变性练习",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8bb64e5e-9326-45eb-83f4-bee95af63d54",
                "completed_at": "2018-08-01T08:21:49.545Z",
                "last_viewed_at": "2018-08-01T08:22:08.706Z",
                "unstructured": "{\"answer_ids\":[\"a1512679606414\",\"a1512679627455\",\"a1512679628537\",\"a1512679629607\"],\"is_correct\":true}"
              },
              "question": {
                "complex_prompt": {
                  "text": "假设有以下两个表达式：`sentence1` 和 `sentence2`\n```python\nsentence1 = \"I wish to register a complaint.\"\nsentence2 = [\"I\", \"wish\", \"to\", \"register\", \"a\", \"complaint\", \".\"]\n```\n请将以下 Python 代码与修改后的 `sentence1` 或 `sentence2` 的值相匹配。如果代码会出错，请与“Error”匹配。"
                },
                "concepts_label": "Python 代码",
                "answers_label": "`sentence1` 或 `sentence2`的值",
                "concepts": [
                  {
                    "text": "`sentence2[6]=\"!\"`",
                    "correct_answer": {
                      "id": "a1512679606414",
                      "text": "[\"I\", \"wish\", \"to\", \"register\", \"a\", \"complaint\", \"!\"]"
                    }
                  },
                  {
                    "text": "`sentence2[0]= \"Our Majesty\"`",
                    "correct_answer": {
                      "id": "a1512679627455",
                      "text": "[\"Our Majesty\", \"wish\", \"to\", \"register\", \"a\", \"complaint\", \".\"]"
                    }
                  },
                  {
                    "text": "`sentence1[30]=\"!\"`",
                    "correct_answer": {
                      "id": "a1512679628537",
                      "text": "Error"
                    }
                  },
                  {
                    "text": "`sentence2[0:2] = [\"We\", \"want\"]`",
                    "correct_answer": {
                      "id": "a1512679629607",
                      "text": "[\"We\", \"want\", \"to\", \"register\", \"a\", “complaint”, \".\"]"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1512679628537",
                    "text": "Error"
                  },
                  {
                    "id": "a1512679627455",
                    "text": "[\"Our Majesty\", \"wish\", \"to\", \"register\", \"a\", \"complaint\", \".\"]"
                  },
                  {
                    "id": "a1512679606414",
                    "text": "[\"I\", \"wish\", \"to\", \"register\", \"a\", \"complaint\", \"!\"]"
                  },
                  {
                    "id": "a1512679629607",
                    "text": "[\"We\", \"want\", \"to\", \"register\", \"a\", “complaint”, \".\"]"
                  },
                  {
                    "id": "a1512679677178",
                    "text": "\"I wish to register a complaint!\""
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 676810,
          "key": "5f422184-b47e-4716-9faa-4242527dffbf",
          "title": "解决方案：列表和成员运算符",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5f422184-b47e-4716-9faa-4242527dffbf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 676808,
              "key": "de121a89-9a65-4f2c-b85a-283ceafe3d02",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 练习：列表索引\n\n以下是用于该练习的良好代码行：\n```\nnum_days = days_in_month[month - 1]```\n\n\n### 练习：列表切片\n以下是用于该练习的良好代码行：\n```\nprint(eclipse_dates[-3:])```\n\n### 练习 3 \n这是我们的参考答案:\n\n`sentence1` 是一个字符串，因此是不可变对象。意味着虽然你可以引用 `sentence1` 中的单个对象（例如，可以写为 `sentence1[5]`），但是无法为它们赋值。（无法写成 `sentence1[5] = a`）。因此第三个表达式将出错。\n\n`sentence2` 是一个列表，列表是可变的，意味着你可以更改 `sentence2` 中单项的值：\n- 在第一个表达式中，我们将 `sentence2` 中的最后一项的值从“.”改成了“!”。\n- 在第二个表达式中，我们将 `sentence2` 中的第一项的值从“I”更改成了“Our Majesty”。\n- 在最后一个表达式中，我们使用了切片功能同时将 `sentence2` 中的第一项和第二项的值分别从“I”和“wish”改成了“We”和“want”。",
              "instructor_notes": ""
            },
            {
              "id": 676809,
              "key": "9026faa4-d1cf-42f3-beea-b802f4218dd4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/May/5af5db11_screen-shot-2018-05-11-at-11.03.34-am/screen-shot-2018-05-11-at-11.03.34-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9026faa4-d1cf-42f3-beea-b802f4218dd4",
              "caption": "",
              "alt": "",
              "width": 1728,
              "height": 900,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 868932,
          "key": "b2b5b3ff-b3fb-43fe-8481-73cb811eadd7",
          "title": "为什么我们需要列表？",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b2b5b3ff-b3fb-43fe-8481-73cb811eadd7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 866942,
              "key": "c89f7e54-aa57-4386-ad29-3d3d1c2b5d27",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 为什么我们需要列表？\n\n<br>\n我们来谈谈为什么我们需要像列表这样的数据结构，以及什么时候使用它。 我们将通过华尔街的一个例子进行讨论。 \n\n在纳斯达克交易所上市的公司有每个公司名称的股票代码或缩写。 例如 Alphabet, Inc. 的股票代码是GOOGL。\n\n现在想象一下，你拥有一家公司的股票，比如微软 Microsoft，并希望能够打印出股票的股票代码。 因为它是一个值，所以可以将它存储在变量`microsoft`中，并为其赋值为`MSFT`。 像这样：\n\n`microsoft = MSFT` \n\n嗯，这很方便！ 因此，现在当你想要为你持有股票的公司打印股票代码时，就可以直接使用`print`命令。\n``` \nprint(microsoft)\n>>> MSFT ```",
              "instructor_notes": ""
            },
            {
              "id": 866943,
              "key": "e3d5e1e8-8fc8-44f1-9280-f281f85cbea9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----",
              "instructor_notes": ""
            },
            {
              "id": 866944,
              "key": "2ff243fa-72f2-43a9-8ca3-246c45a4af35",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "现在假设你是一名投资基金经理，并且希望打印出你在指数基金中拥有的股票（或持股）（例如，[Vanguard Institutional Index Fund](https://www.marketwatch.com/investing/fund/vinix/holdings))。指数基金包括大量公司的股票（也称为持股）。可以看到，先锋机构指数基金已持有[506控股](https://investor.vanguard.com/mutual-funds/profile/VINIX)！\n\n按照之前的做法，使用单个字符串打印所有506个持股的话，需要506个字符串。 _这并不是我们想要的！_因为我们需要记住每个字符串的名称才能打印出来。<BR>\n你还必须考虑如何在相同的索引基金下对506个字符串进行分组。 _太不方便啦！_\n\n**这就是体现数据结构之美的地方！ 你可以使用一个 list。**\n\n由于指数基金也有股票代码，你可以使用它作为列表的名称，比如说例子里的`VINIX`，并将所有持股的股票代码符号添加到该 list 中。 让我们列出[Vanguard Institutional Index Fund](https://www.marketwatch.com/investing/fund/vinix/holdings)中的最大持股的几个。\n\n```\nVINIX = ['C', 'MA', 'BA', 'PG', 'CSCO', 'VZ', 'PFE', 'HD', 'INTC', 'T', 'V', 'UNH', 'WFC', 'CVX', 'BAC', 'JNJ', 'GOOGL', 'GOOG', 'BRK.B', 'XOM', 'JPM', 'FB', 'AMZN', 'MSFT', 'AAPL']```\n\n现在，打印股票代码就变得稍微容易一些了，你也不必记住字符串的名字！\n``` \nprint(VINIX[0])\n>>> C\nprint(VINIX[1])\n>>> MA\n```\n\n_稍后你将学习如何更高效地打印列表中的元素._\n\n你甚至可以查看`VINIX`是否**包含**某一特定的股票<br>\n像这样：\n\n```\n'GE' in VINIX\n>>> False\n\n'GOOGL' in VINIX\n>>> True\n```\n\n_我们将在本课后面再次研究华尔街的这个例子，以展示数据结构更多可使用的场景！_",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 868933,
          "key": "201ed843-7285-4a46-807e-fd18f96cd7fe",
          "title": "列表方法",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "201ed843-7285-4a46-807e-fd18f96cd7fe",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 866945,
              "key": "da0c906d-0483-4989-9a20-449e0b5959cf",
              "title": "L2 18a Lists Methods V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "7QShK49tquM",
                "china_cdn_id": "7QShK49tquM.mp4"
              }
            },
            {
              "id": 866946,
              "key": "3a75aa9d-250c-471e-bebf-0f7109698309",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "*** 纠正: *** 在上方视频的0:42，代码应当是\n\n```print(\"scores: \" + str(scores))```<br>\n```print(\"grades: \" + str(grades))```",
              "instructor_notes": ""
            },
            {
              "id": 866947,
              "key": "52689eb3-0d01-4507-84eb-0b001929b286",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 列表中有用的函数 I\n\n1. `len()` 返回列表中的元素数量。\n2. `max()` 返回列表中最大的元素。确定最大元素的方法取决于列表中的对象类型。数字列表中的最大元素是最大数字。在字符串列表中，如果列表中的元素按照字母顺序排序，那么其最大的元素就是排序后排在最后的那个元素。之所以是按照这个逻辑来寻找最大元素，是因为max()函数是基于大于比较运算符的。当列表中包含不同的、无法相比较的类别的时候，max()函数未定义。\n3. `min()` 返回列表中最小的元素。min与max相反，它返回列表中最小的元素。\n4. `sorted()` 按从小到大的顺序返回列表的副本，保持原列表不变。",
              "instructor_notes": ""
            },
            {
              "id": 866948,
              "key": "69635596-c852-4d66-b883-33730c0b6936",
              "title": "L2 18b Lists Methods V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ugVkJZFU3U8",
                "china_cdn_id": "ugVkJZFU3U8.mp4"
              }
            },
            {
              "id": 866950,
              "key": "d2e3b018-aadd-45fa-ab73-03db940340fe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 列表中有用的函数 II\n\n### `join` 方法\nJoin是一个字符串方法，它将字符串列表作为参数，并返回由分隔符字符串连接的列表元素组成的字符串。\n```python\nnew_str = \"\\n\".join([\"fore\", \"aft\", \"starboard\", \"port\"])\nprint(new_str)\n```\n输出:\n```txt\nfore\naft\nstarboard\nport\n```\n在这个例子中，我们使用字符串 `\"\\n\"` 作为分隔符，所以每个元素之间都有一个换行符。\n我们也可以使用其他字符串作为.join的分隔符。 这里我们使用连字符。\n```python\nname = \"-\".join([\"García\", \"O'Kelly\"])\nprint(name)\n```\n输出:\n```txt\nGarcía-O'Kelly\n```\n重要的是要记住用逗号(，)分隔你加入的列表中的每个元素。忘记这样做不会触发报错，但可能无法给你期望的结果。\n\n### `append` method\n`append`方法非常有用，它将一个元素添加到列表的末尾。\n```python\nletters = ['a', 'b', 'c', 'd']\nletters.append('z')\nprint(letters)\n```\n输出:\n```txt\n['a', 'b', 'c', 'd', 'z']\n```",
              "instructor_notes": ""
            },
            {
              "id": 866949,
              "key": "ba52219f-8812-4404-816d-797ff902bb1e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 试试看！\n在第一个视频的开头，你看到了包含可变和不可变对象的变量的行为会非常不同，有时结果甚至可能会令人惊讶！试试看，使用打印功能并尽可能仔细地检查你的工作，以确保你的程序正确地跟踪数据。在使用列表时，请尝试上面提到地一些有用地函数。",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 534407,
          "key": "9c1c1885-9a78-4108-bbdc-2bfd283f1fb4",
          "title": "练习：列表方法",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9c1c1885-9a78-4108-bbdc-2bfd283f1fb4",
            "completed_at": "2018-08-01T08:22:59.681Z",
            "last_viewed_at": "2018-08-02T04:44:28.575Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 534324,
              "key": "79dfbdec-78b8-43ee-93f0-a62f29cf2e3a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 练习：`len`、`max`、`min` 和列表\n\n",
              "instructor_notes": ""
            },
            {
              "id": 534328,
              "key": "566e2d8a-79b7-461e-8048-d1942a9df825",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "此页面底部有一个 python 环境，你可以利用该环境运行与此页面上的任何练习相关的测试代码！",
              "instructor_notes": ""
            },
            {
              "id": 534330,
              "key": "a290e384-5700-4f69-a4ea-4176ce3e2f01",
              "title": "len、max 和 min",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a290e384-5700-4f69-a4ea-4176ce3e2f01",
                "completed_at": "2018-08-02T04:43:26.380Z",
                "last_viewed_at": "2018-08-02T04:43:26.380Z",
                "unstructured": "{\"selected_id\":\"a1512771446108\",\"is_correct\":true}"
              },
              "question": {
                "prompt": "以下代码的输出是什么？（请将这道多选题的答案中的逗号当做换行符。）\n\n```python\na = [1, 5, 8]\nb = [2, 6, 9, 10]\nc = [100, 200]\n\nprint(max([len(a), len(b), len(c)]))\nprint(min([len(a), len(b), len(c)]))\n```",
                "answers": [
                  {
                    "id": "a1512771406715",
                    "text": "200, 1",
                    "is_correct": false
                  },
                  {
                    "id": "a1512771446108",
                    "text": "4, 2",
                    "is_correct": true
                  },
                  {
                    "id": "a1512771446870",
                    "text": "300, 14",
                    "is_correct": false
                  },
                  {
                    "id": "a1512771447383",
                    "text": "2, 3",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 534329,
              "key": "d3befada-35cb-4517-885c-fa7e0ec04251",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 练习：`sorted`、`join` 和列表\n\n",
              "instructor_notes": ""
            },
            {
              "id": 534331,
              "key": "0904a1d7-6e54-487c-a151-da22ad17bbd8",
              "title": "sorted 和 join",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0904a1d7-6e54-487c-a151-da22ad17bbd8",
                "completed_at": "2018-08-02T04:44:51.494Z",
                "last_viewed_at": "2018-08-02T04:44:51.494Z",
                "unstructured": "{\"selected_id\":\"a1512772329475\",\"is_correct\":true}"
              },
              "question": {
                "prompt": "以下代码的输出是什么？（请将这道多选题的答案中的逗号当做换行符。）\n\n```python\nnames = [\"Carol\", \"Albert\", \"Ben\", \"Donna\"]\nprint(\" & \".join(sorted(names)))\n```",
                "answers": [
                  {
                    "id": "a1512772225346",
                    "text": "Albert, Ben, Carol, Donna",
                    "is_correct": false
                  },
                  {
                    "id": "a1512772328231",
                    "text": "Carol & Albert & Ben & Donna",
                    "is_correct": false
                  },
                  {
                    "id": "a1512772328827",
                    "text": " & Albert & Ben & Carol & Donna & ",
                    "is_correct": false
                  },
                  {
                    "id": "a1512772329475",
                    "text": "Albert & Ben & Carol & Donna",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 534332,
              "key": "c96894d5-acc6-4d47-816a-d170f0dd095a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 练习：`append` 和列表\n",
              "instructor_notes": ""
            },
            {
              "id": 534337,
              "key": "dd01f54b-41e3-4706-a306-d51330a9c5e5",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "dd01f54b-41e3-4706-a306-d51330a9c5e5",
                "completed_at": "2018-08-02T04:45:48.849Z",
                "last_viewed_at": "2018-08-02T04:46:07.729Z",
                "unstructured": "{\"selected_id\":\"a1512774029663\",\"is_correct\":true}"
              },
              "question": {
                "prompt": "以下代码的输出是什么？（请将这道多选题的答案中的逗号当做换行符。）\n\n```python\nnames = [\"Carol\", \"Albert\", \"Ben\", \"Donna\"]\nnames.append(\"Eugenia\")\nprint(sorted(names))\n```",
                "answers": [
                  {
                    "id": "a1512773974679",
                    "text": "Albert & Ben & Carol & Donna & Eugenia",
                    "is_correct": false
                  },
                  {
                    "id": "a1512774029176",
                    "text": "[\"Carol\", \"Albert\", \"Ben\", \"Donna\"]",
                    "is_correct": false
                  },
                  {
                    "id": "a1512774029663",
                    "text": "['Albert', 'Ben', 'Carol', 'Donna', 'Eugenia']",
                    "is_correct": true
                  },
                  {
                    "id": "a1512774030095",
                    "text": "[\"Eugenia\", \"Carol\", \"Albert\", \"Ben\", \"Donna\"]",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 534338,
              "key": "b32c89cc-4ecd-4cf6-b921-a325fc610994",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 列表方法",
              "instructor_notes": ""
            },
            {
              "id": 534339,
              "key": "10671926-6940-424d-9209-b34d9b7d7ded",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "10671926-6940-424d-9209-b34d9b7d7ded",
                "completed_at": "2018-08-02T04:43:34.984Z",
                "last_viewed_at": "2018-08-02T04:45:27.305Z",
                "unstructured": "{\"list_methods.py\":\"# Use this playground to experiment with list methods, using Test Run\\n\\nnames = [\\\"Carol\\\", \\\"Albert\\\", \\\"Ben\\\", \\\"Donna\\\"]\\nprint(\\\" & \\\".join(sorted(names)))\"}"
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5264629320777728",
                "initial_code_files": [
                  {
                    "text": "# Use this playground to experiment with list methods, using Test Run\n",
                    "name": "list_methods.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 868934,
          "key": "ad8821d9-d27d-4883-969e-b4f205a7379c",
          "title": "小测试：列表",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ad8821d9-d27d-4883-969e-b4f205a7379c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 866961,
              "key": "2ccf6fe9-9c25-4bd5-8596-73129ba946a2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 小测试\n\n数据类型和数据结构不简单，但是很重要！ 让我们暂停一下，确保你理解它们之间的区别。",
              "instructor_notes": ""
            },
            {
              "id": 866960,
              "key": "3f17a930-9f1b-41a8-b353-c5fe78fd3499",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3f17a930-9f1b-41a8-b353-c5fe78fd3499",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "以下哪些关于数据类型和数据结构的陈述是正确的？（多选题）",
                "answers": [
                  {
                    "id": "a1533088021245",
                    "text": "数据结构是可以包含不同数据类型的容器。",
                    "is_correct": true
                  },
                  {
                    "id": "a1533088021788",
                    "text": "数据结构只能保存相同数据类型的数据。",
                    "is_correct": false
                  },
                  {
                    "id": "a1533088256827",
                    "text": "列表是数据结构的一种。",
                    "is_correct": true
                  },
                  {
                    "id": "a1533088283720",
                    "text": "所有数据类型都是数据结构。",
                    "is_correct": false
                  },
                  {
                    "id": "a1533088284393",
                    "text": "所有数据结构都是数据类型。",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 866962,
              "key": "151b96f3-01ba-437c-a534-9657a3d2ecb7",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "151b96f3-01ba-437c-a534-9657a3d2ecb7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "以下哪个是列表的属性？（多选）",
                "answers": [
                  {
                    "id": "a1533092950997",
                    "text": "可变的",
                    "is_correct": true
                  },
                  {
                    "id": "a1533092959358",
                    "text": "不可变的",
                    "is_correct": false
                  },
                  {
                    "id": "a1533092959843",
                    "text": "有序的",
                    "is_correct": true
                  },
                  {
                    "id": "a1533092960415",
                    "text": "无序的",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 866963,
              "key": "ea30708d-a269-495d-a840-028365c47257",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "接下来的两个测验将测试你对索引和切片列表的理解。我建议你先尝试回答这些问题，而不是运行这些代码。 如果你想在回答问题之后尝试运行这些代码，你可以在此页面底部找到代码编辑器。",
              "instructor_notes": ""
            },
            {
              "id": 866964,
              "key": "3e5167ab-08c6-4818-9a98-a92e011bf11d",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3e5167ab-08c6-4818-9a98-a92e011bf11d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "选择正确的语法来索引列表`arr`中的以下元素。"
                },
                "concepts_label": "元素",
                "answers_label": "索引语法",
                "concepts": [
                  {
                    "text": "列表中的第一个元素",
                    "correct_answer": {
                      "id": "a1533091632317",
                      "text": "`arr[0]`"
                    }
                  },
                  {
                    "text": "列表中的第四个元素",
                    "correct_answer": {
                      "id": "a1533091786933",
                      "text": "`arr[3]`"
                    }
                  },
                  {
                    "text": "列表中的最后一个元素",
                    "correct_answer": {
                      "id": "a1533091787992",
                      "text": "`arr[len(arr) - 1]`"
                    }
                  },
                  {
                    "text": "列表中的倒数第二个元素",
                    "correct_answer": {
                      "id": "a1533091788971",
                      "text": "`arr[-2]`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1533091787992",
                    "text": "`arr[len(arr) - 1]`"
                  },
                  {
                    "id": "a1533091632317",
                    "text": "`arr[0]`"
                  },
                  {
                    "id": "a1533091843872",
                    "text": "`arr[len(arr)]`"
                  },
                  {
                    "id": "a1533091973620",
                    "text": "`arr[1]`"
                  },
                  {
                    "id": "a1533091786933",
                    "text": "`arr[3]`"
                  },
                  {
                    "id": "a1533091901154",
                    "text": "`arr[-3]`"
                  },
                  {
                    "id": "a1533091919397",
                    "text": "`arr[4]`"
                  },
                  {
                    "id": "a1533091788971",
                    "text": "`arr[-2]`"
                  }
                ]
              }
            },
            {
              "id": 866965,
              "key": "d5b50632-290c-48f7-8323-d6395a7e89d6",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d5b50632-290c-48f7-8323-d6395a7e89d6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "选择正确的语法来对列表中的以下每个元素进行切片：`arr = ['a'，'b'，'c'，'d'，'e'，'f'，'g']`"
                },
                "concepts_label": "元素",
                "answers_label": "切片语法",
                "concepts": [
                  {
                    "text": "`['c', 'd', 'e', 'f']`",
                    "correct_answer": {
                      "id": "a1533092267973",
                      "text": "`arr[2:6]`"
                    }
                  },
                  {
                    "text": "`['a', 'b', 'c']`",
                    "correct_answer": {
                      "id": "a1533092340228",
                      "text": "`arr[:3]`"
                    }
                  },
                  {
                    "text": "`['e', 'f', 'g']`",
                    "correct_answer": {
                      "id": "a1533092340848",
                      "text": "`arr[4:]`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1533092715477",
                    "text": "`arr[0:2]`"
                  },
                  {
                    "id": "a1533092708176",
                    "text": "`arr[2:5]`"
                  },
                  {
                    "id": "a1533092340228",
                    "text": "`arr[:3]`"
                  },
                  {
                    "id": "a1533092340848",
                    "text": "`arr[4:]`"
                  },
                  {
                    "id": "a1533092740771",
                    "text": "`arr[4:6]`"
                  },
                  {
                    "id": "a1533092682616",
                    "text": "`arr[3:7]`"
                  },
                  {
                    "id": "a1533092267973",
                    "text": "`arr[2:6]`"
                  },
                  {
                    "id": "a1533092733161",
                    "text": "`arr[:2]`"
                  }
                ]
              }
            },
            {
              "id": 866966,
              "key": "3a8b04eb-55e9-40cf-ba5f-284e60173c43",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "3a8b04eb-55e9-40cf-ba5f-284e60173c43",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4951354693517312",
                "initial_code_files": [
                  {
                    "text": "arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nprint(arr[0])",
                    "name": "list_slicing_indexing.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 868936,
          "key": "f811ad08-7771-485d-b925-c1d743c1209c",
          "title": "元组",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f811ad08-7771-485d-b925-c1d743c1209c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 866967,
              "key": "3b4f654b-91f8-489c-94f5-f546dd41d872",
              "title": "L2 20 Tuples V4",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "dM0UkbGAark",
                "china_cdn_id": "dM0UkbGAark.mp4"
              }
            },
            {
              "id": 866968,
              "key": "47dab9fb-1d8f-453d-8c39-af4c17ef193d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 元组\n\n元组是另一个实用容器。它是一种不可变有序元素数据类型。通常用来存储相关的信息。请看看下面这个关于纬度和经度的示例：\n```python\nlocation = (13.4125, 103.866667)\nprint(\"Latitude:\", location[0])\nprint(\"Longitude:\", location[1])\n```\n元组和列表相似，它们都存储一个有序的对象集合，并且可以通过索引访问这些对象。但是与列表不同的是，元组不可变，你无法向元组中添加项目或从中删除项目，或者直接对元组排序。\n\n元组还可以用来以紧凑的方式为多个变量赋值。\n```python\ndimensions = 52, 40, 100\nlength, width, height = dimensions\nprint(\"The dimensions are {} x {} x {}\".format(length, width, height))\n```\n在定义元组时，小括号是可选的，如果小括号并没有对解释代码有影响，程序员经常会忽略小括号。\n\n在第二行，我们根据元组 dimensions 的内容为三个变量赋了值。这叫做__元组解包__。你可以通过元组解包将元组中的信息赋值给多个变量，而不用逐个访问这些信息，并创建多个赋值语句。\n\n如果我们不需要直接使用 `dimensions`，可以将这两行代码简写为一行，一次性为三个变量赋值！\n```python\nlength, width, height = 52, 40, 100\nprint(\"The dimensions are {} x {} x {}\".format(length, width, height))\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 534409,
          "key": "7e05f190-288e-476d-b114-5dab6eeabca0",
          "title": "练习：元组",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7e05f190-288e-476d-b114-5dab6eeabca0",
            "completed_at": "2018-08-01T08:23:05.821Z",
            "last_viewed_at": "2018-08-02T05:01:55.604Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 534347,
              "key": "a866f228-7644-4c08-9c79-33ee671c42f0",
              "title": "元组",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a866f228-7644-4c08-9c79-33ee671c42f0",
                "completed_at": "2018-08-02T05:02:26.602Z",
                "last_viewed_at": "2018-08-02T05:02:26.602Z",
                "unstructured": "{\"answer_ids\":[\"a1512775162355\",\"a1512775222470\",\"a1512775223223\",\"a1512775223803\"],\"is_correct\":true}"
              },
              "question": {
                "complex_prompt": {
                  "text": "请将以下数量与数据结构相匹配。"
                },
                "concepts_label": "数据结构",
                "answers_label": "数量",
                "concepts": [
                  {
                    "text": "元组（顺序）",
                    "correct_answer": {
                      "id": "a1512775162355",
                      "text": "有序"
                    }
                  },
                  {
                    "text": "元组（可变性）",
                    "correct_answer": {
                      "id": "a1512775222470",
                      "text": "不可变"
                    }
                  },
                  {
                    "text": "列表（顺序）",
                    "correct_answer": {
                      "id": "a1512775223223",
                      "text": "有序"
                    }
                  },
                  {
                    "text": "列表（可变性）",
                    "correct_answer": {
                      "id": "a1512775223803",
                      "text": "可变"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1512775223803",
                    "text": "可变"
                  },
                  {
                    "id": "a1512775162355",
                    "text": "有序"
                  },
                  {
                    "id": "a1512775222470",
                    "text": "不可变"
                  },
                  {
                    "id": "a1512775223223",
                    "text": "有序"
                  }
                ]
              }
            },
            {
              "id": 534348,
              "key": "844820f2-8706-4396-a686-1eddec8d20b8",
              "title": "元组",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "844820f2-8706-4396-a686-1eddec8d20b8",
                "completed_at": "2018-08-02T05:02:53.456Z",
                "last_viewed_at": "2018-08-02T05:02:53.456Z",
                "unstructured": "{\"selected_id\":\"a1512774788701\",\"is_correct\":true}"
              },
              "question": {
                "prompt": "以下代码的输出是什么？（请将这道多选题的答案中的逗号当做换行符。）\n\n```python\ntuple_a = 1, 2\ntuple_b = (1, 2)\n\nprint(tuple_a == tuple_b)\nprint(tuple_a[1])\n```",
                "answers": [
                  {
                    "id": "a1512774728026",
                    "text": "True, 1",
                    "is_correct": false
                  },
                  {
                    "id": "a1512774788040",
                    "text": "False, 1",
                    "is_correct": false
                  },
                  {
                    "id": "a1512774788701",
                    "text": "True, 2",
                    "is_correct": true
                  },
                  {
                    "id": "a1512774789338",
                    "text": "False, 2",
                    "is_correct": false
                  },
                  {
                    "id": "a1512775648766",
                    "text": "Error",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 534349,
              "key": "5b740f21-7c82-4114-861e-855f9ca12207",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 元组 ",
              "instructor_notes": ""
            },
            {
              "id": 534350,
              "key": "2cae0dd7-8614-404f-adf8-433a474beb08",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "2cae0dd7-8614-404f-adf8-433a474beb08",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4880871308525568",
                "initial_code_files": [
                  {
                    "text": "## You may test any code out here. Use Test Run to see your output",
                    "name": "tuples.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 868935,
          "key": "ae643847-8d61-4072-8852-9d25f79de6e9",
          "title": "集合",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ae643847-8d61-4072-8852-9d25f79de6e9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 866973,
              "key": "2dd9231a-e010-495d-9cfc-1c8e62cd74d6",
              "title": "L2 22 Sets V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "lrrwBc-DSDo",
                "china_cdn_id": "lrrwBc-DSDo.mp4"
              }
            },
            {
              "id": 866974,
              "key": "fcbfebe4-2163-46b9-be59-f08959ed5917",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 集合\n\n__集合__是一个包含唯一元素的可变无序集合数据类型。集合的一个用途是快速删除列表中的重复项。\n```python\nnumbers = [1, 2, 6, 3, 1, 1, 6]\nunique_nums = set(numbers)\nprint(unique_nums)\n```\n输出为：\n```txt\n{1, 2, 3, 6}\n```\n集合和列表一样支持 `in` 运算符。和列表相似，你可以使用 `add` 方法将元素添加到集合中，并使用 `pop` 方法删除元素。但是，当你从集合中拿出元素时，会随机删除一个元素。注意和列表不同，集合是无序的，因此没有“最后一个元素”。\n\n```python\nfruit = {\"apple\", \"banana\", \"orange\", \"grapefruit\"}  # define a set\n\nprint(\"watermelon\" in fruit)  # check for element\n\nfruit.add(\"watermelon\")  # add an element\nprint(fruit)\n\nprint(fruit.pop())  # remove a random element\nprint(fruit)\n```\n输出结果为：\n```txt\nFalse\n{'grapefruit', 'orange', 'watermelon', 'banana', 'apple'}\ngrapefruit\n{'orange', 'watermelon', 'banana', 'apple'}\n```\n你可以对集合执行的其他操作包括可以对数学集合执行的操作。可以对集合轻松地执行 union、intersection 和 difference 等方法，并且与其他容器相比，速度快了很多。",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 534411,
          "key": "364dcf34-3ad9-4be2-a376-933dd5250805",
          "title": "练习：集合",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "364dcf34-3ad9-4be2-a376-933dd5250805",
            "completed_at": "2018-08-01T08:23:11.139Z",
            "last_viewed_at": "2018-08-02T05:06:47.476Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 534356,
              "key": "4a713ce8-7155-40f2-8010-deeee69deed5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 练习：将`列表`转换为`集合`\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 534357,
              "key": "6eb869da-e8c0-4a14-b6f0-b53d0c3742ba",
              "title": "集合 I",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6eb869da-e8c0-4a14-b6f0-b53d0c3742ba",
                "completed_at": "2018-08-02T05:07:15.594Z",
                "last_viewed_at": "2018-08-02T05:07:15.594Z",
                "unstructured": "{\"selected_id\":\"a1512776458072\",\"is_correct\":true}"
              },
              "question": {
                "prompt": "下面的代码输出是什么？\n\n```python\na = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nb = set(a)\nprint(len(a) - len(b))\n```",
                "answers": [
                  {
                    "id": "a1512776345045",
                    "text": "10",
                    "is_correct": false
                  },
                  {
                    "id": "a1512776458072",
                    "text": "6",
                    "is_correct": true
                  },
                  {
                    "id": "a1512776458627",
                    "text": "4",
                    "is_correct": false
                  },
                  {
                    "id": "a1512776459144",
                    "text": "Error",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 534358,
              "key": "678a1adc-6fcc-482a-a7f0-b98f3d3160f7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 练习：`add` 和 `pop`",
              "instructor_notes": ""
            },
            {
              "id": 534360,
              "key": "2d35c8cf-6e83-4f11-87d6-f55938b1e9e0",
              "title": "Sets II",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2d35c8cf-6e83-4f11-87d6-f55938b1e9e0",
                "completed_at": "2018-08-02T05:07:42.145Z",
                "last_viewed_at": "2018-08-02T05:07:46.185Z",
                "unstructured": "{\"selected_id\":\"a1512776657972\",\"is_correct\":true}"
              },
              "question": {
                "prompt": "请看看以下代码：\n\n```python\na = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nb = set(a)\nb.add(5)\nb.pop()\n```\n执行这段代码后，数字 5 会在集合 `b` 中吗？",
                "answers": [
                  {
                    "id": "a1512776640767",
                    "text": "在",
                    "is_correct": false
                  },
                  {
                    "id": "a1512776657470",
                    "text": "不在",
                    "is_correct": false
                  },
                  {
                    "id": "a1512776657972",
                    "text": "可能在",
                    "is_correct": true
                  },
                  {
                    "id": "a1512776658466",
                    "text": "会产生错误",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 534362,
              "key": "8a385194-8ffe-43da-803c-97f97dce4221",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 集合",
              "instructor_notes": ""
            },
            {
              "id": 534365,
              "key": "57044c16-97de-444b-a72e-8ea65829e0f2",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "57044c16-97de-444b-a72e-8ea65829e0f2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5064046672478208",
                "initial_code_files": [
                  {
                    "text": "## You may test any code out here. Use Test Run to see your output",
                    "name": "set.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 868937,
          "key": "47a34480-110c-4cfa-be87-73278fc1a1e3",
          "title": "字典和恒等运算符",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "47a34480-110c-4cfa-be87-73278fc1a1e3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 866981,
              "key": "3dc2f4a0-09fb-4c4b-8451-caab2bf89f3f",
              "title": "L2 24 Dictionaries And Identiy Operators V4",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "oZJdRjVLCZw",
                "china_cdn_id": "oZJdRjVLCZw.mp4"
              }
            },
            {
              "id": 866982,
              "key": "bd31bcff-cd65-4398-b2bb-f51e75038118",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 字典和恒等运算符\n\n### 字典\n__字典__是可变数据类型，其中存储的是唯一键到值的映射。下面是存储元素和相应原子序数的字典。\n```python\nelements = {\"hydrogen\": 1, \"helium\": 2, \"carbon\": 6}\n```\n字典的键可以是任何不可变类型，例如整数或元组，而不仅仅是字符串。甚至每个键都不一定要是相同的类型！我们可以使用方括号并在括号里放入键，查询字典中的值或向字典中插入新值。\n```python\nprint(elements[\"helium\"])  # print the value mapped to \"helium\"\nelements[\"lithium\"] = 3  # insert \"lithium\" with a value of 3 into the dictionary\n```\n我们可以像检查某个值是否在列表或集合中一样，使用关键字 `in` 检查值是否在字典中。字典有一个也很有用的相关方法，叫做 `get`。get 会在字典中查询值，但是和方括号不同，如果没有找到键，get 会返回 None（或者你所选的默认值）。\n```python\nprint(\"carbon\" in elements)\nprint(elements.get(\"dilithium\"))\n```\n输出结果为：\n```txt\nTrue\nNone\n```\nCarbon 位于该字典中，因此输出 True。Dilithium 不在字典中，因此 `get` 返回 None，然后系统输出 None。如果你预计查询有时候会失败，`get` 可能比普通的方括号查询更合适，因为错误可能会使程序崩溃。\n\n### 恒等运算符\n|关键字|运算符|\n|--|--|\n|`is`|检查两边是否恒等|\n|`is not`|检查两边是否不恒等|\n\n你可以使用运算符 `is` 检查某个键是否返回了 None。或者使用 `is not` 检查是否没有返回 None。\n```python\nn = elements.get(\"dilithium\")\nprint(n is None)\nprint(n is not None)\n```\n会输出：\n```txt\nTrue\nFalse\n```\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 534413,
          "key": "59aed96b-4ee7-4623-b520-3cd5e6ae82e7",
          "title": "练习：字典和恒等运算符",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "59aed96b-4ee7-4623-b520-3cd5e6ae82e7",
            "completed_at": "2018-08-01T08:23:16.618Z",
            "last_viewed_at": "2018-08-02T05:22:04.685Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 534369,
              "key": "9a3cecb9-e5d2-4b45-b4b5-dfeeee29f3e4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 练习：定义字典\n\n请定义一个叫做 `population` 的字典，其中包含以下数据：\n\n|  **键** | **值**  |\n|---|---|\n|  Shanghai | 17.8  |\n|  Istanbul | 13.3  |\n|  Karachi |  13.0 |\n|  Mumbai | 12.5  |",
              "instructor_notes": ""
            },
            {
              "id": 534370,
              "key": "19c8f2bc-efa4-4c3c-86c1-c07ef46e8c32",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "19c8f2bc-efa4-4c3c-86c1-c07ef46e8c32",
                "completed_at": "2018-08-02T05:16:21.551Z",
                "last_viewed_at": "2018-08-02T05:19:58.747Z",
                "unstructured": "{\"popdict.py\":\"# Define a Dictionary, population,\\n# that provides information\\n# on the world's largest cities.\\n# The key is the name of a city\\n# (a string), and the associated\\n# value is its population in\\n# millions of people.\\n\\n#   Key     |   Value\\n# Shanghai  |   17.8\\n# Istanbul  |   13.3\\n# Karachi   |   13.0\\n# Mumbai    |   12.5\\n\\npopulation = {'Shanghai':17.8,'Istanbul':13.3,'Karachi':13.0,'Mumbai':12.5}\\nprint(population.get('fengrun'))\"}"
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4639544478138368",
                "initial_code_files": [
                  {
                    "text": "# Define a Dictionary, population,\n# that provides information\n# on the world's largest cities.\n# The key is the name of a city\n# (a string), and the associated\n# value is its population in\n# millions of people.\n\n#   Key     |   Value\n# Shanghai  |   17.8\n# Istanbul  |   13.3\n# Karachi   |   13.0\n# Mumbai    |   12.5",
                    "name": "popdict.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 534372,
              "key": "5a561aad-ea6a-487e-b121-3cb2c4aac33f",
              "title": "不可变键",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5a561aad-ea6a-487e-b121-3cb2c4aac33f",
                "completed_at": "2018-08-02T05:17:20.129Z",
                "last_viewed_at": "2018-08-02T05:17:24.448Z",
                "unstructured": "{\"selected_ids\":[\"a1512763384298\",\"a1512763421545\",\"a1512763422063\"],\"is_correct\":true}"
              },
              "question": {
                "prompt": "以下哪些项可以用作字典的键？（请选中所有适用项。） \nHint: 字典的键必须是不可变的，即所属的类型必须不可变。",
                "answers": [
                  {
                    "id": "a1512763384298",
                    "text": "`str`",
                    "is_correct": true
                  },
                  {
                    "id": "a1512763421020",
                    "text": "`list`",
                    "is_correct": false
                  },
                  {
                    "id": "a1512763421545",
                    "text": "`int`",
                    "is_correct": true
                  },
                  {
                    "id": "a1512763422063",
                    "text": "`float`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 534373,
              "key": "b5423fdb-5805-42d2-92c9-dc716352432d",
              "title": "练习：查看哪些值不在字典里",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b5423fdb-5805-42d2-92c9-dc716352432d",
                "completed_at": "2018-08-02T05:20:09.946Z",
                "last_viewed_at": "2018-08-02T05:20:09.946Z",
                "unstructured": "{\"selected_id\":\"a1512763543691\",\"is_correct\":true}"
              },
              "question": {
                "prompt": "如果我们查找不在字典中的值，会发生什么？请在你自己的计算机上创建一个测试字典，并使用方括号查找尚未定义的值。会发生什么？",
                "answers": [
                  {
                    "id": "a1512763525117",
                    "text": "查询返回 `None`",
                    "is_correct": false
                  },
                  {
                    "id": "a1512763543169",
                    "text": "键被添加到字典中，默认值为 None",
                    "is_correct": false
                  },
                  {
                    "id": "a1512763543691",
                    "text": "发生 `KeyError`",
                    "is_correct": true
                  },
                  {
                    "id": "a1512763544153",
                    "text": "Python 在互联网上搜索合适的值",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 534374,
              "key": "a0464643-a85a-4dd8-a029-9cb603353c8e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 返回默认值的 `get`\n\n字典有一个也很有用的相关方法，叫做 `get`。get 会在字典中查询值，但是和方括号不同，如果没有找到键，get 会返回 None（或者你所选的默认值）。如果你预计查询有时候会失败，`get` 可能比普通的方括号查询更合适。\n\n```python\n>>> elements.get('dilithium')\nNone\n>>> elements['dilithium']\nKeyError: 'dilithium'\n>>> elements.get('kryptonite', 'There\\'s no such element!')\n\"There's no such element!\"\n```\n在上个示例中，我们指定了一个默认值（字符串 `'There\\'s no such element!`），当键没找到时，get 会返回该值。\n\n## 检查是否相等与恒等：`==` 与 `is`",
              "instructor_notes": ""
            },
            {
              "id": 534375,
              "key": "25d866a4-d465-42d1-a58d-5f888371d94f",
              "title": "检查是否相等与恒等",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "25d866a4-d465-42d1-a58d-5f888371d94f",
                "completed_at": "2018-08-02T05:22:25.664Z",
                "last_viewed_at": "2018-08-02T05:23:22.983Z",
                "unstructured": "{\"selected_id\":\"a1512764504391\",\"is_correct\":true}"
              },
              "question": {
                "prompt": "以下代码的输出是什么？（请将这道多选题的答案中的逗号当做换行符。）\n\n```python\na = [1, 2, 3]\nb = a\nc = [1, 2, 3]\n\nprint(a == b)\nprint(a is b)\nprint(a == c)\nprint(a is c)\n```\n\n该页面的靠下部分有一个编程练习，你可以用该练习进行实验。",
                "answers": [
                  {
                    "id": "a1512764280834",
                    "text": "True, True, True, True",
                    "is_correct": false
                  },
                  {
                    "id": "a1512764503835",
                    "text": "True, False, True, False",
                    "is_correct": false
                  },
                  {
                    "id": "a1512764504391",
                    "text": "True, True, True, False",
                    "is_correct": true
                  },
                  {
                    "id": "a1512764504903",
                    "text": "True, True, False, False",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 534376,
              "key": "e6bc23fe-2bf6-4870-b1b7-7e3b9c1690f5",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "e6bc23fe-2bf6-4870-b1b7-7e3b9c1690f5",
                "completed_at": "2018-08-02T05:22:35.024Z",
                "last_viewed_at": "2018-08-02T05:22:35.024Z",
                "unstructured": "{\"equality_identity.py\":\"# Test the code here if you'd like\\na = [1, 2, 3]\\nb = a\\nc = [1, 2, 3]\\n\\nprint(a == b)\\nprint(a is b)\\nprint(a == c)\\nprint(a is c)\"}"
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4563386923352064",
                "initial_code_files": [
                  {
                    "text": "# Test the code here if you'd like\na = [1, 2, 3]\nb = a\nc = [1, 2, 3]",
                    "name": "equality_identity.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 534414,
          "key": "4814a6a9-cd30-48b2-be9b-47fe711cf295",
          "title": "解决方案：字典与恒等运算符",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4814a6a9-cd30-48b2-be9b-47fe711cf295",
            "completed_at": "2018-08-01T08:23:19.684Z",
            "last_viewed_at": "2018-08-02T05:24:25.176Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 534377,
              "key": "3fb4724a-2901-43e9-ba2b-ee8b2d9cc6a9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 解决方案：定义字典\n\n我们可以如下所示地定义字典：\n```python\n>>> population = {'Shanghai': 17.8,\n              'Istanbul': 13.3,\n              'Karachi': 13.0,\n              'Mumbai': 12.5}\n```\n我选择将每个键值对单独放一行，使这个字典定义更容易读懂，但是是否使用换行符以及在何处使用只是一种样式选择。下面这段代码也可行：\n\n```python\n>>> population = {'Shanghai': 17.8, 'Istanbul': 13.3, 'Karachi': 13.0, 'Mumbai': 12.5}\n``` ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 591743,
          "key": "91b88086-928d-42fa-8741-236c6e892a40",
          "title": "练习：字典",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "91b88086-928d-42fa-8741-236c6e892a40",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 591572,
              "key": "6de518d1-0789-4870-97c3-0baefa0a219c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 说明\n\n使用下面的字典来回答**所有的问题**。你有一个名为`animals`的字典，如下所示：\n\n```\nanimals = {'dogs': [20, 10, 15, 8, 32, 15], 'cats': [3,4,2,8,2,4], 'rabbits': [2, 3, 3], 'fish': [0.3, 0.5, 0.8, 0.3, 1]}\n```\n让我们通过操作这个字典来尝试一些想法吧！如果你想自己尝试编写任何代码，可以在页面底部的环境中进行测试。",
              "instructor_notes": ""
            },
            {
              "id": 591573,
              "key": "f82e03b6-b281-4695-8abe-07449a0da53a",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f82e03b6-b281-4695-8abe-07449a0da53a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "###问题1\n\n将每个描述与其相应的值匹配。"
                },
                "concepts_label": "描述",
                "answers_label": "值",
                "concepts": [
                  {
                    "text": "字典中键的数据类型。",
                    "correct_answer": {
                      "id": "a1521497721942",
                      "text": "字符串"
                    }
                  },
                  {
                    "text": "字典中值的数据类型。",
                    "correct_answer": {
                      "id": "a1521498261488",
                      "text": "列表"
                    }
                  },
                  {
                    "text": " `animals['dogs']`的结果",
                    "correct_answer": {
                      "id": "a1521498417556",
                      "text": "[20, 10, 15, 8, 32, 15]"
                    }
                  },
                  {
                    "text": "`animals['dogs'][3]`的结果",
                    "correct_answer": {
                      "id": "a1521498469953",
                      "text": "8"
                    }
                  },
                  {
                    "text": "`animals[3]`的结果",
                    "correct_answer": {
                      "id": "a1521499097492",
                      "text": "Error"
                    }
                  },
                  {
                    "text": "`animals['fish']`的结果",
                    "correct_answer": {
                      "id": "a1521499119725",
                      "text": "[0.3, 0.5, 0.8, 0.3, 1]"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1521498417556",
                    "text": "[20, 10, 15, 8, 32, 15]"
                  },
                  {
                    "id": "a1521499097492",
                    "text": "Error"
                  },
                  {
                    "id": "a1521498523190",
                    "text": "Error"
                  },
                  {
                    "id": "a1521499119725",
                    "text": "[0.3, 0.5, 0.8, 0.3, 1]"
                  },
                  {
                    "id": "a1521498527078",
                    "text": "Error"
                  },
                  {
                    "id": "a1521497721942",
                    "text": "字符串"
                  },
                  {
                    "id": "a1521498261488",
                    "text": "列表"
                  },
                  {
                    "id": "a1521498469953",
                    "text": "8"
                  },
                  {
                    "id": "a1521498530787",
                    "text": "None"
                  },
                  {
                    "id": "a1521498534510",
                    "text": "15"
                  }
                ]
              }
            },
            {
              "id": 591574,
              "key": "66e0b416-4633-4bb7-a88d-c4ac85b52f95",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "66e0b416-4633-4bb7-a88d-c4ac85b52f95",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4744123211448320",
                "initial_code_files": [
                  {
                    "text": "animals = {'dogs': [20, 10, 15, 8, 32, 15], \n 'cats': [3,4,2,8,2,4], \n 'rabbits': [2, 3, 3], \n 'fish': [0.3, 0.5, 0.8, 0.3, 1]}",
                    "name": "dictionary_practice.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 868940,
          "key": "51bbb72b-2caf-4194-bce5-1af0400bbd2e",
          "title": "什么时候使用字典？",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "51bbb72b-2caf-4194-bce5-1af0400bbd2e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 867011,
              "key": "099b6f55-2207-4fdd-a190-b84dededd7de",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 什么时候使用字典？\n\n让我们重新回顾一下之前华尔街的例子。上次，为了能够方便地打印指数基金中持股（或者股票）的名称，我们为指数基金创建了一个 list，[Vanguard Institutional Index Fund](https://www.marketwatch.com/investing/fund/vinix/holdings)。\n\n现在，假设你依然是 VINIX 的投资基金经理，你希望可以打印更多关于每一次持股的信息。比如说，你每一个持股的回报率是多少？\n\n在这种情况下，字典就可以发挥很大的作用了，因为这里有一个非常关键的关系：值关联。换句话说，每个持股与信息（例如，回报率）之间存在着联系，并且都在一个指数基金 VINIX 下。\n```\nVINIX =  {'C': 0.74, 'MA': 0.78, 'BA': 0.79, 'PG': 0.85, 'CSCO': 0.88, 'VZ': 0.9, 'PFE': 0.92, 'HD': 0.97, 'INTC': 1.0, 'T': 1.01, 'V': 1.02, 'UNH': 1.02, 'WFC': 1.05, 'CVX': 1.05, 'BAC': 1.15, 'JNJ': 1.41, 'GOOGL': 1.46, 'GOOG': 1.47, 'BRK.B': 1.5, 'XOM': 1.52, 'JPM': 1.53, 'FB': 2.02, 'AMZN': 2.96, 'MSFT': 3.28, 'AAPL': 3.94}```",
              "instructor_notes": ""
            },
            {
              "id": 867013,
              "key": "32654fe2-dae1-4189-8140-af6be10c15cf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "---",
              "instructor_notes": ""
            },
            {
              "id": 867014,
              "key": "171bb212-82cd-48c3-91d3-27df96c3c9bf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "你还可以添加其他你想了解的信息，例如 YTD 的回报率。 为此，我们可以将信息添加到与其相关联的`key`中，即股票代码符号。</br>\n像这样：\n\n```\nVINIX = {'C': [0.74, -6.51],  'MA': [0.78, 34.77],  'BA': [0.79, 17.01],  'PG': [0.85, -8.81],  'CSCO': [0.88, 18.56],  'VZ': [0.9, 2.16],  'PFE': [0.92, 13.96],  'HD': [0.97, 3.2],  'INTC': [1.0, 2.61],  'T': [1.01, -15.19],  'V': [1.02, 24.0],  'UNH': [1.02, 19.32],  'WFC': [1.05, -3.59],  'CVX': [1.05, -5.77],  'BAC': [1.15, 4.27],  'JNJ': [1.41, -5.58],  'GOOGL': [1.46, 17.84],  'GOOG': [1.47, 17.03],  'BRK.B': [1.5, 4.54],  'XOM': [1.52, -6.87],  'JPM': [1.53, 7.66],  'FB': [2.02, 0.91], 'AMZN': [2.96, 62.75], 'MSFT': [3.28, 26.61], 'AAPL': [3.94, 26.01]}```\n\n​",
              "instructor_notes": ""
            },
            {
              "id": 867012,
              "key": "4dc3a96b-7003-497a-8625-bf6b5b9b78b7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "如你所见，数据结构在收集、存储和处理比简单字符串或整数更多信息方面非常有用。\n\n_你将很快学会如何使用字典方法完成任务，例如从键中提取值、按键排序值、向字典添加值，以及其他数据结构对数据科学至关重要的许多任务。_",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 868939,
          "key": "e77f6f70-414a-48f9-8b66-492e661c64a0",
          "title": "小测试：数据结构",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e77f6f70-414a-48f9-8b66-492e661c64a0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 866992,
              "key": "b4775eaa-a819-4884-a82d-e843f5109cf0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 小测试\n让我们再次暂停，快速检查一下对这部分课程内容的理解吧！",
              "instructor_notes": ""
            },
            {
              "id": 866993,
              "key": "d445905b-8bc2-4265-ab7d-113bbd736cb2",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d445905b-8bc2-4265-ab7d-113bbd736cb2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "关于元组，以下哪些描述是正确的？（多选）",
                "answers": [
                  {
                    "id": "a1533097139711",
                    "text": "元组是一种可变的数据结构",
                    "is_correct": false
                  },
                  {
                    "id": "a1533097140173",
                    "text": "元组是一种有序的数据结构",
                    "is_correct": true
                  },
                  {
                    "id": "a1533097140780",
                    "text": "元组可以像列表一样索引和切片。",
                    "is_correct": true
                  },
                  {
                    "id": "a1533097793837",
                    "text": "通过列出由逗号分隔并包含在大括号内的元素序列来定义元组：`{}`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 866991,
              "key": "1d62f6ea-5f8b-41ed-847b-04ac5c2345e9",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1d62f6ea-5f8b-41ed-847b-04ac5c2345e9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "关于集合，以下哪些描述是正确的？（多选）",
                "answers": [
                  {
                    "id": "a1533097623051",
                    "text": "集合是一种可变的数据结构",
                    "is_correct": true
                  },
                  {
                    "id": "a1533097653968",
                    "text": "集合是一种有序的数据结构",
                    "is_correct": false
                  },
                  {
                    "id": "a1533097654892",
                    "text": "集合可以像列表一样被索引和切片。",
                    "is_correct": false
                  },
                  {
                    "id": "a1533097655420",
                    "text": "集合不包含重复元素。",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 866994,
              "key": "bf66a401-fd75-4ae0-9ab7-cf460b2cfe68",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bf66a401-fd75-4ae0-9ab7-cf460b2cfe68",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "判断以下描述是否正确：\n_集合是唯一用`{}`定义的数据结构_",
                "answers": [
                  {
                    "id": "a1533098873574",
                    "text": "True",
                    "is_correct": false
                  },
                  {
                    "id": "a1533098918828",
                    "text": "False",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 866995,
              "key": "3188301c-dde8-4b92-b4e7-38d816cadacd",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3188301c-dde8-4b92-b4e7-38d816cadacd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "以下关于字典的描述，哪些是正确的？（多选）",
                "answers": [
                  {
                    "id": "a1533099334812",
                    "text": "字典是一种可变的数据结构。",
                    "is_correct": true
                  },
                  {
                    "id": "a1533099362788",
                    "text": "字典是一种有序的数据结构。",
                    "is_correct": false
                  },
                  {
                    "id": "a1533099363397",
                    "text": "可以使用键索引字典。",
                    "is_correct": true
                  },
                  {
                    "id": "a1533099363879",
                    "text": "字典的键是唯一的。",
                    "is_correct": true
                  },
                  {
                    "id": "a1533099412080",
                    "text": "任何数据类型都可以用作字典中的键。",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 866996,
              "key": "5011dd92-741e-4a6f-8313-2dc2df1eb231",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 练习：确定问题\n\n运行下面的代码 - 应该会报错。查看错误消息并尝试找出问题所在。然后，回答编辑器下方的测验问题。",
              "instructor_notes": ""
            },
            {
              "id": 866997,
              "key": "b266a737-188f-4e11-9132-628e742a998c",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "b266a737-188f-4e11-9132-628e742a998c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6265917028302848",
                "initial_code_files": [
                  {
                    "text": "# invalid dictionary - this should break\nroom_numbers = {\n    ['Freddie', 'Jen']: 403,\n    ['Ned', 'Keith']: 391,\n    ['Kristin', 'Jazzmyne']: 411,\n    ['Eugene', 'Zach']: 395\n}",
                    "name": "dictionary_keys.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 866998,
              "key": "bfcf9a8c-7184-4f77-ac46-7160d2bbb025",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bfcf9a8c-7184-4f77-ac46-7160d2bbb025",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "上面的代码有什么问题？",
                "answers": [
                  {
                    "id": "a1534902085329",
                    "text": "字典不能使用容器作为其键",
                    "is_correct": false
                  },
                  {
                    "id": "a1534902390855",
                    "text": "字典使用可变数据类型作为其键",
                    "is_correct": true
                  },
                  {
                    "id": "a1534902392427",
                    "text": "每个字典键中的值太多",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 868938,
          "key": "b64714e6-9aec-43af-9a27-6ba2f8848979",
          "title": "复合数据结构",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b64714e6-9aec-43af-9a27-6ba2f8848979",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 866999,
              "key": "512977d6-88df-410f-a70c-98e0c5242ed9",
              "title": "L2 26 Compound Data Structures V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "1EOp1AaP3BE",
                "china_cdn_id": "1EOp1AaP3BE.mp4"
              }
            },
            {
              "id": 867000,
              "key": "fa099f48-7681-44b6-954f-18df8d7b47af",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 复合数据结构\n\n我们可以在其他容器中包含容器，以创建复合数据结构。例如，下面的字典将键映射到也是字典的值！\n```python\nelements = {\"hydrogen\": {\"number\": 1,\n                         \"weight\": 1.00794,\n                         \"symbol\": \"H\"},\n              \"helium\": {\"number\": 2,\n                         \"weight\": 4.002602,\n                         \"symbol\": \"He\"}}\n```\n我们可以如下所示地访问这个嵌套字典中的元素。\n```python\nhelium = elements[\"helium\"]  # get the helium dictionary\nhydrogen_weight = elements[\"hydrogen\"][\"weight\"]  # get hydrogen's weight\n```\n\n你还可以向元素字典添加新键。\n```\noxygen = {\"number\":8,\"weight\":15.999,\"symbol\":\"O\"}  # create a new oxygen dictionary \nelements[\"oxygen\"] = oxygen  # assign 'oxygen' as a key to the elements dictionary\nprint('elements = ', elements)\n```\n\n输出是：\n```\nelements =  {\"hydrogen\": {\"number\": 1,\n                          \"weight\": 1.00794,\n                          \"symbol\": 'H'},\n               \"helium\": {\"number\": 2,\n                          \"weight\": 4.002602,\n                          \"symbol\": \"He\"}, \n               \"oxygen\": {\"number\": 8, \n                          \"weight\": 15.999, \n                          \"symbol\": \"O\"}}```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 534416,
          "key": "788a3fa5-e1be-41ba-aab4-afad0a60b23b",
          "title": "练习：复合数据结构",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "788a3fa5-e1be-41ba-aab4-afad0a60b23b",
            "completed_at": "2018-08-01T08:23:23.828Z",
            "last_viewed_at": "2018-08-02T05:28:39.155Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 534380,
              "key": "3968e635-9ebb-4eab-91b4-07d588706966",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 练习：向嵌套字典中添加值\n\n请自己尝试处理嵌套字典。向 `elements` 字典中的每个字典添加另一个条目 'is_noble_gas。插入新条目后，你应该能够执行以下查询：\n\n```python\n>>> print(elements['hydrogen']['is_noble_gas'])\nFalse\n>>> print(elements['helium']['is_noble_gas'])\nTrue\n```",
              "instructor_notes": ""
            },
            {
              "id": 534381,
              "key": "97273d22-5719-44a0-adf1-7dcbb9d58bd0",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "97273d22-5719-44a0-adf1-7dcbb9d58bd0",
                "completed_at": "2018-08-02T05:30:53.506Z",
                "last_viewed_at": "2018-08-02T05:30:55.622Z",
                "unstructured": "{\"elements.py\":\"elements = {'hydrogen': {'number': 1, 'weight': 1.00794, 'symbol': 'H','is_noble_gas':False},\\n            'helium': {'number': 2, 'weight': 4.002602, 'symbol': 'He','is_noble_gas':True}}\\nprint(elements['hydrogen']['is_noble_gas'])\\nprint(elements['helium']['is_noble_gas'])\"}"
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4571559172374528",
                "initial_code_files": [
                  {
                    "text": "elements = {'hydrogen': {'number': 1, 'weight': 1.00794, 'symbol': 'H'},\n            'helium': {'number': 2, 'weight': 4.002602, 'symbol': 'He'}}\n\n# todo: Add an 'is_noble_gas' entry to the hydrogen and helium dictionaries\n# hint: helium is a noble gas, hydrogen isn't",
                    "name": "elements.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 534383,
              "key": "b9fd4890-7688-4b3d-b30a-269aa0d05e51",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## 综合练习\n\n对于一组数据，我们可以将其看做（数据元素的）集合(collections)。在这节课，我们学习了 Python 中的各种不同的数据结构，这些结构可以用来存储、访问和操纵数据集合。具体而言，我们学习了列表(list)、集合(set)和字典(dictionary)。\n\n在接下来的几个练习中，你将有机会练习和复习列表(list)、集合(set)和字典(dictionary)的属性。",
              "instructor_notes": ""
            },
            {
              "id": 534382,
              "key": "4ca9a91b-70b7-45b6-8090-d4a49fcfa8c7",
              "title": "比较集合，列表",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4ca9a91b-70b7-45b6-8090-d4a49fcfa8c7",
                "completed_at": "2018-08-02T05:32:05.969Z",
                "last_viewed_at": "2018-08-02T05:32:05.969Z",
                "unstructured": "{\"selected_ids\":[\"a1512765695502\",\"a1512765695030\",\"a1512765694532\"],\"is_correct\":true}"
              },
              "question": {
                "prompt": "哪些属性使数据集适合使用 Python 列表来表示。",
                "answers": [
                  {
                    "id": "a1512765683306",
                    "text": "添加项目的顺序并不重要",
                    "is_correct": false
                  },
                  {
                    "id": "a1512765694532",
                    "text": "项目的索引始终以 0 开始",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765695030",
                    "text": "可排序",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765695502",
                    "text": "使用 `.append` 添加项目",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765696547",
                    "text": "使用 `.add` 添加项目",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 534384,
              "key": "a97f63aa-9635-4b14-a38f-e54fcde1ce9f",
              "title": "比较集合，集合",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a97f63aa-9635-4b14-a38f-e54fcde1ce9f",
                "completed_at": "2018-08-02T05:32:31.290Z",
                "last_viewed_at": "2018-08-02T05:32:44.210Z",
                "unstructured": "{\"selected_ids\":[\"a1512765764801\",\"a1512765753638\",\"a1512765764321\"],\"is_correct\":true}"
              },
              "question": {
                "prompt": "哪些属性使数据集适合使用 Python 集合来表示。",
                "answers": [
                  {
                    "id": "a1512765753638",
                    "text": "项目的出现顺序可能不一致",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765763859",
                    "text": "同一条目可以出现多次",
                    "is_correct": false
                  },
                  {
                    "id": "a1512765764321",
                    "text": "可变（你可以更改它）",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765764801",
                    "text": "使用 `.add` 添加项目",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765765253",
                    "text": "可排序",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 534385,
              "key": "3e5a275f-37cb-4ed7-9caa-d7fccd472780",
              "title": "比较集合，字典'",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3e5a275f-37cb-4ed7-9caa-d7fccd472780",
                "completed_at": "2018-08-02T05:33:45.183Z",
                "last_viewed_at": "2018-08-02T05:33:45.183Z",
                "unstructured": "{\"selected_ids\":[\"a1512765840495\",\"a1512765827376\",\"a1512765839334\"],\"is_correct\":true}"
              },
              "question": {
                "prompt": "哪些属性使数据集适合使用 Python 字典来表示。",
                "answers": [
                  {
                    "id": "a1512765827376",
                    "text": "每项都包含两部分",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765838813",
                    "text": "使用 `.append` 添加项目",
                    "is_correct": false
                  },
                  {
                    "id": "a1512765839334",
                    "text": "项目的出现顺序可能不一致",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765839792",
                    "text": "可排序",
                    "is_correct": false
                  },
                  {
                    "id": "a1512765840495",
                    "text": "可以嵌套",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 561491,
          "key": "39fce3b2-dd8f-40cd-accf-5eebda17592e",
          "title": "解决方案：复合数据结构",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "39fce3b2-dd8f-40cd-accf-5eebda17592e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 561243,
              "key": "64aaa8ea-1848-4cdb-bbb5-022ee28308c2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 解决方案： 给嵌套的字典添加值\n以下是我的解决方案：\n```python\nelements = {'hydrogen': {'number': 1, 'weight': 1.00794, 'symbol': 'H'},\n            'helium': {'number': 2, 'weight': 4.002602, 'symbol': 'He'}}\n\nelements['hydrogen']['is_noble_gas'] = False\nelements['helium']['is_noble_gas'] = True\n```\n\n注意最后两行，把`is_noble_gas`字段分别添加到 2 个字典中是必须的，运行了这两行代码，才能得到正确的最终结果。",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 868941,
          "key": "e72a31a5-b60a-42d6-abae-2b9471faebb5",
          "title": "练习题",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e72a31a5-b60a-42d6-abae-2b9471faebb5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 867015,
              "key": "3da3da35-2512-40f2-bf92-3135acaa9dc2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 练习题\n以下问题是基于你在上一课中看到的相同文本，即由Rudyard Kipling撰写的诗歌第一节*if*。我们已将所有字母转换为小写，并从文本中删除标点符号，然后将此修改后的文本存储在字符串变量`verse`中。\n\n# 测验：统计唯一的单词\n此测验的任务是查找文本中唯一单词的数量。在下面的代码编辑器中，完成以下三个步骤以获得答案。\n1. 将`verse`拆分成一系列的单词。**提示：** 你可以使用在上一课中学习到的字符串方法。\n2. 将列表转换为仅保留列表中唯一元素的数据结构。\n3. 打印容器的长度。",
              "instructor_notes": ""
            },
            {
              "id": 867016,
              "key": "5fcfce0b-01ee-4fad-9192-55fdb90d335f",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5fcfce0b-01ee-4fad-9192-55fdb90d335f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "Data Structures Practice Quiz",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6104019251101696",
                "initial_code_files": [
                  {
                    "text": "verse = \"if you can keep your head when all about you are losing theirs and blaming it on you   if you can trust yourself when all men doubt you     but make allowance for their doubting too   if you can wait and not be tired by waiting      or being lied about  don’t deal in lies   or being hated  don’t give way to hating      and yet don’t look too good  nor talk too wise\"\r\nprint(verse, '\\n')\r\n\r\n# split verse into list of words\r\nverse_list =\r\nprint(verse_list, '\\n')\r\n\r\n# convert list to a data structure that stores unique elements\r\nverse_set =\r\nprint(verse_set, '\\n')\r\n\r\n# print the number of unique words\r\nnum_unique = \r\nprint(num_unique, '\\n')",
                    "name": "count_unique_words.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 867017,
              "key": "5a71f760-f67a-486f-a18a-47c01ad5081c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "＃练习：诗歌词典\n在下面的代码编辑器中，您将看到一个字典，其中包含作为键存储的“verse”中的唯一单词（仅出现过一次的单词），以及作为值存储的在“verse”中出现的次数。 使用此词典回答以下问题。 在代码编辑器下面的测验中提交这些答案。\n\n尝试使用代码回答这些问题，而不是手动查看字典！\n1.  * verse_dict *中有多少个独特的单词？\n2.  *verse_dict*中含有\"breathe\"键吗？\n3. 当* verse_dict *按键排序时，所创建的列表的第一个元素是什么？\n**提示：** 使用合适的字典方法获取其键的列表，然后对该列表进行排序。使用此列表来回答接下来的问题。\n\n4. 哪个键（单词）在* verse_dict *中的值最大？",
              "instructor_notes": ""
            },
            {
              "id": 867018,
              "key": "46bad23a-2888-4f73-be2d-8a886b0f35e4",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "46bad23a-2888-4f73-be2d-8a886b0f35e4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6141163193630720",
                "initial_code_files": [
                  {
                    "text": "verse_dict =  {'if': 3, 'you': 6, 'can': 3, 'keep': 1, 'your': 1, 'head': 1, 'when': 2, 'all': 2, 'about': 2, 'are': 1, 'losing': 1, 'theirs': 1, 'and': 3, 'blaming': 1, 'it': 1, 'on': 1, 'trust': 1, 'yourself': 1, 'men': 1, 'doubt': 1, 'but': 1, 'make': 1, 'allowance': 1, 'for': 1, 'their': 1, 'doubting': 1, 'too': 3, 'wait': 1, 'not': 1, 'be': 1, 'tired': 1, 'by': 1, 'waiting': 1, 'or': 2, 'being': 2, 'lied': 1, 'don\\'t': 3, 'deal': 1, 'in': 1, 'lies': 1, 'hated': 1, 'give': 1, 'way': 1, 'to': 1, 'hating': 1, 'yet': 1, 'look': 1, 'good': 1, 'nor': 1, 'talk': 1, 'wise': 1}\nprint(verse_dict, '\\n')\n\n# find number of unique keys in the dictionary\nnum_keys = \nprint(num_keys)\n\n# find whether 'breathe' is a key in the dictionary\ncontains_breathe = \nprint(contains_breathe)\n\n# create and sort a list of the dictionary's keys\nsorted_keys = \n\n# get the first element in the sorted list of keys\nprint()\n\n# find the element with the highest value in the list of keys\nprint() ",
                    "name": "verse_dictionary.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 867019,
              "key": "4c3c4bb8-776d-4f01-a0f6-38fbdd738370",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4c3c4bb8-776d-4f01-a0f6-38fbdd738370",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "将正确答案与以下关于字典“verse_dict”的问题相匹配。"
                },
                "concepts_label": "问题",
                "answers_label": "解答",
                "concepts": [
                  {
                    "text": "*verse_dict *中有多少个独特的单词？",
                    "correct_answer": {
                      "id": "a1530042311282",
                      "text": "51"
                    }
                  },
                  {
                    "text": "*verse_dict*中含有\"breathe\"键吗？",
                    "correct_answer": {
                      "id": "a1530042312723",
                      "text": "没有"
                    }
                  },
                  {
                    "text": "**送分题：** * verse_dict *中的第一个键是什么？",
                    "correct_answer": {
                      "id": "a1530048204555",
                      "text": "不存在第一个键"
                    }
                  },
                  {
                    "text": "当* verse_dict *按键排序时，所创建的列表的第一个元素是什么？",
                    "correct_answer": {
                      "id": "a1533165375567",
                      "text": "'about'"
                    }
                  },
                  {
                    "text": "哪个键（单词）在* verse_dict *中的值最大？",
                    "correct_answer": {
                      "id": "a1533165376479",
                      "text": "'yourself'"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1531769413171",
                    "text": "'if'"
                  },
                  {
                    "id": "a1530047624250",
                    "text": "1"
                  },
                  {
                    "id": "a1530042312723",
                    "text": "没有"
                  },
                  {
                    "id": "a1530048204555",
                    "text": "不存在第一个键"
                  },
                  {
                    "id": "a1530047623362",
                    "text": "'wise'"
                  },
                  {
                    "id": "a1530055676553",
                    "text": "YES"
                  },
                  {
                    "id": "a1530047576897",
                    "text": "50"
                  },
                  {
                    "id": "a1533165375567",
                    "text": "'about'"
                  },
                  {
                    "id": "a1533165453425",
                    "text": "'and'"
                  },
                  {
                    "id": "a1530042311282",
                    "text": "51"
                  },
                  {
                    "id": "a1533165376479",
                    "text": "'yourself'"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 868942,
          "key": "fa90bf3e-69eb-4986-b26e-668a0aa88efb",
          "title": "解决方案：练习题",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fa90bf3e-69eb-4986-b26e-668a0aa88efb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 867021,
              "key": "3e6b966a-4d4a-46d8-beeb-ff2b93a3aea0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 解决方案：统计唯一的单词\n```python\nverse = \"if you can keep your head when all about you are losing theirs and blaming it on you   if you can trust yourself when all men doubt you     but make allowance for their doubting too   if you can wait and not be tired by waiting      or being lied about  don’t deal in lies   or being hated  don’t give way to hating      and yet don’t look too good  nor talk too wise\"\nprint(verse, \"\\n\")\n\n# split verse into list of words\nverse_list = verse.split()\nprint(verse_list, '\\n')\n\n# convert list to set to get unique words\nverse_set = set(verse_list)\nprint(verse_set, '\\n')\n\n# print the number of unique words\nnum_unique = len(verse_set)\nprint(num_unique)\n```",
              "instructor_notes": ""
            },
            {
              "id": 867022,
              "key": "1dfd26d4-86a6-479d-8dc9-b7429b711d67",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 输出\n```txt\nif you can keep your head when all about you are losing theirs and blaming it on you   if you can trust yourself when all men doubt you     but make allowance for their doubting too   if you can wait and not be tired by waiting      or being lied about  don’t deal in lies   or being hated  don’t give way to hating      and yet don’t look too good  nor talk too wise \n\n['if', 'you', 'can', 'keep', 'your', 'head', 'when', 'all', 'about', 'you', 'are', 'losing', 'theirs', 'and', 'blaming', 'it', 'on', 'you', 'if', 'you', 'can', 'trust', 'yourself', 'when', 'all', 'men', 'doubt', 'you', 'but', 'make', 'allowance', 'for', 'their', 'doubting', 'too', 'if', 'you', 'can', 'wait', 'and', 'not', 'be', 'tired', 'by', 'waiting', 'or', 'being', 'lied', 'about', 'don’t', 'deal', 'in', 'lies', 'or', 'being', 'hated', 'don’t', 'give', 'way', 'to', 'hating', 'and', 'yet', 'don’t', 'look', 'too', 'good', 'nor', 'talk', 'too', 'wise'] \n\n{'or', 'when', 'hating', 'make', 'all', 'head', 'waiting', 'losing', 'don’t', 'to', 'look', 'about', 'yourself', 'by', 'wise', 'doubting', 'trust', 'deal', 'allowance', 'being', 'too', 'wait', 'in', 'nor', 'for', 'theirs', 'and', 'if', 'on', 'lied', 'are', 'your', 'but', 'give', 'yet', 'lies', 'good', 'men', 'tired', 'doubt', 'hated', 'blaming', 'can', 'be', 'keep', 'their', 'not', 'it', 'talk', 'way', 'you'} \n\n51\n```",
              "instructor_notes": ""
            },
            {
              "id": 867020,
              "key": "ac905070-387a-4d1b-9dcc-f10cfd037c75",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 解决方案：诗歌字典\n```python\nverse_dict =  {'if': 3, 'you': 6, 'can': 3, 'keep': 1, 'your': 1, 'head': 1, 'when': 2, 'all': 2, 'about': 2, 'are': 1, 'losing': 1, 'theirs': 1, 'and': 3, 'blaming': 1, 'it': 1, 'on': 1, 'trust': 1, 'yourself': 1, 'men': 1, 'doubt': 1, 'but': 1, 'make': 1, 'allowance': 1, 'for': 1, 'their': 1, 'doubting': 1, 'too': 3, 'wait': 1, 'not': 1, 'be': 1, 'tired': 1, 'by': 1, 'waiting': 1, 'or': 2, 'being': 2, 'lied': 1, 'don\\'t': 3, 'deal': 1, 'in': 1, 'lies': 1, 'hated': 1, 'give': 1, 'way': 1, 'to': 1, 'hating': 1, 'yet': 1, 'look': 1, 'good': 1, 'nor': 1, 'talk': 1, 'wise': 1}\nprint(verse_dict, '\\n')\n\n# find number of unique keys in the dictionary\nnum_keys = len(verse_dict)\nprint(num_keys)\n\n# find whether 'breathe' is a key in the dictionary\ncontains_breathe = \"breathe\" in verse_dict\nprint(contains_breathe)\n\n# create and sort a list of the dictionary's keys\nsorted_keys = sorted(verse_dict.keys())\n\n# get the first element in the sorted list of keys\nprint(sorted_keys[0])\n\n# find the element with the highest value in the list of keys\nprint(sorted_keys[-1]) \n```",
              "instructor_notes": ""
            },
            {
              "id": 867023,
              "key": "cf41c98e-6314-461b-8a81-cdeda4bfcdd3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 输出\n```txt\n{'make': 1, 'waiting': 1, 'tired': 1, 'when': 2, 'hating': 1, 'give': 1, 'talk': 1, 'losing': 1, 'look': 1, 'too': 3, 'doubting': 1, 'all': 2, 'be': 1, 'wait': 1, 'you': 6, 'it': 1, 'allowance': 1, 'being': 2, 'by': 1, 'for': 1, 'to': 1, 'men': 1, 'in': 1, 'can': 3, 'about': 2, 'are': 1, 'hated': 1, 'wise': 1, 'your': 1, 'yourself': 1, \"don't\": 3, 'good': 1, 'way': 1, 'keep': 1, 'if': 3, 'blaming': 1, 'nor': 1, 'but': 1, 'or': 2, 'on': 1, 'not': 1, 'deal': 1, 'trust': 1, 'doubt': 1, 'yet': 1, 'lied': 1, 'lies': 1, 'their': 1, 'theirs': 1, 'and': 3, 'head': 1} \n\n51\nFalse\nabout\nyourself\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 868943,
          "key": "2056a882-8d80-44b5-ba84-c95bbfd58d03",
          "title": "总结",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2056a882-8d80-44b5-ba84-c95bbfd58d03",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 867024,
              "key": "19fbd140-e7b0-4701-8b7b-9cb7f55d8684",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# 祝贺您完成这节课程！\n\n充分了解数据结构是编程和数据分析不可或缺的一部分。作为数据分析师，你将经常使用数据和代码。因此，深入了解可用的数据类型和数据结构，知道何时使用它们，将有助于你编写更高效的代码。\n\n你可以在 [HackerRank](https://www.hackerrank.com/domains/python) 等网站上进行更多练习。\n\n在本课中，我们介绍了 Python 中的四个重要数据结构：\n\n| **数据结构**  | **有序性 (Ordered)**   | **可变性 (Mutable)**  | **构造函数 (Constructor)**  | **举例**   |\n|---|---|---|---|---|\n| List | Yes | Yes  | `[ ]` or `list()`  | `[5.7, 4, 'yes', 5.7]` |\n| Tuple | Yes  | No  | `( )` or `tuple()`  | `(5.7, 4, 'yes', 5.7)`  |\n| Set  | No  | Yes  | `{}`* or `set()`  | `{5.7, 4, 'yes'}`  |\n| Dictionary   | No  | No** | `{ }` or `dict()`   | `{'Jun': 75, 'Jul': 89}` |\n\n*你可以使用花括号来定义这样的集合：`{1,2,3}`。 但是，如果你像这样将花括号留空：`{}`，Python 将改为创建一个空字典。因此要创建一个空集合，请使用 `set（）`。\n\n**字典本身是可变的，但它的每个键都必须是不可变的。\n\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}